// Generated by jextract

package com.github.teruteru128.foreign.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Windows_h_21 extends Windows_h_22 {

    Windows_h_21() {
        // Should not be called directly
    }

    private static class RegSetKeyValueW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegSetKeyValueW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegSetKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor RegSetKeyValueW$descriptor() {
        return RegSetKeyValueW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegSetKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData)
     * }
     */
    public static MethodHandle RegSetKeyValueW$handle() {
        return RegSetKeyValueW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegSetKeyValueW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData)
     * }
     */
    public static int RegSetKeyValueW(MemorySegment hKey, MemorySegment lpSubKey, MemorySegment lpValueName, int dwType, MemorySegment lpData, int cbData) {
        var mh$ = RegSetKeyValueW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegSetKeyValueW", hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
            }
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegDeleteTreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegDeleteTreeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey)
     * }
     */
    public static FunctionDescriptor RegDeleteTreeA$descriptor() {
        return RegDeleteTreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey)
     * }
     */
    public static MethodHandle RegDeleteTreeA$handle() {
        return RegDeleteTreeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeA(HKEY hKey, LPCSTR lpSubKey)
     * }
     */
    public static int RegDeleteTreeA(MemorySegment hKey, MemorySegment lpSubKey) {
        var mh$ = RegDeleteTreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegDeleteTreeA", hKey, lpSubKey);
            }
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegDeleteTreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegDeleteTreeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey)
     * }
     */
    public static FunctionDescriptor RegDeleteTreeW$descriptor() {
        return RegDeleteTreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey)
     * }
     */
    public static MethodHandle RegDeleteTreeW$handle() {
        return RegDeleteTreeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegDeleteTreeW(HKEY hKey, LPCWSTR lpSubKey)
     * }
     */
    public static int RegDeleteTreeW(MemorySegment hKey, MemorySegment lpSubKey) {
        var mh$ = RegDeleteTreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegDeleteTreeW", hKey, lpSubKey);
            }
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegCopyTreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegCopyTreeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeA(HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static FunctionDescriptor RegCopyTreeA$descriptor() {
        return RegCopyTreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeA(HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static MethodHandle RegCopyTreeA$handle() {
        return RegCopyTreeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeA(HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static int RegCopyTreeA(MemorySegment hKeySrc, MemorySegment lpSubKey, MemorySegment hKeyDest) {
        var mh$ = RegCopyTreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegCopyTreeA", hKeySrc, lpSubKey, hKeyDest);
            }
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegGetValueA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegGetValueA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor RegGetValueA$descriptor() {
        return RegGetValueA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle RegGetValueA$handle() {
        return RegGetValueA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static int RegGetValueA(MemorySegment hkey, MemorySegment lpSubKey, MemorySegment lpValue, int dwFlags, MemorySegment pdwType, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = RegGetValueA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegGetValueA", hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
            }
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegGetValueW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegGetValueW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor RegGetValueW$descriptor() {
        return RegGetValueW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle RegGetValueW$handle() {
        return RegGetValueW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData)
     * }
     */
    public static int RegGetValueW(MemorySegment hkey, MemorySegment lpSubKey, MemorySegment lpValue, int dwFlags, MemorySegment pdwType, MemorySegment pvData, MemorySegment pcbData) {
        var mh$ = RegGetValueW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegGetValueW", hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
            }
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegCopyTreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegCopyTreeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static FunctionDescriptor RegCopyTreeW$descriptor() {
        return RegCopyTreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static MethodHandle RegCopyTreeW$handle() {
        return RegCopyTreeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegCopyTreeW(HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest)
     * }
     */
    public static int RegCopyTreeW(MemorySegment hKeySrc, MemorySegment lpSubKey, MemorySegment hKeyDest) {
        var mh$ = RegCopyTreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegCopyTreeW", hKeySrc, lpSubKey, hKeyDest);
            }
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegLoadMUIStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegLoadMUIStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory)
     * }
     */
    public static FunctionDescriptor RegLoadMUIStringA$descriptor() {
        return RegLoadMUIStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory)
     * }
     */
    public static MethodHandle RegLoadMUIStringA$handle() {
        return RegLoadMUIStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringA(HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory)
     * }
     */
    public static int RegLoadMUIStringA(MemorySegment hKey, MemorySegment pszValue, MemorySegment pszOutBuf, int cbOutBuf, MemorySegment pcbData, int Flags, MemorySegment pszDirectory) {
        var mh$ = RegLoadMUIStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegLoadMUIStringA", hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
            }
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegLoadMUIStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegLoadMUIStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory)
     * }
     */
    public static FunctionDescriptor RegLoadMUIStringW$descriptor() {
        return RegLoadMUIStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory)
     * }
     */
    public static MethodHandle RegLoadMUIStringW$handle() {
        return RegLoadMUIStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegLoadMUIStringW(HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory)
     * }
     */
    public static int RegLoadMUIStringW(MemorySegment hKey, MemorySegment pszValue, MemorySegment pszOutBuf, int cbOutBuf, MemorySegment pcbData, int Flags, MemorySegment pszDirectory) {
        var mh$ = RegLoadMUIStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegLoadMUIStringW", hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
            }
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegLoadAppKeyA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegLoadAppKeyA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyA(LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static FunctionDescriptor RegLoadAppKeyA$descriptor() {
        return RegLoadAppKeyA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyA(LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static MethodHandle RegLoadAppKeyA$handle() {
        return RegLoadAppKeyA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyA(LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static int RegLoadAppKeyA(MemorySegment lpFile, MemorySegment phkResult, int samDesired, int dwOptions, int Reserved) {
        var mh$ = RegLoadAppKeyA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegLoadAppKeyA", lpFile, phkResult, samDesired, dwOptions, Reserved);
            }
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegLoadAppKeyW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegLoadAppKeyW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyW(LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static FunctionDescriptor RegLoadAppKeyW$descriptor() {
        return RegLoadAppKeyW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyW(LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static MethodHandle RegLoadAppKeyW$handle() {
        return RegLoadAppKeyW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegLoadAppKeyW(LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved)
     * }
     */
    public static int RegLoadAppKeyW(MemorySegment lpFile, MemorySegment phkResult, int samDesired, int dwOptions, int Reserved) {
        var mh$ = RegLoadAppKeyW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegLoadAppKeyW", lpFile, phkResult, samDesired, dwOptions, Reserved);
            }
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateSystemShutdownA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateSystemShutdownA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static FunctionDescriptor InitiateSystemShutdownA$descriptor() {
        return InitiateSystemShutdownA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static MethodHandle InitiateSystemShutdownA$handle() {
        return InitiateSystemShutdownA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static int InitiateSystemShutdownA(MemorySegment lpMachineName, MemorySegment lpMessage, int dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateSystemShutdownA", lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateSystemShutdownW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateSystemShutdownW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static FunctionDescriptor InitiateSystemShutdownW$descriptor() {
        return InitiateSystemShutdownW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static MethodHandle InitiateSystemShutdownW$handle() {
        return InitiateSystemShutdownW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown)
     * }
     */
    public static int InitiateSystemShutdownW(MemorySegment lpMachineName, MemorySegment lpMessage, int dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateSystemShutdownW", lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AbortSystemShutdownA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AbortSystemShutdownA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownA(LPSTR lpMachineName)
     * }
     */
    public static FunctionDescriptor AbortSystemShutdownA$descriptor() {
        return AbortSystemShutdownA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownA(LPSTR lpMachineName)
     * }
     */
    public static MethodHandle AbortSystemShutdownA$handle() {
        return AbortSystemShutdownA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownA(LPSTR lpMachineName)
     * }
     */
    public static int AbortSystemShutdownA(MemorySegment lpMachineName) {
        var mh$ = AbortSystemShutdownA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AbortSystemShutdownA", lpMachineName);
            }
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AbortSystemShutdownW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("AbortSystemShutdownW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownW(LPWSTR lpMachineName)
     * }
     */
    public static FunctionDescriptor AbortSystemShutdownW$descriptor() {
        return AbortSystemShutdownW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownW(LPWSTR lpMachineName)
     * }
     */
    public static MethodHandle AbortSystemShutdownW$handle() {
        return AbortSystemShutdownW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL AbortSystemShutdownW(LPWSTR lpMachineName)
     * }
     */
    public static int AbortSystemShutdownW(MemorySegment lpMachineName) {
        var mh$ = AbortSystemShutdownW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AbortSystemShutdownW", lpMachineName);
            }
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateSystemShutdownExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT,
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateSystemShutdownExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static FunctionDescriptor InitiateSystemShutdownExA$descriptor() {
        return InitiateSystemShutdownExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static MethodHandle InitiateSystemShutdownExA$handle() {
        return InitiateSystemShutdownExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static int InitiateSystemShutdownExA(MemorySegment lpMachineName, MemorySegment lpMessage, int dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown, int dwReason) {
        var mh$ = InitiateSystemShutdownExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateSystemShutdownExA", lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateSystemShutdownExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT,
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateSystemShutdownExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static FunctionDescriptor InitiateSystemShutdownExW$descriptor() {
        return InitiateSystemShutdownExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static MethodHandle InitiateSystemShutdownExW$handle() {
        return InitiateSystemShutdownExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL InitiateSystemShutdownExW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason)
     * }
     */
    public static int InitiateSystemShutdownExW(MemorySegment lpMachineName, MemorySegment lpMessage, int dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown, int dwReason) {
        var mh$ = InitiateSystemShutdownExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateSystemShutdownExW", lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateShutdownA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateShutdownA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD InitiateShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static FunctionDescriptor InitiateShutdownA$descriptor() {
        return InitiateShutdownA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD InitiateShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static MethodHandle InitiateShutdownA$handle() {
        return InitiateShutdownA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD InitiateShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static int InitiateShutdownA(MemorySegment lpMachineName, MemorySegment lpMessage, int dwGracePeriod, int dwShutdownFlags, int dwReason) {
        var mh$ = InitiateShutdownA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateShutdownA", lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitiateShutdownW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("InitiateShutdownW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD InitiateShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static FunctionDescriptor InitiateShutdownW$descriptor() {
        return InitiateShutdownW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD InitiateShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static MethodHandle InitiateShutdownW$handle() {
        return InitiateShutdownW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD InitiateShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
     * }
     */
    public static int InitiateShutdownW(MemorySegment lpMachineName, MemorySegment lpMessage, int dwGracePeriod, int dwShutdownFlags, int dwReason) {
        var mh$ = InitiateShutdownW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitiateShutdownW", lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
            }
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CheckForHiberboot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CheckForHiberboot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD CheckForHiberboot(PBOOLEAN pHiberboot, BOOLEAN bClearFlag)
     * }
     */
    public static FunctionDescriptor CheckForHiberboot$descriptor() {
        return CheckForHiberboot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD CheckForHiberboot(PBOOLEAN pHiberboot, BOOLEAN bClearFlag)
     * }
     */
    public static MethodHandle CheckForHiberboot$handle() {
        return CheckForHiberboot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD CheckForHiberboot(PBOOLEAN pHiberboot, BOOLEAN bClearFlag)
     * }
     */
    public static int CheckForHiberboot(MemorySegment pHiberboot, byte bClearFlag) {
        var mh$ = CheckForHiberboot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CheckForHiberboot", pHiberboot, bClearFlag);
            }
            return (int)mh$.invokeExact(pHiberboot, bClearFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegSaveKeyExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegSaveKeyExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RegSaveKeyExA$descriptor() {
        return RegSaveKeyExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static MethodHandle RegSaveKeyExA$handle() {
        return RegSaveKeyExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static int RegSaveKeyExA(MemorySegment hKey, MemorySegment lpFile, MemorySegment lpSecurityAttributes, int Flags) {
        var mh$ = RegSaveKeyExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegSaveKeyExA", hKey, lpFile, lpSecurityAttributes, Flags);
            }
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegSaveKeyExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegSaveKeyExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RegSaveKeyExW$descriptor() {
        return RegSaveKeyExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static MethodHandle RegSaveKeyExW$handle() {
        return RegSaveKeyExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LSTATUS RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags)
     * }
     */
    public static int RegSaveKeyExW(MemorySegment hKey, MemorySegment lpFile, MemorySegment lpSecurityAttributes, int Flags) {
        var mh$ = RegSaveKeyExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegSaveKeyExW", hKey, lpFile, lpSecurityAttributes, Flags);
            }
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NETRESOURCEA {
     *     DWORD dwScope;
     *     DWORD dwType;
     *     DWORD dwDisplayType;
     *     DWORD dwUsage;
     *     LPSTR lpLocalName;
     *     LPSTR lpRemoteName;
     *     LPSTR lpComment;
     *     LPSTR lpProvider;
     * } *LPNETRESOURCEA
     * }
     */
    public static final AddressLayout LPNETRESOURCEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NETRESOURCEW {
     *     DWORD dwScope;
     *     DWORD dwType;
     *     DWORD dwDisplayType;
     *     DWORD dwUsage;
     *     LPWSTR lpLocalName;
     *     LPWSTR lpRemoteName;
     *     LPWSTR lpComment;
     *     LPWSTR lpProvider;
     * } *LPNETRESOURCEW
     * }
     */
    public static final AddressLayout LPNETRESOURCEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPNETRESOURCEA LPNETRESOURCE
     * }
     */
    public static final AddressLayout LPNETRESOURCE = C_POINTER;

    private static class WNetAddConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnectionA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnectionA(LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName)
     * }
     */
    public static FunctionDescriptor WNetAddConnectionA$descriptor() {
        return WNetAddConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnectionA(LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName)
     * }
     */
    public static MethodHandle WNetAddConnectionA$handle() {
        return WNetAddConnectionA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnectionA(LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName)
     * }
     */
    public static int WNetAddConnectionA(MemorySegment lpRemoteName, MemorySegment lpPassword, MemorySegment lpLocalName) {
        var mh$ = WNetAddConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnectionA", lpRemoteName, lpPassword, lpLocalName);
            }
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnectionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnectionW(LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName)
     * }
     */
    public static FunctionDescriptor WNetAddConnectionW$descriptor() {
        return WNetAddConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnectionW(LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName)
     * }
     */
    public static MethodHandle WNetAddConnectionW$handle() {
        return WNetAddConnectionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnectionW(LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName)
     * }
     */
    public static int WNetAddConnectionW(MemorySegment lpRemoteName, MemorySegment lpPassword, MemorySegment lpLocalName) {
        var mh$ = WNetAddConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnectionW", lpRemoteName, lpPassword, lpLocalName);
            }
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection2A(LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor WNetAddConnection2A$descriptor() {
        return WNetAddConnection2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection2A(LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static MethodHandle WNetAddConnection2A$handle() {
        return WNetAddConnection2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection2A(LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static int WNetAddConnection2A(MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserName, int dwFlags) {
        var mh$ = WNetAddConnection2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection2A", lpNetResource, lpPassword, lpUserName, dwFlags);
            }
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor WNetAddConnection2W$descriptor() {
        return WNetAddConnection2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static MethodHandle WNetAddConnection2W$handle() {
        return WNetAddConnection2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static int WNetAddConnection2W(MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserName, int dwFlags) {
        var mh$ = WNetAddConnection2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection2W", lpNetResource, lpPassword, lpUserName, dwFlags);
            }
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection3A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection3A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection3A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor WNetAddConnection3A$descriptor() {
        return WNetAddConnection3A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection3A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static MethodHandle WNetAddConnection3A$handle() {
        return WNetAddConnection3A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection3A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static int WNetAddConnection3A(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserName, int dwFlags) {
        var mh$ = WNetAddConnection3A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection3A", hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection3W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection3W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection3W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor WNetAddConnection3W$descriptor() {
        return WNetAddConnection3W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection3W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static MethodHandle WNetAddConnection3W$handle() {
        return WNetAddConnection3W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection3W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags)
     * }
     */
    public static int WNetAddConnection3W(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserName, int dwFlags) {
        var mh$ = WNetAddConnection3W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection3W", hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection4A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection4A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static FunctionDescriptor WNetAddConnection4A$descriptor() {
        return WNetAddConnection4A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static MethodHandle WNetAddConnection4A$handle() {
        return WNetAddConnection4A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static int WNetAddConnection4A(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment pAuthBuffer, int cbAuthBuffer, int dwFlags, MemorySegment lpUseOptions, int cbUseOptions) {
        var mh$ = WNetAddConnection4A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection4A", hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetAddConnection4W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetAddConnection4W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static FunctionDescriptor WNetAddConnection4W$descriptor() {
        return WNetAddConnection4W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetAddConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static MethodHandle WNetAddConnection4W$handle() {
        return WNetAddConnection4W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetAddConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions)
     * }
     */
    public static int WNetAddConnection4W(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment pAuthBuffer, int cbAuthBuffer, int dwFlags, MemorySegment lpUseOptions, int cbUseOptions) {
        var mh$ = WNetAddConnection4W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetAddConnection4W", hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetCancelConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetCancelConnectionA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionA(LPCSTR lpName, BOOL fForce)
     * }
     */
    public static FunctionDescriptor WNetCancelConnectionA$descriptor() {
        return WNetCancelConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionA(LPCSTR lpName, BOOL fForce)
     * }
     */
    public static MethodHandle WNetCancelConnectionA$handle() {
        return WNetCancelConnectionA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionA(LPCSTR lpName, BOOL fForce)
     * }
     */
    public static int WNetCancelConnectionA(MemorySegment lpName, int fForce) {
        var mh$ = WNetCancelConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetCancelConnectionA", lpName, fForce);
            }
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetCancelConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetCancelConnectionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionW(LPCWSTR lpName, BOOL fForce)
     * }
     */
    public static FunctionDescriptor WNetCancelConnectionW$descriptor() {
        return WNetCancelConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionW(LPCWSTR lpName, BOOL fForce)
     * }
     */
    public static MethodHandle WNetCancelConnectionW$handle() {
        return WNetCancelConnectionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetCancelConnectionW(LPCWSTR lpName, BOOL fForce)
     * }
     */
    public static int WNetCancelConnectionW(MemorySegment lpName, int fForce) {
        var mh$ = WNetCancelConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetCancelConnectionW", lpName, fForce);
            }
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetCancelConnection2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetCancelConnection2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2A(LPCSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static FunctionDescriptor WNetCancelConnection2A$descriptor() {
        return WNetCancelConnection2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2A(LPCSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static MethodHandle WNetCancelConnection2A$handle() {
        return WNetCancelConnection2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2A(LPCSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static int WNetCancelConnection2A(MemorySegment lpName, int dwFlags, int fForce) {
        var mh$ = WNetCancelConnection2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetCancelConnection2A", lpName, dwFlags, fForce);
            }
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetCancelConnection2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetCancelConnection2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static FunctionDescriptor WNetCancelConnection2W$descriptor() {
        return WNetCancelConnection2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static MethodHandle WNetCancelConnection2W$handle() {
        return WNetCancelConnection2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, BOOL fForce)
     * }
     */
    public static int WNetCancelConnection2W(MemorySegment lpName, int dwFlags, int fForce) {
        var mh$ = WNetCancelConnection2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetCancelConnection2W", lpName, dwFlags, fForce);
            }
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetConnectionA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetConnectionA(LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static FunctionDescriptor WNetGetConnectionA$descriptor() {
        return WNetGetConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetConnectionA(LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static MethodHandle WNetGetConnectionA$handle() {
        return WNetGetConnectionA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetConnectionA(LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static int WNetGetConnectionA(MemorySegment lpLocalName, MemorySegment lpRemoteName, MemorySegment lpnLength) {
        var mh$ = WNetGetConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetConnectionA", lpLocalName, lpRemoteName, lpnLength);
            }
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetConnectionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static FunctionDescriptor WNetGetConnectionW$descriptor() {
        return WNetGetConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static MethodHandle WNetGetConnectionW$handle() {
        return WNetGetConnectionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength)
     * }
     */
    public static int WNetGetConnectionW(MemorySegment lpLocalName, MemorySegment lpRemoteName, MemorySegment lpnLength) {
        var mh$ = WNetGetConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetConnectionW", lpLocalName, lpRemoteName, lpnLength);
            }
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetRestoreSingleConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetRestoreSingleConnectionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetRestoreSingleConnectionW(HWND hwndParent, LPCWSTR lpDevice, BOOL fUseUI)
     * }
     */
    public static FunctionDescriptor WNetRestoreSingleConnectionW$descriptor() {
        return WNetRestoreSingleConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetRestoreSingleConnectionW(HWND hwndParent, LPCWSTR lpDevice, BOOL fUseUI)
     * }
     */
    public static MethodHandle WNetRestoreSingleConnectionW$handle() {
        return WNetRestoreSingleConnectionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetRestoreSingleConnectionW(HWND hwndParent, LPCWSTR lpDevice, BOOL fUseUI)
     * }
     */
    public static int WNetRestoreSingleConnectionW(MemorySegment hwndParent, MemorySegment lpDevice, int fUseUI) {
        var mh$ = WNetRestoreSingleConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetRestoreSingleConnectionW", hwndParent, lpDevice, fUseUI);
            }
            return (int)mh$.invokeExact(hwndParent, lpDevice, fUseUI);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetUseConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetUseConnectionA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetUseConnectionA(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static FunctionDescriptor WNetUseConnectionA$descriptor() {
        return WNetUseConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetUseConnectionA(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static MethodHandle WNetUseConnectionA$handle() {
        return WNetUseConnectionA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetUseConnectionA(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static int WNetUseConnectionA(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserId, int dwFlags, MemorySegment lpAccessName, MemorySegment lpBufferSize, MemorySegment lpResult) {
        var mh$ = WNetUseConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetUseConnectionA", hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetUseConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetUseConnectionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetUseConnectionW(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static FunctionDescriptor WNetUseConnectionW$descriptor() {
        return WNetUseConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetUseConnectionW(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static MethodHandle WNetUseConnectionW$handle() {
        return WNetUseConnectionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetUseConnectionW(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static int WNetUseConnectionW(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment lpPassword, MemorySegment lpUserId, int dwFlags, MemorySegment lpAccessName, MemorySegment lpBufferSize, MemorySegment lpResult) {
        var mh$ = WNetUseConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetUseConnectionW", hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetUseConnection4A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetUseConnection4A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetUseConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static FunctionDescriptor WNetUseConnection4A$descriptor() {
        return WNetUseConnection4A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetUseConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static MethodHandle WNetUseConnection4A$handle() {
        return WNetUseConnection4A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetUseConnection4A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static int WNetUseConnection4A(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment pAuthBuffer, int cbAuthBuffer, int dwFlags, MemorySegment lpUseOptions, int cbUseOptions, MemorySegment lpAccessName, MemorySegment lpBufferSize, MemorySegment lpResult) {
        var mh$ = WNetUseConnection4A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetUseConnection4A", hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetUseConnection4W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetUseConnection4W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetUseConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static FunctionDescriptor WNetUseConnection4W$descriptor() {
        return WNetUseConnection4W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetUseConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static MethodHandle WNetUseConnection4W$handle() {
        return WNetUseConnection4W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetUseConnection4W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, PVOID pAuthBuffer, DWORD cbAuthBuffer, DWORD dwFlags, PBYTE lpUseOptions, DWORD cbUseOptions, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult)
     * }
     */
    public static int WNetUseConnection4W(MemorySegment hwndOwner, MemorySegment lpNetResource, MemorySegment pAuthBuffer, int cbAuthBuffer, int dwFlags, MemorySegment lpUseOptions, int cbUseOptions, MemorySegment lpAccessName, MemorySegment lpBufferSize, MemorySegment lpResult) {
        var mh$ = WNetUseConnection4W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetUseConnection4W", hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
            }
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetConnectionDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetConnectionDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static FunctionDescriptor WNetConnectionDialog$descriptor() {
        return WNetConnectionDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static MethodHandle WNetConnectionDialog$handle() {
        return WNetConnectionDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static int WNetConnectionDialog(MemorySegment hwnd, int dwType) {
        var mh$ = WNetConnectionDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetConnectionDialog", hwnd, dwType);
            }
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetDisconnectDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetDisconnectDialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static FunctionDescriptor WNetDisconnectDialog$descriptor() {
        return WNetDisconnectDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static MethodHandle WNetDisconnectDialog$handle() {
        return WNetDisconnectDialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog(HWND hwnd, DWORD dwType)
     * }
     */
    public static int WNetDisconnectDialog(MemorySegment hwnd, int dwType) {
        var mh$ = WNetDisconnectDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetDisconnectDialog", hwnd, dwType);
            }
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CONNECTDLGSTRUCTA {
     *     DWORD cbStructure;
     *     HWND hwndOwner;
     *     LPNETRESOURCEA lpConnRes;
     *     DWORD dwFlags;
     *     DWORD dwDevNum;
     * } *LPCONNECTDLGSTRUCTA
     * }
     */
    public static final AddressLayout LPCONNECTDLGSTRUCTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONNECTDLGSTRUCTW {
     *     DWORD cbStructure;
     *     HWND hwndOwner;
     *     LPNETRESOURCEW lpConnRes;
     *     DWORD dwFlags;
     *     DWORD dwDevNum;
     * } *LPCONNECTDLGSTRUCTW
     * }
     */
    public static final AddressLayout LPCONNECTDLGSTRUCTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT
     * }
     */
    public static final AddressLayout LPCONNECTDLGSTRUCT = C_POINTER;

    private static class WNetConnectionDialog1A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetConnectionDialog1A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static FunctionDescriptor WNetConnectionDialog1A$descriptor() {
        return WNetConnectionDialog1A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static MethodHandle WNetConnectionDialog1A$handle() {
        return WNetConnectionDialog1A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static int WNetConnectionDialog1A(MemorySegment lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetConnectionDialog1A", lpConnDlgStruct);
            }
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetConnectionDialog1W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetConnectionDialog1W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static FunctionDescriptor WNetConnectionDialog1W$descriptor() {
        return WNetConnectionDialog1W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static MethodHandle WNetConnectionDialog1W$handle() {
        return WNetConnectionDialog1W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static int WNetConnectionDialog1W(MemorySegment lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetConnectionDialog1W", lpConnDlgStruct);
            }
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DISCDLGSTRUCTA {
     *     DWORD cbStructure;
     *     HWND hwndOwner;
     *     LPSTR lpLocalName;
     *     LPSTR lpRemoteName;
     *     DWORD dwFlags;
     * } *LPDISCDLGSTRUCTA
     * }
     */
    public static final AddressLayout LPDISCDLGSTRUCTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISCDLGSTRUCTW {
     *     DWORD cbStructure;
     *     HWND hwndOwner;
     *     LPWSTR lpLocalName;
     *     LPWSTR lpRemoteName;
     *     DWORD dwFlags;
     * } *LPDISCDLGSTRUCTW
     * }
     */
    public static final AddressLayout LPDISCDLGSTRUCTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT
     * }
     */
    public static final AddressLayout LPDISCDLGSTRUCT = C_POINTER;

    private static class WNetDisconnectDialog1A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetDisconnectDialog1A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static FunctionDescriptor WNetDisconnectDialog1A$descriptor() {
        return WNetDisconnectDialog1A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static MethodHandle WNetDisconnectDialog1A$handle() {
        return WNetDisconnectDialog1A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct)
     * }
     */
    public static int WNetDisconnectDialog1A(MemorySegment lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetDisconnectDialog1A", lpConnDlgStruct);
            }
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetDisconnectDialog1W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetDisconnectDialog1W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static FunctionDescriptor WNetDisconnectDialog1W$descriptor() {
        return WNetDisconnectDialog1W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static MethodHandle WNetDisconnectDialog1W$handle() {
        return WNetDisconnectDialog1W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct)
     * }
     */
    public static int WNetDisconnectDialog1W(MemorySegment lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetDisconnectDialog1W", lpConnDlgStruct);
            }
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetOpenEnumA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetOpenEnumA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetOpenEnumA(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static FunctionDescriptor WNetOpenEnumA$descriptor() {
        return WNetOpenEnumA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetOpenEnumA(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static MethodHandle WNetOpenEnumA$handle() {
        return WNetOpenEnumA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetOpenEnumA(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static int WNetOpenEnumA(int dwScope, int dwType, int dwUsage, MemorySegment lpNetResource, MemorySegment lphEnum) {
        var mh$ = WNetOpenEnumA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetOpenEnumA", dwScope, dwType, dwUsage, lpNetResource, lphEnum);
            }
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetOpenEnumW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetOpenEnumW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static FunctionDescriptor WNetOpenEnumW$descriptor() {
        return WNetOpenEnumW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static MethodHandle WNetOpenEnumW$handle() {
        return WNetOpenEnumW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum)
     * }
     */
    public static int WNetOpenEnumW(int dwScope, int dwType, int dwUsage, MemorySegment lpNetResource, MemorySegment lphEnum) {
        var mh$ = WNetOpenEnumW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetOpenEnumW", dwScope, dwType, dwUsage, lpNetResource, lphEnum);
            }
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetEnumResourceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetEnumResourceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetEnumResourceA(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetEnumResourceA$descriptor() {
        return WNetEnumResourceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetEnumResourceA(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetEnumResourceA$handle() {
        return WNetEnumResourceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetEnumResourceA(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetEnumResourceA(MemorySegment hEnum, MemorySegment lpcCount, MemorySegment lpBuffer, MemorySegment lpBufferSize) {
        var mh$ = WNetEnumResourceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetEnumResourceA", hEnum, lpcCount, lpBuffer, lpBufferSize);
            }
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetEnumResourceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetEnumResourceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetEnumResourceW$descriptor() {
        return WNetEnumResourceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetEnumResourceW$handle() {
        return WNetEnumResourceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetEnumResourceW(MemorySegment hEnum, MemorySegment lpcCount, MemorySegment lpBuffer, MemorySegment lpBufferSize) {
        var mh$ = WNetEnumResourceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetEnumResourceW", hEnum, lpcCount, lpBuffer, lpBufferSize);
            }
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetCloseEnum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetCloseEnum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetCloseEnum(HANDLE hEnum)
     * }
     */
    public static FunctionDescriptor WNetCloseEnum$descriptor() {
        return WNetCloseEnum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetCloseEnum(HANDLE hEnum)
     * }
     */
    public static MethodHandle WNetCloseEnum$handle() {
        return WNetCloseEnum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetCloseEnum(HANDLE hEnum)
     * }
     */
    public static int WNetCloseEnum(MemorySegment hEnum) {
        var mh$ = WNetCloseEnum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetCloseEnum", hEnum);
            }
            return (int)mh$.invokeExact(hEnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetResourceParentA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetResourceParentA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static FunctionDescriptor WNetGetResourceParentA$descriptor() {
        return WNetGetResourceParentA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static MethodHandle WNetGetResourceParentA$handle() {
        return WNetGetResourceParentA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static int WNetGetResourceParentA(MemorySegment lpNetResource, MemorySegment lpBuffer, MemorySegment lpcbBuffer) {
        var mh$ = WNetGetResourceParentA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetResourceParentA", lpNetResource, lpBuffer, lpcbBuffer);
            }
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetResourceParentW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetResourceParentW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static FunctionDescriptor WNetGetResourceParentW$descriptor() {
        return WNetGetResourceParentW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static MethodHandle WNetGetResourceParentW$handle() {
        return WNetGetResourceParentW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetResourceParentW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer)
     * }
     */
    public static int WNetGetResourceParentW(MemorySegment lpNetResource, MemorySegment lpBuffer, MemorySegment lpcbBuffer) {
        var mh$ = WNetGetResourceParentW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetResourceParentW", lpNetResource, lpBuffer, lpcbBuffer);
            }
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetResourceInformationA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetResourceInformationA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem)
     * }
     */
    public static FunctionDescriptor WNetGetResourceInformationA$descriptor() {
        return WNetGetResourceInformationA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem)
     * }
     */
    public static MethodHandle WNetGetResourceInformationA$handle() {
        return WNetGetResourceInformationA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem)
     * }
     */
    public static int WNetGetResourceInformationA(MemorySegment lpNetResource, MemorySegment lpBuffer, MemorySegment lpcbBuffer, MemorySegment lplpSystem) {
        var mh$ = WNetGetResourceInformationA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetResourceInformationA", lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
            }
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetResourceInformationW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetResourceInformationW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem)
     * }
     */
    public static FunctionDescriptor WNetGetResourceInformationW$descriptor() {
        return WNetGetResourceInformationW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem)
     * }
     */
    public static MethodHandle WNetGetResourceInformationW$handle() {
        return WNetGetResourceInformationW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem)
     * }
     */
    public static int WNetGetResourceInformationW(MemorySegment lpNetResource, MemorySegment lpBuffer, MemorySegment lpcbBuffer, MemorySegment lplpSystem) {
        var mh$ = WNetGetResourceInformationW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetResourceInformationW", lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
            }
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _UNIVERSAL_NAME_INFOA {
     *     LPSTR lpUniversalName;
     * } *LPUNIVERSAL_NAME_INFOA
     * }
     */
    public static final AddressLayout LPUNIVERSAL_NAME_INFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _UNIVERSAL_NAME_INFOW {
     *     LPWSTR lpUniversalName;
     * } *LPUNIVERSAL_NAME_INFOW
     * }
     */
    public static final AddressLayout LPUNIVERSAL_NAME_INFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO
     * }
     */
    public static final AddressLayout LPUNIVERSAL_NAME_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMOTE_NAME_INFOA {
     *     LPSTR lpUniversalName;
     *     LPSTR lpConnectionName;
     *     LPSTR lpRemainingPath;
     * } *LPREMOTE_NAME_INFOA
     * }
     */
    public static final AddressLayout LPREMOTE_NAME_INFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMOTE_NAME_INFOW {
     *     LPWSTR lpUniversalName;
     *     LPWSTR lpConnectionName;
     *     LPWSTR lpRemainingPath;
     * } *LPREMOTE_NAME_INFOW
     * }
     */
    public static final AddressLayout LPREMOTE_NAME_INFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO
     * }
     */
    public static final AddressLayout LPREMOTE_NAME_INFO = C_POINTER;

    private static class WNetGetUniversalNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetUniversalNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameA(LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetGetUniversalNameA$descriptor() {
        return WNetGetUniversalNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameA(LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetGetUniversalNameA$handle() {
        return WNetGetUniversalNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameA(LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetGetUniversalNameA(MemorySegment lpLocalPath, int dwInfoLevel, MemorySegment lpBuffer, MemorySegment lpBufferSize) {
        var mh$ = WNetGetUniversalNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetUniversalNameA", lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
            }
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetUniversalNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetUniversalNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameW(LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetGetUniversalNameW$descriptor() {
        return WNetGetUniversalNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameW(LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetGetUniversalNameW$handle() {
        return WNetGetUniversalNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetUniversalNameW(LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetGetUniversalNameW(MemorySegment lpLocalPath, int dwInfoLevel, MemorySegment lpBuffer, MemorySegment lpBufferSize) {
        var mh$ = WNetGetUniversalNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetUniversalNameW", lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
            }
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetUserA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetUserA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetUserA(LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static FunctionDescriptor WNetGetUserA$descriptor() {
        return WNetGetUserA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetUserA(LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static MethodHandle WNetGetUserA$handle() {
        return WNetGetUserA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetUserA(LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static int WNetGetUserA(MemorySegment lpName, MemorySegment lpUserName, MemorySegment lpnLength) {
        var mh$ = WNetGetUserA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetUserA", lpName, lpUserName, lpnLength);
            }
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetUserW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetUserW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static FunctionDescriptor WNetGetUserW$descriptor() {
        return WNetGetUserW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static MethodHandle WNetGetUserW$handle() {
        return WNetGetUserW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength)
     * }
     */
    public static int WNetGetUserW(MemorySegment lpName, MemorySegment lpUserName, MemorySegment lpnLength) {
        var mh$ = WNetGetUserW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetUserW", lpName, lpUserName, lpnLength);
            }
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetProviderNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameA(DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetGetProviderNameA$descriptor() {
        return WNetGetProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameA(DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetGetProviderNameA$handle() {
        return WNetGetProviderNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameA(DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetGetProviderNameA(int dwNetType, MemorySegment lpProviderName, MemorySegment lpBufferSize) {
        var mh$ = WNetGetProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetProviderNameA", dwNetType, lpProviderName, lpBufferSize);
            }
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetProviderNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameW(DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static FunctionDescriptor WNetGetProviderNameW$descriptor() {
        return WNetGetProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameW(DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static MethodHandle WNetGetProviderNameW$handle() {
        return WNetGetProviderNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetProviderNameW(DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize)
     * }
     */
    public static int WNetGetProviderNameW(int dwNetType, MemorySegment lpProviderName, MemorySegment lpBufferSize) {
        var mh$ = WNetGetProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetProviderNameW", dwNetType, lpProviderName, lpBufferSize);
            }
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NETINFOSTRUCT {
     *     DWORD cbStructure;
     *     DWORD dwProviderVersion;
     *     DWORD dwStatus;
     *     DWORD dwCharacteristics;
     *     ULONG_PTR dwHandle;
     *     WORD wNetType;
     *     DWORD dwPrinters;
     *     DWORD dwDrives;
     * } *LPNETINFOSTRUCT
     * }
     */
    public static final AddressLayout LPNETINFOSTRUCT = C_POINTER;

    private static class WNetGetNetworkInformationA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetNetworkInformationA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationA(LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static FunctionDescriptor WNetGetNetworkInformationA$descriptor() {
        return WNetGetNetworkInformationA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationA(LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static MethodHandle WNetGetNetworkInformationA$handle() {
        return WNetGetNetworkInformationA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationA(LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static int WNetGetNetworkInformationA(MemorySegment lpProvider, MemorySegment lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetNetworkInformationA", lpProvider, lpNetInfoStruct);
            }
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetNetworkInformationW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetNetworkInformationW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static FunctionDescriptor WNetGetNetworkInformationW$descriptor() {
        return WNetGetNetworkInformationW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static MethodHandle WNetGetNetworkInformationW$handle() {
        return WNetGetNetworkInformationW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct)
     * }
     */
    public static int WNetGetNetworkInformationW(MemorySegment lpProvider, MemorySegment lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetNetworkInformationW", lpProvider, lpNetInfoStruct);
            }
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetLastErrorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetLastErrorA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorA(LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static FunctionDescriptor WNetGetLastErrorA$descriptor() {
        return WNetGetLastErrorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorA(LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static MethodHandle WNetGetLastErrorA$handle() {
        return WNetGetLastErrorA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorA(LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static int WNetGetLastErrorA(MemorySegment lpError, MemorySegment lpErrorBuf, int nErrorBufSize, MemorySegment lpNameBuf, int nNameBufSize) {
        var mh$ = WNetGetLastErrorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetLastErrorA", lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
            }
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WNetGetLastErrorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WNetGetLastErrorW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorW(LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static FunctionDescriptor WNetGetLastErrorW$descriptor() {
        return WNetGetLastErrorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorW(LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static MethodHandle WNetGetLastErrorW$handle() {
        return WNetGetLastErrorW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WNetGetLastErrorW(LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize)
     * }
     */
    public static int WNetGetLastErrorW(MemorySegment lpError, MemorySegment lpErrorBuf, int nErrorBufSize, MemorySegment lpNameBuf, int nNameBufSize) {
        var mh$ = WNetGetLastErrorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WNetGetLastErrorW", lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
            }
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NETCONNECTINFOSTRUCT {
     *     DWORD cbStructure;
     *     DWORD dwFlags;
     *     DWORD dwSpeed;
     *     DWORD dwDelay;
     *     DWORD dwOptDataSize;
     * } *LPNETCONNECTINFOSTRUCT
     * }
     */
    public static final AddressLayout LPNETCONNECTINFOSTRUCT = C_POINTER;

    private static class MultinetGetConnectionPerformanceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("MultinetGetConnectionPerformanceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static FunctionDescriptor MultinetGetConnectionPerformanceA$descriptor() {
        return MultinetGetConnectionPerformanceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static MethodHandle MultinetGetConnectionPerformanceA$handle() {
        return MultinetGetConnectionPerformanceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static int MultinetGetConnectionPerformanceA(MemorySegment lpNetResource, MemorySegment lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MultinetGetConnectionPerformanceA", lpNetResource, lpNetConnectInfoStruct);
            }
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MultinetGetConnectionPerformanceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("MultinetGetConnectionPerformanceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static FunctionDescriptor MultinetGetConnectionPerformanceW$descriptor() {
        return MultinetGetConnectionPerformanceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static MethodHandle MultinetGetConnectionPerformanceW$handle() {
        return MultinetGetConnectionPerformanceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct)
     * }
     */
    public static int MultinetGetConnectionPerformanceW(MemorySegment lpNetResource, MemorySegment lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MultinetGetConnectionPerformanceW", lpNetResource, lpNetConnectInfoStruct);
            }
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeSetQualityOfService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeSetQualityOfService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeSetQualityOfService(HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE *pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev)
     * }
     */
    public static FunctionDescriptor DdeSetQualityOfService$descriptor() {
        return DdeSetQualityOfService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeSetQualityOfService(HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE *pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev)
     * }
     */
    public static MethodHandle DdeSetQualityOfService$handle() {
        return DdeSetQualityOfService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeSetQualityOfService(HWND hwndClient, const SECURITY_QUALITY_OF_SERVICE *pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev)
     * }
     */
    public static int DdeSetQualityOfService(MemorySegment hwndClient, MemorySegment pqosNew, MemorySegment pqosPrev) {
        var mh$ = DdeSetQualityOfService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeSetQualityOfService", hwndClient, pqosNew, pqosPrev);
            }
            return (int)mh$.invokeExact(hwndClient, pqosNew, pqosPrev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImpersonateDdeClientWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImpersonateDdeClientWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImpersonateDdeClientWindow(HWND hWndClient, HWND hWndServer)
     * }
     */
    public static FunctionDescriptor ImpersonateDdeClientWindow$descriptor() {
        return ImpersonateDdeClientWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImpersonateDdeClientWindow(HWND hWndClient, HWND hWndServer)
     * }
     */
    public static MethodHandle ImpersonateDdeClientWindow$handle() {
        return ImpersonateDdeClientWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImpersonateDdeClientWindow(HWND hWndClient, HWND hWndServer)
     * }
     */
    public static int ImpersonateDdeClientWindow(MemorySegment hWndClient, MemorySegment hWndServer) {
        var mh$ = ImpersonateDdeClientWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImpersonateDdeClientWindow", hWndClient, hWndServer);
            }
            return (int)mh$.invokeExact(hWndClient, hWndServer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PackDDElParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PackDDElParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPARAM PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static FunctionDescriptor PackDDElParam$descriptor() {
        return PackDDElParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPARAM PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static MethodHandle PackDDElParam$handle() {
        return PackDDElParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPARAM PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static long PackDDElParam(int msg, long uiLo, long uiHi) {
        var mh$ = PackDDElParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PackDDElParam", msg, uiLo, uiHi);
            }
            return (long)mh$.invokeExact(msg, uiLo, uiHi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnpackDDElParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UnpackDDElParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi)
     * }
     */
    public static FunctionDescriptor UnpackDDElParam$descriptor() {
        return UnpackDDElParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi)
     * }
     */
    public static MethodHandle UnpackDDElParam$handle() {
        return UnpackDDElParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi)
     * }
     */
    public static int UnpackDDElParam(int msg, long lParam, MemorySegment puiLo, MemorySegment puiHi) {
        var mh$ = UnpackDDElParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnpackDDElParam", msg, lParam, puiLo, puiHi);
            }
            return (int)mh$.invokeExact(msg, lParam, puiLo, puiHi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreeDDElParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FreeDDElParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FreeDDElParam(UINT msg, LPARAM lParam)
     * }
     */
    public static FunctionDescriptor FreeDDElParam$descriptor() {
        return FreeDDElParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FreeDDElParam(UINT msg, LPARAM lParam)
     * }
     */
    public static MethodHandle FreeDDElParam$handle() {
        return FreeDDElParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL FreeDDElParam(UINT msg, LPARAM lParam)
     * }
     */
    public static int FreeDDElParam(int msg, long lParam) {
        var mh$ = FreeDDElParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreeDDElParam", msg, lParam);
            }
            return (int)mh$.invokeExact(msg, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReuseDDElParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_LONG_LONG,
            C_INT,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReuseDDElParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPARAM ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static FunctionDescriptor ReuseDDElParam$descriptor() {
        return ReuseDDElParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPARAM ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static MethodHandle ReuseDDElParam$handle() {
        return ReuseDDElParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPARAM ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi)
     * }
     */
    public static long ReuseDDElParam(long lParam, int msgIn, int msgOut, long uiLo, long uiHi) {
        var mh$ = ReuseDDElParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReuseDDElParam", lParam, msgIn, msgOut, uiLo, uiHi);
            }
            return (long)mh$.invokeExact(lParam, msgIn, msgOut, uiLo, uiHi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HCONVLIST__ {
     *     int unused;
     * } *HCONVLIST
     * }
     */
    public static final AddressLayout HCONVLIST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HCONV__ {
     *     int unused;
     * } *HCONV
     * }
     */
    public static final AddressLayout HCONV = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HSZ__ {
     *     int unused;
     * } *HSZ
     * }
     */
    public static final AddressLayout HSZ = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HDDEDATA__ {
     *     int unused;
     * } *HDDEDATA
     * }
     */
    public static final AddressLayout HDDEDATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagHSZPAIR {
     *     HSZ hszSvc;
     *     HSZ hszTopic;
     * } *PHSZPAIR
     * }
     */
    public static final AddressLayout PHSZPAIR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCONVCONTEXT {
     *     UINT cb;
     *     UINT wFlags;
     *     UINT wCountryID;
     *     int iCodePage;
     *     DWORD dwLangID;
     *     DWORD dwSecurity;
     *     SECURITY_QUALITY_OF_SERVICE qos;
     * } *PCONVCONTEXT
     * }
     */
    public static final AddressLayout PCONVCONTEXT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCONVINFO {
     *     DWORD cb;
     *     DWORD_PTR hUser;
     *     HCONV hConvPartner;
     *     HSZ hszSvcPartner;
     *     HSZ hszServiceReq;
     *     HSZ hszTopic;
     *     HSZ hszItem;
     *     UINT wFmt;
     *     UINT wType;
     *     UINT wStatus;
     *     UINT wConvst;
     *     UINT wLastError;
     *     HCONVLIST hConvList;
     *     CONVCONTEXT ConvCtxt;
     *     HWND hwnd;
     *     HWND hwndPartner;
     * } *PCONVINFO
     * }
     */
    public static final AddressLayout PCONVINFO = C_POINTER;

    private static class DdeInitializeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeInitializeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static FunctionDescriptor DdeInitializeA$descriptor() {
        return DdeInitializeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static MethodHandle DdeInitializeA$handle() {
        return DdeInitializeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static int DdeInitializeA(MemorySegment pidInst, MemorySegment pfnCallback, int afCmd, int ulRes) {
        var mh$ = DdeInitializeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeInitializeA", pidInst, pfnCallback, afCmd, ulRes);
            }
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeInitializeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeInitializeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static FunctionDescriptor DdeInitializeW$descriptor() {
        return DdeInitializeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static MethodHandle DdeInitializeW$handle() {
        return DdeInitializeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes)
     * }
     */
    public static int DdeInitializeW(MemorySegment pidInst, MemorySegment pfnCallback, int afCmd, int ulRes) {
        var mh$ = DdeInitializeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeInitializeW", pidInst, pfnCallback, afCmd, ulRes);
            }
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeUninitialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeUninitialize(DWORD idInst)
     * }
     */
    public static FunctionDescriptor DdeUninitialize$descriptor() {
        return DdeUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeUninitialize(DWORD idInst)
     * }
     */
    public static MethodHandle DdeUninitialize$handle() {
        return DdeUninitialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeUninitialize(DWORD idInst)
     * }
     */
    public static int DdeUninitialize(int idInst) {
        var mh$ = DdeUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeUninitialize", idInst);
            }
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeConnectList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeConnectList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HCONVLIST DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC)
     * }
     */
    public static FunctionDescriptor DdeConnectList$descriptor() {
        return DdeConnectList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HCONVLIST DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC)
     * }
     */
    public static MethodHandle DdeConnectList$handle() {
        return DdeConnectList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HCONVLIST DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC)
     * }
     */
    public static MemorySegment DdeConnectList(int idInst, MemorySegment hszService, MemorySegment hszTopic, MemorySegment hConvList, MemorySegment pCC) {
        var mh$ = DdeConnectList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeConnectList", idInst, hszService, hszTopic, hConvList, pCC);
            }
            return (MemorySegment)mh$.invokeExact(idInst, hszService, hszTopic, hConvList, pCC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeQueryNextServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeQueryNextServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HCONV DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev)
     * }
     */
    public static FunctionDescriptor DdeQueryNextServer$descriptor() {
        return DdeQueryNextServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HCONV DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev)
     * }
     */
    public static MethodHandle DdeQueryNextServer$handle() {
        return DdeQueryNextServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HCONV DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev)
     * }
     */
    public static MemorySegment DdeQueryNextServer(MemorySegment hConvList, MemorySegment hConvPrev) {
        var mh$ = DdeQueryNextServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeQueryNextServer", hConvList, hConvPrev);
            }
            return (MemorySegment)mh$.invokeExact(hConvList, hConvPrev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeDisconnectList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeDisconnectList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeDisconnectList(HCONVLIST hConvList)
     * }
     */
    public static FunctionDescriptor DdeDisconnectList$descriptor() {
        return DdeDisconnectList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeDisconnectList(HCONVLIST hConvList)
     * }
     */
    public static MethodHandle DdeDisconnectList$handle() {
        return DdeDisconnectList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeDisconnectList(HCONVLIST hConvList)
     * }
     */
    public static int DdeDisconnectList(MemorySegment hConvList) {
        var mh$ = DdeDisconnectList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeDisconnectList", hConvList);
            }
            return (int)mh$.invokeExact(hConvList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeConnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeConnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HCONV DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC)
     * }
     */
    public static FunctionDescriptor DdeConnect$descriptor() {
        return DdeConnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HCONV DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC)
     * }
     */
    public static MethodHandle DdeConnect$handle() {
        return DdeConnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HCONV DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC)
     * }
     */
    public static MemorySegment DdeConnect(int idInst, MemorySegment hszService, MemorySegment hszTopic, MemorySegment pCC) {
        var mh$ = DdeConnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeConnect", idInst, hszService, hszTopic, pCC);
            }
            return (MemorySegment)mh$.invokeExact(idInst, hszService, hszTopic, pCC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeDisconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeDisconnect(HCONV hConv)
     * }
     */
    public static FunctionDescriptor DdeDisconnect$descriptor() {
        return DdeDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeDisconnect(HCONV hConv)
     * }
     */
    public static MethodHandle DdeDisconnect$handle() {
        return DdeDisconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeDisconnect(HCONV hConv)
     * }
     */
    public static int DdeDisconnect(MemorySegment hConv) {
        var mh$ = DdeDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeDisconnect", hConv);
            }
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeReconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeReconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HCONV DdeReconnect(HCONV hConv)
     * }
     */
    public static FunctionDescriptor DdeReconnect$descriptor() {
        return DdeReconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HCONV DdeReconnect(HCONV hConv)
     * }
     */
    public static MethodHandle DdeReconnect$handle() {
        return DdeReconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HCONV DdeReconnect(HCONV hConv)
     * }
     */
    public static MemorySegment DdeReconnect(MemorySegment hConv) {
        var mh$ = DdeReconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeReconnect", hConv);
            }
            return (MemorySegment)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeQueryConvInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeQueryConvInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo)
     * }
     */
    public static FunctionDescriptor DdeQueryConvInfo$descriptor() {
        return DdeQueryConvInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo)
     * }
     */
    public static MethodHandle DdeQueryConvInfo$handle() {
        return DdeQueryConvInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo)
     * }
     */
    public static int DdeQueryConvInfo(MemorySegment hConv, int idTransaction, MemorySegment pConvInfo) {
        var mh$ = DdeQueryConvInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeQueryConvInfo", hConv, idTransaction, pConvInfo);
            }
            return (int)mh$.invokeExact(hConv, idTransaction, pConvInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeSetUserHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeSetUserHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeSetUserHandle(HCONV hConv, DWORD id, DWORD_PTR hUser)
     * }
     */
    public static FunctionDescriptor DdeSetUserHandle$descriptor() {
        return DdeSetUserHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeSetUserHandle(HCONV hConv, DWORD id, DWORD_PTR hUser)
     * }
     */
    public static MethodHandle DdeSetUserHandle$handle() {
        return DdeSetUserHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeSetUserHandle(HCONV hConv, DWORD id, DWORD_PTR hUser)
     * }
     */
    public static int DdeSetUserHandle(MemorySegment hConv, int id, long hUser) {
        var mh$ = DdeSetUserHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeSetUserHandle", hConv, id, hUser);
            }
            return (int)mh$.invokeExact(hConv, id, hUser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeAbandonTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeAbandonTransaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction)
     * }
     */
    public static FunctionDescriptor DdeAbandonTransaction$descriptor() {
        return DdeAbandonTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction)
     * }
     */
    public static MethodHandle DdeAbandonTransaction$handle() {
        return DdeAbandonTransaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction)
     * }
     */
    public static int DdeAbandonTransaction(int idInst, MemorySegment hConv, int idTransaction) {
        var mh$ = DdeAbandonTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeAbandonTransaction", idInst, hConv, idTransaction);
            }
            return (int)mh$.invokeExact(idInst, hConv, idTransaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdePostAdvise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdePostAdvise"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem)
     * }
     */
    public static FunctionDescriptor DdePostAdvise$descriptor() {
        return DdePostAdvise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem)
     * }
     */
    public static MethodHandle DdePostAdvise$handle() {
        return DdePostAdvise.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem)
     * }
     */
    public static int DdePostAdvise(int idInst, MemorySegment hszTopic, MemorySegment hszItem) {
        var mh$ = DdePostAdvise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdePostAdvise", idInst, hszTopic, hszItem);
            }
            return (int)mh$.invokeExact(idInst, hszTopic, hszItem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeEnableCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeEnableCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd)
     * }
     */
    public static FunctionDescriptor DdeEnableCallback$descriptor() {
        return DdeEnableCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd)
     * }
     */
    public static MethodHandle DdeEnableCallback$handle() {
        return DdeEnableCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd)
     * }
     */
    public static int DdeEnableCallback(int idInst, MemorySegment hConv, int wCmd) {
        var mh$ = DdeEnableCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeEnableCallback", idInst, hConv, wCmd);
            }
            return (int)mh$.invokeExact(idInst, hConv, wCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeImpersonateClient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeImpersonateClient(HCONV hConv)
     * }
     */
    public static FunctionDescriptor DdeImpersonateClient$descriptor() {
        return DdeImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeImpersonateClient(HCONV hConv)
     * }
     */
    public static MethodHandle DdeImpersonateClient$handle() {
        return DdeImpersonateClient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeImpersonateClient(HCONV hConv)
     * }
     */
    public static int DdeImpersonateClient(MemorySegment hConv) {
        var mh$ = DdeImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeImpersonateClient", hConv);
            }
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeNameService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeNameService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDDEDATA DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd)
     * }
     */
    public static FunctionDescriptor DdeNameService$descriptor() {
        return DdeNameService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDDEDATA DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd)
     * }
     */
    public static MethodHandle DdeNameService$handle() {
        return DdeNameService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HDDEDATA DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd)
     * }
     */
    public static MemorySegment DdeNameService(int idInst, MemorySegment hsz1, MemorySegment hsz2, int afCmd) {
        var mh$ = DdeNameService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeNameService", idInst, hsz1, hsz2, afCmd);
            }
            return (MemorySegment)mh$.invokeExact(idInst, hsz1, hsz2, afCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeClientTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeClientTransaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDDEDATA DdeClientTransaction(LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult)
     * }
     */
    public static FunctionDescriptor DdeClientTransaction$descriptor() {
        return DdeClientTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDDEDATA DdeClientTransaction(LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult)
     * }
     */
    public static MethodHandle DdeClientTransaction$handle() {
        return DdeClientTransaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HDDEDATA DdeClientTransaction(LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult)
     * }
     */
    public static MemorySegment DdeClientTransaction(MemorySegment pData, int cbData, MemorySegment hConv, MemorySegment hszItem, int wFmt, int wType, int dwTimeout, MemorySegment pdwResult) {
        var mh$ = DdeClientTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeClientTransaction", pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult);
            }
            return (MemorySegment)mh$.invokeExact(pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeCreateDataHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeCreateDataHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDDEDATA DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd)
     * }
     */
    public static FunctionDescriptor DdeCreateDataHandle$descriptor() {
        return DdeCreateDataHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDDEDATA DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd)
     * }
     */
    public static MethodHandle DdeCreateDataHandle$handle() {
        return DdeCreateDataHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HDDEDATA DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd)
     * }
     */
    public static MemorySegment DdeCreateDataHandle(int idInst, MemorySegment pSrc, int cb, int cbOff, MemorySegment hszItem, int wFmt, int afCmd) {
        var mh$ = DdeCreateDataHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeCreateDataHandle", idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd);
            }
            return (MemorySegment)mh$.invokeExact(idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeAddData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeAddData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDDEDATA DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff)
     * }
     */
    public static FunctionDescriptor DdeAddData$descriptor() {
        return DdeAddData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDDEDATA DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff)
     * }
     */
    public static MethodHandle DdeAddData$handle() {
        return DdeAddData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HDDEDATA DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff)
     * }
     */
    public static MemorySegment DdeAddData(MemorySegment hData, MemorySegment pSrc, int cb, int cbOff) {
        var mh$ = DdeAddData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeAddData", hData, pSrc, cb, cbOff);
            }
            return (MemorySegment)mh$.invokeExact(hData, pSrc, cb, cbOff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeGetData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeGetData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff)
     * }
     */
    public static FunctionDescriptor DdeGetData$descriptor() {
        return DdeGetData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff)
     * }
     */
    public static MethodHandle DdeGetData$handle() {
        return DdeGetData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff)
     * }
     */
    public static int DdeGetData(MemorySegment hData, MemorySegment pDst, int cbMax, int cbOff) {
        var mh$ = DdeGetData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeGetData", hData, pDst, cbMax, cbOff);
            }
            return (int)mh$.invokeExact(hData, pDst, cbMax, cbOff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeAccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeAccessData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPBYTE DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize)
     * }
     */
    public static FunctionDescriptor DdeAccessData$descriptor() {
        return DdeAccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPBYTE DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize)
     * }
     */
    public static MethodHandle DdeAccessData$handle() {
        return DdeAccessData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPBYTE DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize)
     * }
     */
    public static MemorySegment DdeAccessData(MemorySegment hData, MemorySegment pcbDataSize) {
        var mh$ = DdeAccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeAccessData", hData, pcbDataSize);
            }
            return (MemorySegment)mh$.invokeExact(hData, pcbDataSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeUnaccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeUnaccessData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeUnaccessData(HDDEDATA hData)
     * }
     */
    public static FunctionDescriptor DdeUnaccessData$descriptor() {
        return DdeUnaccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeUnaccessData(HDDEDATA hData)
     * }
     */
    public static MethodHandle DdeUnaccessData$handle() {
        return DdeUnaccessData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeUnaccessData(HDDEDATA hData)
     * }
     */
    public static int DdeUnaccessData(MemorySegment hData) {
        var mh$ = DdeUnaccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeUnaccessData", hData);
            }
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeFreeDataHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeFreeDataHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeFreeDataHandle(HDDEDATA hData)
     * }
     */
    public static FunctionDescriptor DdeFreeDataHandle$descriptor() {
        return DdeFreeDataHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeFreeDataHandle(HDDEDATA hData)
     * }
     */
    public static MethodHandle DdeFreeDataHandle$handle() {
        return DdeFreeDataHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeFreeDataHandle(HDDEDATA hData)
     * }
     */
    public static int DdeFreeDataHandle(MemorySegment hData) {
        var mh$ = DdeFreeDataHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeFreeDataHandle", hData);
            }
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeGetLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeGetLastError"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT DdeGetLastError(DWORD idInst)
     * }
     */
    public static FunctionDescriptor DdeGetLastError$descriptor() {
        return DdeGetLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT DdeGetLastError(DWORD idInst)
     * }
     */
    public static MethodHandle DdeGetLastError$handle() {
        return DdeGetLastError.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT DdeGetLastError(DWORD idInst)
     * }
     */
    public static int DdeGetLastError(int idInst) {
        var mh$ = DdeGetLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeGetLastError", idInst);
            }
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeCreateStringHandleA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeCreateStringHandleA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage)
     * }
     */
    public static FunctionDescriptor DdeCreateStringHandleA$descriptor() {
        return DdeCreateStringHandleA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage)
     * }
     */
    public static MethodHandle DdeCreateStringHandleA$handle() {
        return DdeCreateStringHandleA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage)
     * }
     */
    public static MemorySegment DdeCreateStringHandleA(int idInst, MemorySegment psz, int iCodePage) {
        var mh$ = DdeCreateStringHandleA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeCreateStringHandleA", idInst, psz, iCodePage);
            }
            return (MemorySegment)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeCreateStringHandleW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeCreateStringHandleW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage)
     * }
     */
    public static FunctionDescriptor DdeCreateStringHandleW$descriptor() {
        return DdeCreateStringHandleW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage)
     * }
     */
    public static MethodHandle DdeCreateStringHandleW$handle() {
        return DdeCreateStringHandleW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HSZ DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage)
     * }
     */
    public static MemorySegment DdeCreateStringHandleW(int idInst, MemorySegment psz, int iCodePage) {
        var mh$ = DdeCreateStringHandleW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeCreateStringHandleW", idInst, psz, iCodePage);
            }
            return (MemorySegment)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeQueryStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeQueryStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static FunctionDescriptor DdeQueryStringA$descriptor() {
        return DdeQueryStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static MethodHandle DdeQueryStringA$handle() {
        return DdeQueryStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static int DdeQueryStringA(int idInst, MemorySegment hsz, MemorySegment psz, int cchMax, int iCodePage) {
        var mh$ = DdeQueryStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeQueryStringA", idInst, hsz, psz, cchMax, iCodePage);
            }
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeQueryStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeQueryStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static FunctionDescriptor DdeQueryStringW$descriptor() {
        return DdeQueryStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static MethodHandle DdeQueryStringW$handle() {
        return DdeQueryStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage)
     * }
     */
    public static int DdeQueryStringW(int idInst, MemorySegment hsz, MemorySegment psz, int cchMax, int iCodePage) {
        var mh$ = DdeQueryStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeQueryStringW", idInst, hsz, psz, cchMax, iCodePage);
            }
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeFreeStringHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeFreeStringHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeFreeStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static FunctionDescriptor DdeFreeStringHandle$descriptor() {
        return DdeFreeStringHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeFreeStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static MethodHandle DdeFreeStringHandle$handle() {
        return DdeFreeStringHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeFreeStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static int DdeFreeStringHandle(int idInst, MemorySegment hsz) {
        var mh$ = DdeFreeStringHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeFreeStringHandle", idInst, hsz);
            }
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeKeepStringHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeKeepStringHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DdeKeepStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static FunctionDescriptor DdeKeepStringHandle$descriptor() {
        return DdeKeepStringHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DdeKeepStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static MethodHandle DdeKeepStringHandle$handle() {
        return DdeKeepStringHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DdeKeepStringHandle(DWORD idInst, HSZ hsz)
     * }
     */
    public static int DdeKeepStringHandle(int idInst, MemorySegment hsz) {
        var mh$ = DdeKeepStringHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeKeepStringHandle", idInst, hsz);
            }
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DdeCmpStringHandles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DdeCmpStringHandles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int DdeCmpStringHandles(HSZ hsz1, HSZ hsz2)
     * }
     */
    public static FunctionDescriptor DdeCmpStringHandles$descriptor() {
        return DdeCmpStringHandles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int DdeCmpStringHandles(HSZ hsz1, HSZ hsz2)
     * }
     */
    public static MethodHandle DdeCmpStringHandles$handle() {
        return DdeCmpStringHandles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int DdeCmpStringHandles(HSZ hsz1, HSZ hsz2)
     * }
     */
    public static int DdeCmpStringHandles(MemorySegment hsz1, MemorySegment hsz2) {
        var mh$ = DdeCmpStringHandles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DdeCmpStringHandles", hsz1, hsz2);
            }
            return (int)mh$.invokeExact(hsz1, hsz2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagDDEML_MSG_HOOK_DATA {
     *     UINT_PTR uiLo;
     *     UINT_PTR uiHi;
     *     DWORD cbData;
     *     DWORD Data[8];
     * } *PDDEML_MSG_HOOK_DATA
     * }
     */
    public static final AddressLayout PDDEML_MSG_HOOK_DATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONMSGSTRUCT {
     *     UINT cb;
     *     HWND hwndTo;
     *     DWORD dwTime;
     *     HANDLE hTask;
     *     UINT wMsg;
     *     WPARAM wParam;
     *     LPARAM lParam;
     *     DDEML_MSG_HOOK_DATA dmhd;
     * } *PMONMSGSTRUCT
     * }
     */
    public static final AddressLayout PMONMSGSTRUCT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONCBSTRUCT {
     *     UINT cb;
     *     DWORD dwTime;
     *     HANDLE hTask;
     *     DWORD dwRet;
     *     UINT wType;
     *     UINT wFmt;
     *     HCONV hConv;
     *     HSZ hsz1;
     *     HSZ hsz2;
     *     HDDEDATA hData;
     *     ULONG_PTR dwData1;
     *     ULONG_PTR dwData2;
     *     CONVCONTEXT cc;
     *     DWORD cbData;
     *     DWORD Data[8];
     * } *PMONCBSTRUCT
     * }
     */
    public static final AddressLayout PMONCBSTRUCT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONHSZSTRUCTA {
     *     UINT cb;
     *     BOOL fsAction;
     *     DWORD dwTime;
     *     HSZ hsz;
     *     HANDLE hTask;
     *     CHAR str[1];
     * } *PMONHSZSTRUCTA
     * }
     */
    public static final AddressLayout PMONHSZSTRUCTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONHSZSTRUCTW {
     *     UINT cb;
     *     BOOL fsAction;
     *     DWORD dwTime;
     *     HSZ hsz;
     *     HANDLE hTask;
     *     WCHAR str[1];
     * } *PMONHSZSTRUCTW
     * }
     */
    public static final AddressLayout PMONHSZSTRUCTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMONHSZSTRUCTA PMONHSZSTRUCT
     * }
     */
    public static final AddressLayout PMONHSZSTRUCT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONERRSTRUCT {
     *     UINT cb;
     *     UINT wLastError;
     *     DWORD dwTime;
     *     HANDLE hTask;
     * } *PMONERRSTRUCT
     * }
     */
    public static final AddressLayout PMONERRSTRUCT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONLINKSTRUCT {
     *     UINT cb;
     *     DWORD dwTime;
     *     HANDLE hTask;
     *     BOOL fEstablished;
     *     BOOL fNoData;
     *     HSZ hszSvc;
     *     HSZ hszTopic;
     *     HSZ hszItem;
     *     UINT wFmt;
     *     BOOL fServer;
     *     HCONV hConvServer;
     *     HCONV hConvClient;
     * } *PMONLINKSTRUCT
     * }
     */
    public static final AddressLayout PMONLINKSTRUCT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMONCONVSTRUCT {
     *     UINT cb;
     *     BOOL fConnect;
     *     DWORD dwTime;
     *     HANDLE hTask;
     *     HSZ hszSvc;
     *     HSZ hszTopic;
     *     HCONV hConvClient;
     *     HCONV hConvServer;
     * } *PMONCONVSTRUCT
     * }
     */
    public static final AddressLayout PMONCONVSTRUCT = C_POINTER;

    private static class LZStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZStart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT LZStart()
     * }
     */
    public static FunctionDescriptor LZStart$descriptor() {
        return LZStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT LZStart()
     * }
     */
    public static MethodHandle LZStart$handle() {
        return LZStart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT LZStart()
     * }
     */
    public static int LZStart() {
        var mh$ = LZStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZStart");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZDone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LZDone()
     * }
     */
    public static FunctionDescriptor LZDone$descriptor() {
        return LZDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LZDone()
     * }
     */
    public static MethodHandle LZDone$handle() {
        return LZDone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void LZDone()
     * }
     */
    public static void LZDone() {
        var mh$ = LZDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZDone");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyLZFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CopyLZFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG CopyLZFile(INT hfSource, INT hfDest)
     * }
     */
    public static FunctionDescriptor CopyLZFile$descriptor() {
        return CopyLZFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG CopyLZFile(INT hfSource, INT hfDest)
     * }
     */
    public static MethodHandle CopyLZFile$handle() {
        return CopyLZFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG CopyLZFile(INT hfSource, INT hfDest)
     * }
     */
    public static int CopyLZFile(int hfSource, int hfDest) {
        var mh$ = CopyLZFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyLZFile", hfSource, hfDest);
            }
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG LZCopy(INT hfSource, INT hfDest)
     * }
     */
    public static FunctionDescriptor LZCopy$descriptor() {
        return LZCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG LZCopy(INT hfSource, INT hfDest)
     * }
     */
    public static MethodHandle LZCopy$handle() {
        return LZCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG LZCopy(INT hfSource, INT hfDest)
     * }
     */
    public static int LZCopy(int hfSource, int hfDest) {
        var mh$ = LZCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZCopy", hfSource, hfDest);
            }
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZInit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT LZInit(INT hfSource)
     * }
     */
    public static FunctionDescriptor LZInit$descriptor() {
        return LZInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT LZInit(INT hfSource)
     * }
     */
    public static MethodHandle LZInit$handle() {
        return LZInit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT LZInit(INT hfSource)
     * }
     */
    public static int LZInit(int hfSource) {
        var mh$ = LZInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZInit", hfSource);
            }
            return (int)mh$.invokeExact(hfSource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetExpandedNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetExpandedNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT GetExpandedNameA(LPSTR lpszSource, LPSTR lpszBuffer)
     * }
     */
    public static FunctionDescriptor GetExpandedNameA$descriptor() {
        return GetExpandedNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT GetExpandedNameA(LPSTR lpszSource, LPSTR lpszBuffer)
     * }
     */
    public static MethodHandle GetExpandedNameA$handle() {
        return GetExpandedNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT GetExpandedNameA(LPSTR lpszSource, LPSTR lpszBuffer)
     * }
     */
    public static int GetExpandedNameA(MemorySegment lpszSource, MemorySegment lpszBuffer) {
        var mh$ = GetExpandedNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetExpandedNameA", lpszSource, lpszBuffer);
            }
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetExpandedNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetExpandedNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT GetExpandedNameW(LPWSTR lpszSource, LPWSTR lpszBuffer)
     * }
     */
    public static FunctionDescriptor GetExpandedNameW$descriptor() {
        return GetExpandedNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT GetExpandedNameW(LPWSTR lpszSource, LPWSTR lpszBuffer)
     * }
     */
    public static MethodHandle GetExpandedNameW$handle() {
        return GetExpandedNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT GetExpandedNameW(LPWSTR lpszSource, LPWSTR lpszBuffer)
     * }
     */
    public static int GetExpandedNameW(MemorySegment lpszSource, MemorySegment lpszBuffer) {
        var mh$ = GetExpandedNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetExpandedNameW", lpszSource, lpszBuffer);
            }
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZOpenFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZOpenFileA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT LZOpenFileA(LPSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static FunctionDescriptor LZOpenFileA$descriptor() {
        return LZOpenFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT LZOpenFileA(LPSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static MethodHandle LZOpenFileA$handle() {
        return LZOpenFileA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT LZOpenFileA(LPSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static int LZOpenFileA(MemorySegment lpFileName, MemorySegment lpReOpenBuf, short wStyle) {
        var mh$ = LZOpenFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZOpenFileA", lpFileName, lpReOpenBuf, wStyle);
            }
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZOpenFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZOpenFileW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT LZOpenFileW(LPWSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static FunctionDescriptor LZOpenFileW$descriptor() {
        return LZOpenFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT LZOpenFileW(LPWSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static MethodHandle LZOpenFileW$handle() {
        return LZOpenFileW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT LZOpenFileW(LPWSTR lpFileName, LPOFSTRUCT lpReOpenBuf, WORD wStyle)
     * }
     */
    public static int LZOpenFileW(MemorySegment lpFileName, MemorySegment lpReOpenBuf, short wStyle) {
        var mh$ = LZOpenFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZOpenFileW", lpFileName, lpReOpenBuf, wStyle);
            }
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZSeek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZSeek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG LZSeek(INT hFile, LONG lOffset, INT iOrigin)
     * }
     */
    public static FunctionDescriptor LZSeek$descriptor() {
        return LZSeek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG LZSeek(INT hFile, LONG lOffset, INT iOrigin)
     * }
     */
    public static MethodHandle LZSeek$handle() {
        return LZSeek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG LZSeek(INT hFile, LONG lOffset, INT iOrigin)
     * }
     */
    public static int LZSeek(int hFile, int lOffset, int iOrigin) {
        var mh$ = LZSeek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZSeek", hFile, lOffset, iOrigin);
            }
            return (int)mh$.invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT LZRead(INT hFile, CHAR *lpBuffer, INT cbRead)
     * }
     */
    public static FunctionDescriptor LZRead$descriptor() {
        return LZRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT LZRead(INT hFile, CHAR *lpBuffer, INT cbRead)
     * }
     */
    public static MethodHandle LZRead$handle() {
        return LZRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * INT LZRead(INT hFile, CHAR *lpBuffer, INT cbRead)
     * }
     */
    public static int LZRead(int hFile, MemorySegment lpBuffer, int cbRead) {
        var mh$ = LZRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZRead", hFile, lpBuffer, cbRead);
            }
            return (int)mh$.invokeExact(hFile, lpBuffer, cbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LZClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LZClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LZClose(INT hFile)
     * }
     */
    public static FunctionDescriptor LZClose$descriptor() {
        return LZClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LZClose(INT hFile)
     * }
     */
    public static MethodHandle LZClose$handle() {
        return LZClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void LZClose(INT hFile)
     * }
     */
    public static void LZClose(int hFile) {
        var mh$ = LZClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LZClose", hFile);
            }
            mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef UINT MMVERSION
     * }
     */
    public static final OfInt MMVERSION = C_INT;
    /**
     * {@snippet lang=c :
     * typedef UINT MMRESULT
     * }
     */
    public static final OfInt MMRESULT = C_INT;
    /**
     * {@snippet lang=c :
     * typedef UINT *LPUINT
     * }
     */
    public static final AddressLayout LPUINT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct mmtime_tag {
     *     UINT wType;
     *     union {
     *         DWORD ms;
     *         DWORD sample;
     *         DWORD cb;
     *         DWORD ticks;
     *         struct {
     *             BYTE hour;
     *             BYTE min;
     *             BYTE sec;
     *             BYTE frame;
     *             BYTE fps;
     *             BYTE dummy;
     *             BYTE pad[2];
     *         } smpte;
     *         struct {
     *             DWORD songptrpos;
     *         } midi;
     *     } u;
     * } *PMMTIME
     * }
     */
    public static final AddressLayout PMMTIME = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct mmtime_tag {
     *     UINT wType;
     *     union {
     *         DWORD ms;
     *         DWORD sample;
     *         DWORD cb;
     *         DWORD ticks;
     *         struct {
     *             BYTE hour;
     *             BYTE min;
     *             BYTE sec;
     *             BYTE frame;
     *             BYTE fps;
     *             BYTE dummy;
     *             BYTE pad[2];
     *         } smpte;
     *         struct {
     *             DWORD songptrpos;
     *         } midi;
     *     } u;
     * } *NPMMTIME
     * }
     */
    public static final AddressLayout NPMMTIME = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct mmtime_tag {
     *     UINT wType;
     *     union {
     *         DWORD ms;
     *         DWORD sample;
     *         DWORD cb;
     *         DWORD ticks;
     *         struct {
     *             BYTE hour;
     *             BYTE min;
     *             BYTE sec;
     *             BYTE frame;
     *             BYTE fps;
     *             BYTE dummy;
     *             BYTE pad[2];
     *         } smpte;
     *         struct {
     *             DWORD songptrpos;
     *         } midi;
     *     } u;
     * } *LPMMTIME
     * }
     */
    public static final AddressLayout LPMMTIME = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HDRVR__ {
     *     int unused;
     * } *HDRVR
     * }
     */
    public static final AddressLayout HDRVR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD MCIERROR
     * }
     */
    public static final OfInt MCIERROR = C_LONG;
    /**
     * {@snippet lang=c :
     * typedef UINT MCIDEVICEID
     * }
     */
    public static final OfInt MCIDEVICEID = C_INT;

    private static class mciSendCommandA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSendCommandA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIERROR mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor mciSendCommandA$descriptor() {
        return mciSendCommandA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIERROR mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle mciSendCommandA$handle() {
        return mciSendCommandA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIERROR mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int mciSendCommandA(int mciId, int uMsg, long dwParam1, long dwParam2) {
        var mh$ = mciSendCommandA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSendCommandA", mciId, uMsg, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSendCommandW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSendCommandW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIERROR mciSendCommandW(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor mciSendCommandW$descriptor() {
        return mciSendCommandW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIERROR mciSendCommandW(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle mciSendCommandW$handle() {
        return mciSendCommandW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIERROR mciSendCommandW(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int mciSendCommandW(int mciId, int uMsg, long dwParam1, long dwParam2) {
        var mh$ = mciSendCommandW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSendCommandW", mciId, uMsg, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSendStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSendStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIERROR mciSendStringA(LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static FunctionDescriptor mciSendStringA$descriptor() {
        return mciSendStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIERROR mciSendStringA(LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static MethodHandle mciSendStringA$handle() {
        return mciSendStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIERROR mciSendStringA(LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static int mciSendStringA(MemorySegment lpstrCommand, MemorySegment lpstrReturnString, int uReturnLength, MemorySegment hwndCallback) {
        var mh$ = mciSendStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSendStringA", lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
            }
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSendStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSendStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIERROR mciSendStringW(LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static FunctionDescriptor mciSendStringW$descriptor() {
        return mciSendStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIERROR mciSendStringW(LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static MethodHandle mciSendStringW$handle() {
        return mciSendStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIERROR mciSendStringW(LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback)
     * }
     */
    public static int mciSendStringW(MemorySegment lpstrCommand, MemorySegment lpstrReturnString, int uReturnLength, MemorySegment hwndCallback) {
        var mh$ = mciSendStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSendStringW", lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
            }
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetDeviceIDA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetDeviceIDA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDA(LPCSTR pszDevice)
     * }
     */
    public static FunctionDescriptor mciGetDeviceIDA$descriptor() {
        return mciGetDeviceIDA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDA(LPCSTR pszDevice)
     * }
     */
    public static MethodHandle mciGetDeviceIDA$handle() {
        return mciGetDeviceIDA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDA(LPCSTR pszDevice)
     * }
     */
    public static int mciGetDeviceIDA(MemorySegment pszDevice) {
        var mh$ = mciGetDeviceIDA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDeviceIDA", pszDevice);
            }
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetDeviceIDW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetDeviceIDW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDW(LPCWSTR pszDevice)
     * }
     */
    public static FunctionDescriptor mciGetDeviceIDW$descriptor() {
        return mciGetDeviceIDW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDW(LPCWSTR pszDevice)
     * }
     */
    public static MethodHandle mciGetDeviceIDW$handle() {
        return mciGetDeviceIDW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDW(LPCWSTR pszDevice)
     * }
     */
    public static int mciGetDeviceIDW(MemorySegment pszDevice) {
        var mh$ = mciGetDeviceIDW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDeviceIDW", pszDevice);
            }
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetDeviceIDFromElementIDA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetDeviceIDFromElementIDA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDA(DWORD dwElementID, LPCSTR lpstrType)
     * }
     */
    public static FunctionDescriptor mciGetDeviceIDFromElementIDA$descriptor() {
        return mciGetDeviceIDFromElementIDA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDA(DWORD dwElementID, LPCSTR lpstrType)
     * }
     */
    public static MethodHandle mciGetDeviceIDFromElementIDA$handle() {
        return mciGetDeviceIDFromElementIDA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDA(DWORD dwElementID, LPCSTR lpstrType)
     * }
     */
    public static int mciGetDeviceIDFromElementIDA(int dwElementID, MemorySegment lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDeviceIDFromElementIDA", dwElementID, lpstrType);
            }
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetDeviceIDFromElementIDW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetDeviceIDFromElementIDW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDW(DWORD dwElementID, LPCWSTR lpstrType)
     * }
     */
    public static FunctionDescriptor mciGetDeviceIDFromElementIDW$descriptor() {
        return mciGetDeviceIDFromElementIDW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDW(DWORD dwElementID, LPCWSTR lpstrType)
     * }
     */
    public static MethodHandle mciGetDeviceIDFromElementIDW$handle() {
        return mciGetDeviceIDFromElementIDW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MCIDEVICEID mciGetDeviceIDFromElementIDW(DWORD dwElementID, LPCWSTR lpstrType)
     * }
     */
    public static int mciGetDeviceIDFromElementIDW(int dwElementID, MemorySegment lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDeviceIDFromElementIDW", dwElementID, lpstrType);
            }
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetErrorStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetErrorStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciGetErrorStringA(MCIERROR mcierr, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor mciGetErrorStringA$descriptor() {
        return mciGetErrorStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciGetErrorStringA(MCIERROR mcierr, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle mciGetErrorStringA$handle() {
        return mciGetErrorStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciGetErrorStringA(MCIERROR mcierr, LPSTR pszText, UINT cchText)
     * }
     */
    public static int mciGetErrorStringA(int mcierr, MemorySegment pszText, int cchText) {
        var mh$ = mciGetErrorStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetErrorStringA", mcierr, pszText, cchText);
            }
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetErrorStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetErrorStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciGetErrorStringW(MCIERROR mcierr, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor mciGetErrorStringW$descriptor() {
        return mciGetErrorStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciGetErrorStringW(MCIERROR mcierr, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle mciGetErrorStringW$handle() {
        return mciGetErrorStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciGetErrorStringW(MCIERROR mcierr, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int mciGetErrorStringW(int mcierr, MemorySegment pszText, int cchText) {
        var mh$ = mciGetErrorStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetErrorStringW", mcierr, pszText, cchText);
            }
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSetYieldProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSetYieldProc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciSetYieldProc(MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData)
     * }
     */
    public static FunctionDescriptor mciSetYieldProc$descriptor() {
        return mciSetYieldProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciSetYieldProc(MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData)
     * }
     */
    public static MethodHandle mciSetYieldProc$handle() {
        return mciSetYieldProc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciSetYieldProc(MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData)
     * }
     */
    public static int mciSetYieldProc(int mciId, MemorySegment fpYieldProc, int dwYieldData) {
        var mh$ = mciSetYieldProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSetYieldProc", mciId, fpYieldProc, dwYieldData);
            }
            return (int)mh$.invokeExact(mciId, fpYieldProc, dwYieldData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetCreatorTask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetCreatorTask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HTASK mciGetCreatorTask(MCIDEVICEID mciId)
     * }
     */
    public static FunctionDescriptor mciGetCreatorTask$descriptor() {
        return mciGetCreatorTask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HTASK mciGetCreatorTask(MCIDEVICEID mciId)
     * }
     */
    public static MethodHandle mciGetCreatorTask$handle() {
        return mciGetCreatorTask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HTASK mciGetCreatorTask(MCIDEVICEID mciId)
     * }
     */
    public static MemorySegment mciGetCreatorTask(int mciId) {
        var mh$ = mciGetCreatorTask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetCreatorTask", mciId);
            }
            return (MemorySegment)mh$.invokeExact(mciId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciGetYieldProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetYieldProc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * YIELDPROC mciGetYieldProc(MCIDEVICEID mciId, LPDWORD pdwYieldData)
     * }
     */
    public static FunctionDescriptor mciGetYieldProc$descriptor() {
        return mciGetYieldProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * YIELDPROC mciGetYieldProc(MCIDEVICEID mciId, LPDWORD pdwYieldData)
     * }
     */
    public static MethodHandle mciGetYieldProc$handle() {
        return mciGetYieldProc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * YIELDPROC mciGetYieldProc(MCIDEVICEID mciId, LPDWORD pdwYieldData)
     * }
     */
    public static MemorySegment mciGetYieldProc(int mciId, MemorySegment pdwYieldData) {
        var mh$ = mciGetYieldProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetYieldProc", mciId, pdwYieldData);
            }
            return (MemorySegment)mh$.invokeExact(mciId, pdwYieldData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GENERIC_PARMS {
     *     DWORD_PTR dwCallback;
     * } *PMCI_GENERIC_PARMS
     * }
     */
    public static final AddressLayout PMCI_GENERIC_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GENERIC_PARMS {
     *     DWORD_PTR dwCallback;
     * } *LPMCI_GENERIC_PARMS
     * }
     */
    public static final AddressLayout LPMCI_GENERIC_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     * } *PMCI_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     * } *LPMCI_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     * } *PMCI_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     * } *LPMCI_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *PMCI_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEEK_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTo;
     * } *PMCI_SEEK_PARMS
     * }
     */
    public static final AddressLayout PMCI_SEEK_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEEK_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTo;
     * } *LPMCI_SEEK_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SEEK_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_STATUS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD_PTR dwReturn;
     *     DWORD dwItem;
     *     DWORD dwTrack;
     * } *PMCI_STATUS_PARMS
     * }
     */
    public static final AddressLayout PMCI_STATUS_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_STATUS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD_PTR dwReturn;
     *     DWORD dwItem;
     *     DWORD dwTrack;
     * } *LPMCI_STATUS_PARMS
     * }
     */
    public static final AddressLayout LPMCI_STATUS_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_INFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     * } *LPMCI_INFO_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_INFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     * } *LPMCI_INFO_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GETDEVCAPS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwReturn;
     *     DWORD dwItem;
     * } *PMCI_GETDEVCAPS_PARMS
     * }
     */
    public static final AddressLayout PMCI_GETDEVCAPS_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GETDEVCAPS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwReturn;
     *     DWORD dwItem;
     * } *LPMCI_GETDEVCAPS_PARMS
     * }
     */
    public static final AddressLayout LPMCI_GETDEVCAPS_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *PMCI_SYSINFO_PARMSA
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *LPMCI_SYSINFO_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *PMCI_SYSINFO_PARMSW
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *LPMCI_SYSINFO_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     * } *PMCI_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     * } *LPMCI_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_BREAK_PARMS {
     *     DWORD_PTR dwCallback;
     *     int nVirtKey;
     *     HWND hwndBreak;
     * } *PMCI_BREAK_PARMS
     * }
     */
    public static final AddressLayout PMCI_BREAK_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_BREAK_PARMS {
     *     DWORD_PTR dwCallback;
     *     int nVirtKey;
     *     HWND hwndBreak;
     * } *LPMCI_BREAK_PARMS
     * }
     */
    public static final AddressLayout LPMCI_BREAK_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *PMCI_SAVE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *LPMCI_SAVE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *PMCI_SAVE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *LPMCI_SAVE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *PMCI_LOAD_PARMSA
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *LPMCI_LOAD_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *PMCI_LOAD_PARMSW
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *LPMCI_LOAD_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_RECORD_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_RECORD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_RECORD_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *PMCI_VD_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *LPMCI_VD_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *PMCI_VD_STEP_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_STEP_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *LPMCI_VD_STEP_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_STEP_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpstrCommand;
     * } *PMCI_VD_ESCAPE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpstrCommand;
     * } *LPMCI_VD_ESCAPE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpstrCommand;
     * } *PMCI_VD_ESCAPE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpstrCommand;
     * } *LPMCI_VD_ESCAPE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *PMCI_WAVE_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *LPMCI_WAVE_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *PMCI_WAVE_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *LPMCI_WAVE_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_DELETE_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *PMCI_WAVE_DELETE_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_DELETE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_DELETE_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_WAVE_DELETE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_DELETE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     UINT wInput;
     *     UINT wOutput;
     *     WORD wFormatTag;
     *     WORD wReserved2;
     *     WORD nChannels;
     *     WORD wReserved3;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wReserved4;
     *     WORD wBitsPerSample;
     *     WORD wReserved5;
     * } *PMCI_WAVE_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     UINT wInput;
     *     UINT wOutput;
     *     WORD wFormatTag;
     *     WORD wReserved2;
     *     WORD nChannels;
     *     WORD wReserved3;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wReserved4;
     *     WORD wBitsPerSample;
     *     WORD wReserved5;
     * } *LPMCI_WAVE_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEQ_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     DWORD dwTempo;
     *     DWORD dwPort;
     *     DWORD dwSlave;
     *     DWORD dwMaster;
     *     DWORD dwOffset;
     * } *PMCI_SEQ_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_SEQ_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEQ_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     DWORD dwTempo;
     *     DWORD dwPort;
     *     DWORD dwSlave;
     *     DWORD dwMaster;
     *     DWORD dwOffset;
     * } *LPMCI_SEQ_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SEQ_SET_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_ANIM_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_ANIM_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_ANIM_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_ANIM_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *PMCI_ANIM_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *LPMCI_ANIM_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_PLAY_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *PMCI_ANIM_STEP_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_STEP_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *LPMCI_ANIM_STEP_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_STEP_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *PMCI_ANIM_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *LPMCI_ANIM_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *PMCI_ANIM_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *LPMCI_ANIM_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_RECT_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_RECT_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_UPDATE_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     *     HDC hDC;
     * } *PMCI_ANIM_UPDATE_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_UPDATE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_UPDATE_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     *     HDC hDC;
     * } *LPMCI_ANIM_UPDATE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_UPDATE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_OVLY_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_OVLY_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_OVLY_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_OVLY_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *PMCI_OVLY_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *LPMCI_OVLY_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *PMCI_OVLY_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *LPMCI_OVLY_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_RECT_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     * } *PMCI_OVLY_RECT_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_RECT_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_RECT_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     * } *LPMCI_OVLY_RECT_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_RECT_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_SAVE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_SAVE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_SAVE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_SAVE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_LOAD_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_LOAD_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_LOAD_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_LOAD_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMS = C_POINTER;

    private static class mciGetDriverData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciGetDriverData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static FunctionDescriptor mciGetDriverData$descriptor() {
        return mciGetDriverData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static MethodHandle mciGetDriverData$handle() {
        return mciGetDriverData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static long mciGetDriverData(int wDeviceID) {
        var mh$ = mciGetDriverData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDriverData", wDeviceID);
            }
            return (long)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciLoadCommandResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciLoadCommandResource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static FunctionDescriptor mciLoadCommandResource$descriptor() {
        return mciLoadCommandResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static MethodHandle mciLoadCommandResource$handle() {
        return mciLoadCommandResource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static int mciLoadCommandResource(MemorySegment hInstance, MemorySegment lpResName, int wType) {
        var mh$ = mciLoadCommandResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciLoadCommandResource", hInstance, lpResName, wType);
            }
            return (int)mh$.invokeExact(hInstance, lpResName, wType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSetDriverData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciSetDriverData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static FunctionDescriptor mciSetDriverData$descriptor() {
        return mciSetDriverData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static MethodHandle mciSetDriverData$handle() {
        return mciSetDriverData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static int mciSetDriverData(int wDeviceID, long dwData) {
        var mh$ = mciSetDriverData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSetDriverData", wDeviceID, dwData);
            }
            return (int)mh$.invokeExact(wDeviceID, dwData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciDriverYield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciDriverYield"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static FunctionDescriptor mciDriverYield$descriptor() {
        return mciDriverYield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static MethodHandle mciDriverYield$handle() {
        return mciDriverYield.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static int mciDriverYield(int wDeviceID) {
        var mh$ = mciDriverYield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciDriverYield", wDeviceID);
            }
            return (int)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciDriverNotify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciDriverNotify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static FunctionDescriptor mciDriverNotify$descriptor() {
        return mciDriverNotify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static MethodHandle mciDriverNotify$handle() {
        return mciDriverNotify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static int mciDriverNotify(MemorySegment hwndCallback, int wDeviceID, int uStatus) {
        var mh$ = mciDriverNotify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciDriverNotify", hwndCallback, wDeviceID, uStatus);
            }
            return (int)mh$.invokeExact(hwndCallback, wDeviceID, uStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciFreeCommandResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mciFreeCommandResource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static FunctionDescriptor mciFreeCommandResource$descriptor() {
        return mciFreeCommandResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static MethodHandle mciFreeCommandResource$handle() {
        return mciFreeCommandResource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static int mciFreeCommandResource(int wTable) {
        var mh$ = mciFreeCommandResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciFreeCommandResource", wTable);
            }
            return (int)mh$.invokeExact(wTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *PDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout PDRVCONFIGINFOEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *NPDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout NPDRVCONFIGINFOEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *LPDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout LPDRVCONFIGINFOEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *PDRVCONFIGINFO
     * }
     */
    public static final AddressLayout PDRVCONFIGINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *NPDRVCONFIGINFO
     * }
     */
    public static final AddressLayout NPDRVCONFIGINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *LPDRVCONFIGINFO
     * }
     */
    public static final AddressLayout LPDRVCONFIGINFO = C_POINTER;

    private static class CloseDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CloseDriver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor CloseDriver$descriptor() {
        return CloseDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle CloseDriver$handle() {
        return CloseDriver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long CloseDriver(MemorySegment hDriver, long lParam1, long lParam2) {
        var mh$ = CloseDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseDriver", hDriver, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hDriver, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OpenDriver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor OpenDriver$descriptor() {
        return OpenDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static MethodHandle OpenDriver$handle() {
        return OpenDriver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static MemorySegment OpenDriver(MemorySegment szDriverName, MemorySegment szSectionName, long lParam2) {
        var mh$ = OpenDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenDriver", szDriverName, szSectionName, lParam2);
            }
            return (MemorySegment)mh$.invokeExact(szDriverName, szSectionName, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SendDriverMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SendDriverMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor SendDriverMessage$descriptor() {
        return SendDriverMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle SendDriverMessage$handle() {
        return SendDriverMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long SendDriverMessage(MemorySegment hDriver, int message, long lParam1, long lParam2) {
        var mh$ = SendDriverMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SendDriverMessage", hDriver, message, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hDriver, message, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DrvGetModuleHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DrvGetModuleHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static FunctionDescriptor DrvGetModuleHandle$descriptor() {
        return DrvGetModuleHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static MethodHandle DrvGetModuleHandle$handle() {
        return DrvGetModuleHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment DrvGetModuleHandle(MemorySegment hDriver) {
        var mh$ = DrvGetModuleHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DrvGetModuleHandle", hDriver);
            }
            return (MemorySegment)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDriverModuleHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetDriverModuleHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static FunctionDescriptor GetDriverModuleHandle$descriptor() {
        return GetDriverModuleHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static MethodHandle GetDriverModuleHandle$handle() {
        return GetDriverModuleHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment GetDriverModuleHandle(MemorySegment hDriver) {
        var mh$ = GetDriverModuleHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDriverModuleHandle", hDriver);
            }
            return (MemorySegment)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DefDriverProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_LONG_LONG,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DefDriverProc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor DefDriverProc$descriptor() {
        return DefDriverProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle DefDriverProc$handle() {
        return DefDriverProc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long DefDriverProc(long dwDriverIdentifier, MemorySegment hdrvr, int uMsg, long lParam1, long lParam2) {
        var mh$ = DefDriverProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DefDriverProc", dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DriverCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DriverCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor DriverCallback$descriptor() {
        return DriverCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle DriverCallback$handle() {
        return DriverCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int DriverCallback(long dwCallback, int dwFlags, MemorySegment hDevice, int dwMsg, long dwUser, long dwParam1, long dwParam2) {
        var mh$ = DriverCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DriverCallback", dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndOpenSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("sndOpenSound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static FunctionDescriptor sndOpenSound$descriptor() {
        return sndOpenSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static MethodHandle sndOpenSound$handle() {
        return sndOpenSound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static int sndOpenSound(MemorySegment EventName, MemorySegment AppName, int Flags, MemorySegment FileHandle) {
        var mh$ = sndOpenSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndOpenSound", EventName, AppName, Flags, FileHandle);
            }
            return (int)mh$.invokeExact(EventName, AppName, Flags, FileHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmDrvInstall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmDrvInstall"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static FunctionDescriptor mmDrvInstall$descriptor() {
        return mmDrvInstall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static MethodHandle mmDrvInstall$handle() {
        return mmDrvInstall.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static int mmDrvInstall(MemorySegment hDriver, MemorySegment wszDrvEntry, MemorySegment drvMessage, int wFlags) {
        var mh$ = mmDrvInstall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmDrvInstall", hDriver, wszDrvEntry, drvMessage, wFlags);
            }
            return (int)mh$.invokeExact(hDriver, wszDrvEntry, drvMessage, wFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD FOURCC
     * }
     */
    public static final OfInt FOURCC = C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *HPSTR
     * }
     */
    public static final AddressLayout HPSTR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMMIO__ {
     *     int unused;
     * } *HMMIO
     * }
     */
    public static final AddressLayout HMMIO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *PMMIOINFO
     * }
     */
    public static final AddressLayout PMMIOINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *NPMMIOINFO
     * }
     */
    public static final AddressLayout NPMMIOINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *LPMMIOINFO
     * }
     */
    public static final AddressLayout LPMMIOINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const MMIOINFO *LPCMMIOINFO
     * }
     */
    public static final AddressLayout LPCMMIOINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *PMMCKINFO
     * }
     */
    public static final AddressLayout PMMCKINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *NPMMCKINFO
     * }
     */
    public static final AddressLayout NPMMCKINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *LPMMCKINFO
     * }
     */
    public static final AddressLayout LPMMCKINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const MMCKINFO *LPCMMCKINFO
     * }
     */
    public static final AddressLayout LPCMMCKINFO = C_POINTER;

    private static class mmioStringToFOURCCA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioStringToFOURCCA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static FunctionDescriptor mmioStringToFOURCCA$descriptor() {
        return mmioStringToFOURCCA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static MethodHandle mmioStringToFOURCCA$handle() {
        return mmioStringToFOURCCA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static int mmioStringToFOURCCA(MemorySegment sz, int uFlags) {
        var mh$ = mmioStringToFOURCCA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioStringToFOURCCA", sz, uFlags);
            }
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioStringToFOURCCW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioStringToFOURCCW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static FunctionDescriptor mmioStringToFOURCCW$descriptor() {
        return mmioStringToFOURCCW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static MethodHandle mmioStringToFOURCCW$handle() {
        return mmioStringToFOURCCW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static int mmioStringToFOURCCW(MemorySegment sz, int uFlags) {
        var mh$ = mmioStringToFOURCCW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioStringToFOURCCW", sz, uFlags);
            }
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioInstallIOProcA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioInstallIOProcA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor mmioInstallIOProcA$descriptor() {
        return mmioInstallIOProcA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MethodHandle mmioInstallIOProcA$handle() {
        return mmioInstallIOProcA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcA(int fccIOProc, MemorySegment pIOProc, int dwFlags) {
        var mh$ = mmioInstallIOProcA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioInstallIOProcA", fccIOProc, pIOProc, dwFlags);
            }
            return (MemorySegment)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioInstallIOProcW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioInstallIOProcW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor mmioInstallIOProcW$descriptor() {
        return mmioInstallIOProcW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MethodHandle mmioInstallIOProcW$handle() {
        return mmioInstallIOProcW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcW(int fccIOProc, MemorySegment pIOProc, int dwFlags) {
        var mh$ = mmioInstallIOProcW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioInstallIOProcW", fccIOProc, pIOProc, dwFlags);
            }
            return (MemorySegment)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioOpenA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioOpenA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mmioOpenA$descriptor() {
        return mmioOpenA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mmioOpenA$handle() {
        return mmioOpenA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenA(MemorySegment pszFileName, MemorySegment pmmioinfo, int fdwOpen) {
        var mh$ = mmioOpenA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioOpenA", pszFileName, pmmioinfo, fdwOpen);
            }
            return (MemorySegment)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioOpenW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioOpenW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mmioOpenW$descriptor() {
        return mmioOpenW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mmioOpenW$handle() {
        return mmioOpenW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenW(MemorySegment pszFileName, MemorySegment pmmioinfo, int fdwOpen) {
        var mh$ = mmioOpenW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioOpenW", pszFileName, pmmioinfo, fdwOpen);
            }
            return (MemorySegment)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRenameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioRenameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static FunctionDescriptor mmioRenameA$descriptor() {
        return mmioRenameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MethodHandle mmioRenameA$handle() {
        return mmioRenameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static int mmioRenameA(MemorySegment pszFileName, MemorySegment pszNewFileName, MemorySegment pmmioinfo, int fdwRename) {
        var mh$ = mmioRenameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRenameA", pszFileName, pszNewFileName, pmmioinfo, fdwRename);
            }
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRenameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioRenameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static FunctionDescriptor mmioRenameW$descriptor() {
        return mmioRenameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MethodHandle mmioRenameW$handle() {
        return mmioRenameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static int mmioRenameW(MemorySegment pszFileName, MemorySegment pszNewFileName, MemorySegment pmmioinfo, int fdwRename) {
        var mh$ = mmioRenameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRenameW", pszFileName, pszNewFileName, pmmioinfo, fdwRename);
            }
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static FunctionDescriptor mmioClose$descriptor() {
        return mmioClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static MethodHandle mmioClose$handle() {
        return mmioClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static int mmioClose(MemorySegment hmmio, int fuClose) {
        var mh$ = mmioClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioClose", hmmio, fuClose);
            }
            return (int)mh$.invokeExact(hmmio, fuClose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioRead"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static FunctionDescriptor mmioRead$descriptor() {
        return mmioRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static MethodHandle mmioRead$handle() {
        return mmioRead.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static int mmioRead(MemorySegment hmmio, MemorySegment pch, int cch) {
        var mh$ = mmioRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRead", hmmio, pch, cch);
            }
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioWrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static FunctionDescriptor mmioWrite$descriptor() {
        return mmioWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static MethodHandle mmioWrite$handle() {
        return mmioWrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static int mmioWrite(MemorySegment hmmio, MemorySegment pch, int cch) {
        var mh$ = mmioWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioWrite", hmmio, pch, cch);
            }
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSeek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioSeek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static FunctionDescriptor mmioSeek$descriptor() {
        return mmioSeek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static MethodHandle mmioSeek$handle() {
        return mmioSeek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static int mmioSeek(MemorySegment hmmio, int lOffset, int iOrigin) {
        var mh$ = mmioSeek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSeek", hmmio, lOffset, iOrigin);
            }
            return (int)mh$.invokeExact(hmmio, lOffset, iOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioGetInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static FunctionDescriptor mmioGetInfo$descriptor() {
        return mmioGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MethodHandle mmioGetInfo$handle() {
        return mmioGetInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static int mmioGetInfo(MemorySegment hmmio, MemorySegment pmmioinfo, int fuInfo) {
        var mh$ = mmioGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioGetInfo", hmmio, pmmioinfo, fuInfo);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioSetInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static FunctionDescriptor mmioSetInfo$descriptor() {
        return mmioSetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MethodHandle mmioSetInfo$handle() {
        return mmioSetInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static int mmioSetInfo(MemorySegment hmmio, MemorySegment pmmioinfo, int fuInfo) {
        var mh$ = mmioSetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSetInfo", hmmio, pmmioinfo, fuInfo);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioSetBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static FunctionDescriptor mmioSetBuffer$descriptor() {
        return mmioSetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static MethodHandle mmioSetBuffer$handle() {
        return mmioSetBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static int mmioSetBuffer(MemorySegment hmmio, MemorySegment pchBuffer, int cchBuffer, int fuBuffer) {
        var mh$ = mmioSetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSetBuffer", hmmio, pchBuffer, cchBuffer, fuBuffer);
            }
            return (int)mh$.invokeExact(hmmio, pchBuffer, cchBuffer, fuBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioFlush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static FunctionDescriptor mmioFlush$descriptor() {
        return mmioFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static MethodHandle mmioFlush$handle() {
        return mmioFlush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static int mmioFlush(MemorySegment hmmio, int fuFlush) {
        var mh$ = mmioFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioFlush", hmmio, fuFlush);
            }
            return (int)mh$.invokeExact(hmmio, fuFlush);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioAdvance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioAdvance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static FunctionDescriptor mmioAdvance$descriptor() {
        return mmioAdvance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static MethodHandle mmioAdvance$handle() {
        return mmioAdvance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static int mmioAdvance(MemorySegment hmmio, MemorySegment pmmioinfo, int fuAdvance) {
        var mh$ = mmioAdvance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioAdvance", hmmio, pmmioinfo, fuAdvance);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuAdvance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioSendMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor mmioSendMessage$descriptor() {
        return mmioSendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle mmioSendMessage$handle() {
        return mmioSendMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long mmioSendMessage(MemorySegment hmmio, int uMsg, long lParam1, long lParam2) {
        var mh$ = mmioSendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSendMessage", hmmio, uMsg, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hmmio, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioDescend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioDescend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static FunctionDescriptor mmioDescend$descriptor() {
        return mmioDescend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static MethodHandle mmioDescend$handle() {
        return mmioDescend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static int mmioDescend(MemorySegment hmmio, MemorySegment pmmcki, MemorySegment pmmckiParent, int fuDescend) {
        var mh$ = mmioDescend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioDescend", hmmio, pmmcki, pmmckiParent, fuDescend);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, pmmckiParent, fuDescend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioAscend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioAscend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static FunctionDescriptor mmioAscend$descriptor() {
        return mmioAscend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static MethodHandle mmioAscend$handle() {
        return mmioAscend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static int mmioAscend(MemorySegment hmmio, MemorySegment pmmcki, int fuAscend) {
        var mh$ = mmioAscend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioAscend", hmmio, pmmcki, fuAscend);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, fuAscend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioCreateChunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mmioCreateChunk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static FunctionDescriptor mmioCreateChunk$descriptor() {
        return mmioCreateChunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static MethodHandle mmioCreateChunk$handle() {
        return mmioCreateChunk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static int mmioCreateChunk(MemorySegment hmmio, MemorySegment pmmcki, int fuCreate) {
        var mh$ = mmioCreateChunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioCreateChunk", hmmio, pmmcki, fuCreate);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, fuCreate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_INT,
            C_POINTER,
            C_LONG_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeSetEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static FunctionDescriptor timeSetEvent$descriptor() {
        return timeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static MethodHandle timeSetEvent$handle() {
        return timeSetEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static int timeSetEvent(int uDelay, int uResolution, MemorySegment fptc, long dwUser, int fuEvent) {
        var mh$ = timeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeSetEvent", uDelay, uResolution, fptc, dwUser, fuEvent);
            }
            return (int)mh$.invokeExact(uDelay, uResolution, fptc, dwUser, fuEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeKillEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeKillEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static FunctionDescriptor timeKillEvent$descriptor() {
        return timeKillEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static MethodHandle timeKillEvent$handle() {
        return timeKillEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static int timeKillEvent(int uTimerID) {
        var mh$ = timeKillEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeKillEvent", uTimerID);
            }
            return (int)mh$.invokeExact(uTimerID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndPlaySoundA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("sndPlaySoundA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static FunctionDescriptor sndPlaySoundA$descriptor() {
        return sndPlaySoundA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static MethodHandle sndPlaySoundA$handle() {
        return sndPlaySoundA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static int sndPlaySoundA(MemorySegment pszSound, int fuSound) {
        var mh$ = sndPlaySoundA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndPlaySoundA", pszSound, fuSound);
            }
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndPlaySoundW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("sndPlaySoundW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static FunctionDescriptor sndPlaySoundW$descriptor() {
        return sndPlaySoundW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static MethodHandle sndPlaySoundW$handle() {
        return sndPlaySoundW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static int sndPlaySoundW(MemorySegment pszSound, int fuSound) {
        var mh$ = sndPlaySoundW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndPlaySoundW", pszSound, fuSound);
            }
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PlaySoundA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PlaySoundA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static FunctionDescriptor PlaySoundA$descriptor() {
        return PlaySoundA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MethodHandle PlaySoundA$handle() {
        return PlaySoundA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static int PlaySoundA(MemorySegment pszSound, MemorySegment hmod, int fdwSound) {
        var mh$ = PlaySoundA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PlaySoundA", pszSound, hmod, fdwSound);
            }
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PlaySoundW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PlaySoundW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static FunctionDescriptor PlaySoundW$descriptor() {
        return PlaySoundW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MethodHandle PlaySoundW$handle() {
        return PlaySoundW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static int PlaySoundW(MemorySegment pszSound, MemorySegment hmod, int fdwSound) {
        var mh$ = PlaySoundW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PlaySoundW", pszSound, hmod, fdwSound);
            }
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HWAVE__ {
     *     int unused;
     * } *HWAVE
     * }
     */
    public static final AddressLayout HWAVE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWAVEIN__ {
     *     int unused;
     * } *HWAVEIN
     * }
     */
    public static final AddressLayout HWAVEIN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWAVEOUT__ {
     *     int unused;
     * } *HWAVEOUT
     * }
     */
    public static final AddressLayout HWAVEOUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HWAVEIN *LPHWAVEIN
     * }
     */
    public static final AddressLayout LPHWAVEIN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HWAVEOUT *LPHWAVEOUT
     * }
     */
    public static final AddressLayout LPHWAVEOUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *PWAVEHDR
     * }
     */
    public static final AddressLayout PWAVEHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *NPWAVEHDR
     * }
     */
    public static final AddressLayout NPWAVEHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *LPWAVEHDR
     * }
     */
    public static final AddressLayout LPWAVEHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout PWAVEOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout PWAVEOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEOUTCAPSA PWAVEOUTCAPS
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *PWAVEINCAPSA
     * }
     */
    public static final AddressLayout PWAVEINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *NPWAVEINCAPSA
     * }
     */
    public static final AddressLayout NPWAVEINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *LPWAVEINCAPSA
     * }
     */
    public static final AddressLayout LPWAVEINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *PWAVEINCAPSW
     * }
     */
    public static final AddressLayout PWAVEINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *NPWAVEINCAPSW
     * }
     */
    public static final AddressLayout NPWAVEINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *LPWAVEINCAPSW
     * }
     */
    public static final AddressLayout LPWAVEINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEINCAPSA PWAVEINCAPS
     * }
     */
    public static final AddressLayout PWAVEINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEINCAPSA NPWAVEINCAPS
     * }
     */
    public static final AddressLayout NPWAVEINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEINCAPSA LPWAVEINCAPS
     * }
     */
    public static final AddressLayout LPWAVEINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEINCAPS2A
     * }
     */
    public static final AddressLayout PWAVEINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEINCAPS2A
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEINCAPS2A
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEINCAPS2W
     * }
     */
    public static final AddressLayout PWAVEINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEINCAPS2W
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEINCAPS2W
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEINCAPS2A PWAVEINCAPS2
     * }
     */
    public static final AddressLayout PWAVEINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEINCAPS2A NPWAVEINCAPS2
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEINCAPS2A LPWAVEINCAPS2
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *PWAVEFORMAT
     * }
     */
    public static final AddressLayout PWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *NPWAVEFORMAT
     * }
     */
    public static final AddressLayout NPWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *LPWAVEFORMAT
     * }
     */
    public static final AddressLayout LPWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *PPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout PPCMWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *NPPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout NPPCMWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *LPPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout LPPCMWAVEFORMAT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *PWAVEFORMATEX
     * }
     */
    public static final AddressLayout PWAVEFORMATEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *NPWAVEFORMATEX
     * }
     */
    public static final AddressLayout NPWAVEFORMATEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *LPWAVEFORMATEX
     * }
     */
    public static final AddressLayout LPWAVEFORMATEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const WAVEFORMATEX *LPCWAVEFORMATEX
     * }
     */
    public static final AddressLayout LPCWAVEFORMATEX = C_POINTER;

    private static class waveOutGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static FunctionDescriptor waveOutGetNumDevs$descriptor() {
        return waveOutGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static MethodHandle waveOutGetNumDevs$handle() {
        return waveOutGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static int waveOutGetNumDevs() {
        var mh$ = waveOutGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static FunctionDescriptor waveOutGetDevCapsA$descriptor() {
        return waveOutGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static MethodHandle waveOutGetDevCapsA$handle() {
        return waveOutGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static int waveOutGetDevCapsA(long uDeviceID, MemorySegment pwoc, int cbwoc) {
        var mh$ = waveOutGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetDevCapsA", uDeviceID, pwoc, cbwoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static FunctionDescriptor waveOutGetDevCapsW$descriptor() {
        return waveOutGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static MethodHandle waveOutGetDevCapsW$handle() {
        return waveOutGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static int waveOutGetDevCapsW(long uDeviceID, MemorySegment pwoc, int cbwoc) {
        var mh$ = waveOutGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetDevCapsW", uDeviceID, pwoc, cbwoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor waveOutGetVolume$descriptor() {
        return waveOutGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle waveOutGetVolume$handle() {
        return waveOutGetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static int waveOutGetVolume(MemorySegment hwo, MemorySegment pdwVolume) {
        var mh$ = waveOutGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetVolume", hwo, pdwVolume);
            }
            return (int)mh$.invokeExact(hwo, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutSetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor waveOutSetVolume$descriptor() {
        return waveOutSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static MethodHandle waveOutSetVolume$handle() {
        return waveOutSetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static int waveOutSetVolume(MemorySegment hwo, int dwVolume) {
        var mh$ = waveOutSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetVolume", hwo, dwVolume);
            }
            return (int)mh$.invokeExact(hwo, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetErrorTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveOutGetErrorTextA$descriptor() {
        return waveOutGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveOutGetErrorTextA$handle() {
        return waveOutGetErrorTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int waveOutGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveOutGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetErrorTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveOutGetErrorTextW$descriptor() {
        return waveOutGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveOutGetErrorTextW$handle() {
        return waveOutGetErrorTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int waveOutGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveOutGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor waveOutOpen$descriptor() {
        return waveOutOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle waveOutOpen$handle() {
        return waveOutOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int waveOutOpen(MemorySegment phwo, int uDeviceID, MemorySegment pwfx, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = waveOutOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutOpen", phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutClose$descriptor() {
        return waveOutClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutClose$handle() {
        return waveOutClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static int waveOutClose(MemorySegment hwo) {
        var mh$ = waveOutClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutClose", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutPrepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutPrepareHeader$descriptor() {
        return waveOutPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutPrepareHeader$handle() {
        return waveOutPrepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutPrepareHeader(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutPrepareHeader", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutUnprepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutUnprepareHeader$descriptor() {
        return waveOutUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutUnprepareHeader$handle() {
        return waveOutUnprepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutUnprepareHeader(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutUnprepareHeader", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutWrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutWrite$descriptor() {
        return waveOutWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutWrite$handle() {
        return waveOutWrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutWrite(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutWrite", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutPause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutPause"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutPause$descriptor() {
        return waveOutPause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutPause$handle() {
        return waveOutPause.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static int waveOutPause(MemorySegment hwo) {
        var mh$ = waveOutPause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutPause", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutRestart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutRestart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutRestart$descriptor() {
        return waveOutRestart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutRestart$handle() {
        return waveOutRestart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static int waveOutRestart(MemorySegment hwo) {
        var mh$ = waveOutRestart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutRestart", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutReset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutReset$descriptor() {
        return waveOutReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutReset$handle() {
        return waveOutReset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static int waveOutReset(MemorySegment hwo) {
        var mh$ = waveOutReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutReset", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutBreakLoop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutBreakLoop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutBreakLoop$descriptor() {
        return waveOutBreakLoop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutBreakLoop$handle() {
        return waveOutBreakLoop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static int waveOutBreakLoop(MemorySegment hwo) {
        var mh$ = waveOutBreakLoop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutBreakLoop", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor waveOutGetPosition$descriptor() {
        return waveOutGetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle waveOutGetPosition$handle() {
        return waveOutGetPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int waveOutGetPosition(MemorySegment hwo, MemorySegment pmmt, int cbmmt) {
        var mh$ = waveOutGetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPosition", hwo, pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hwo, pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetPitch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static FunctionDescriptor waveOutGetPitch$descriptor() {
        return waveOutGetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static MethodHandle waveOutGetPitch$handle() {
        return waveOutGetPitch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static int waveOutGetPitch(MemorySegment hwo, MemorySegment pdwPitch) {
        var mh$ = waveOutGetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPitch", hwo, pdwPitch);
            }
            return (int)mh$.invokeExact(hwo, pdwPitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutSetPitch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static FunctionDescriptor waveOutSetPitch$descriptor() {
        return waveOutSetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static MethodHandle waveOutSetPitch$handle() {
        return waveOutSetPitch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static int waveOutSetPitch(MemorySegment hwo, int dwPitch) {
        var mh$ = waveOutSetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetPitch", hwo, dwPitch);
            }
            return (int)mh$.invokeExact(hwo, dwPitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPlaybackRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetPlaybackRate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static FunctionDescriptor waveOutGetPlaybackRate$descriptor() {
        return waveOutGetPlaybackRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static MethodHandle waveOutGetPlaybackRate$handle() {
        return waveOutGetPlaybackRate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static int waveOutGetPlaybackRate(MemorySegment hwo, MemorySegment pdwRate) {
        var mh$ = waveOutGetPlaybackRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPlaybackRate", hwo, pdwRate);
            }
            return (int)mh$.invokeExact(hwo, pdwRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetPlaybackRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutSetPlaybackRate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static FunctionDescriptor waveOutSetPlaybackRate$descriptor() {
        return waveOutSetPlaybackRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static MethodHandle waveOutSetPlaybackRate$handle() {
        return waveOutSetPlaybackRate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static int waveOutSetPlaybackRate(MemorySegment hwo, int dwRate) {
        var mh$ = waveOutSetPlaybackRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetPlaybackRate", hwo, dwRate);
            }
            return (int)mh$.invokeExact(hwo, dwRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutGetID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor waveOutGetID$descriptor() {
        return waveOutGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle waveOutGetID$handle() {
        return waveOutGetID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static int waveOutGetID(MemorySegment hwo, MemorySegment puDeviceID) {
        var mh$ = waveOutGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetID", hwo, puDeviceID);
            }
            return (int)mh$.invokeExact(hwo, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveOutMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor waveOutMessage$descriptor() {
        return waveOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle waveOutMessage$handle() {
        return waveOutMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int waveOutMessage(MemorySegment hwo, int uMsg, long dw1, long dw2) {
        var mh$ = waveOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutMessage", hwo, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hwo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static FunctionDescriptor waveInGetNumDevs$descriptor() {
        return waveInGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static MethodHandle waveInGetNumDevs$handle() {
        return waveInGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static int waveInGetNumDevs() {
        var mh$ = waveInGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static FunctionDescriptor waveInGetDevCapsA$descriptor() {
        return waveInGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static MethodHandle waveInGetDevCapsA$handle() {
        return waveInGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static int waveInGetDevCapsA(long uDeviceID, MemorySegment pwic, int cbwic) {
        var mh$ = waveInGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetDevCapsA", uDeviceID, pwic, cbwic);
            }
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static FunctionDescriptor waveInGetDevCapsW$descriptor() {
        return waveInGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static MethodHandle waveInGetDevCapsW$handle() {
        return waveInGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static int waveInGetDevCapsW(long uDeviceID, MemorySegment pwic, int cbwic) {
        var mh$ = waveInGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetDevCapsW", uDeviceID, pwic, cbwic);
            }
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetErrorTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveInGetErrorTextA$descriptor() {
        return waveInGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveInGetErrorTextA$handle() {
        return waveInGetErrorTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int waveInGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveInGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetErrorTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveInGetErrorTextW$descriptor() {
        return waveInGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveInGetErrorTextW$handle() {
        return waveInGetErrorTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int waveInGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveInGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor waveInOpen$descriptor() {
        return waveInOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle waveInOpen$handle() {
        return waveInOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int waveInOpen(MemorySegment phwi, int uDeviceID, MemorySegment pwfx, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = waveInOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInOpen", phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInClose$descriptor() {
        return waveInClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInClose$handle() {
        return waveInClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static int waveInClose(MemorySegment hwi) {
        var mh$ = waveInClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInClose", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInPrepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInPrepareHeader$descriptor() {
        return waveInPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInPrepareHeader$handle() {
        return waveInPrepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInPrepareHeader(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInPrepareHeader", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInUnprepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInUnprepareHeader$descriptor() {
        return waveInUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInUnprepareHeader$handle() {
        return waveInUnprepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInUnprepareHeader(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInUnprepareHeader", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInAddBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInAddBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInAddBuffer$descriptor() {
        return waveInAddBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInAddBuffer$handle() {
        return waveInAddBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInAddBuffer(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInAddBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInAddBuffer", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInStart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInStart$descriptor() {
        return waveInStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInStart$handle() {
        return waveInStart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static int waveInStart(MemorySegment hwi) {
        var mh$ = waveInStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInStart", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInStop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInStop$descriptor() {
        return waveInStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInStop$handle() {
        return waveInStop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static int waveInStop(MemorySegment hwi) {
        var mh$ = waveInStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInStop", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInReset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInReset$descriptor() {
        return waveInReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInReset$handle() {
        return waveInReset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static int waveInReset(MemorySegment hwi) {
        var mh$ = waveInReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInReset", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor waveInGetPosition$descriptor() {
        return waveInGetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle waveInGetPosition$handle() {
        return waveInGetPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int waveInGetPosition(MemorySegment hwi, MemorySegment pmmt, int cbmmt) {
        var mh$ = waveInGetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetPosition", hwi, pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hwi, pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInGetID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor waveInGetID$descriptor() {
        return waveInGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle waveInGetID$handle() {
        return waveInGetID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static int waveInGetID(MemorySegment hwi, MemorySegment puDeviceID) {
        var mh$ = waveInGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetID", hwi, puDeviceID);
            }
            return (int)mh$.invokeExact(hwi, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("waveInMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor waveInMessage$descriptor() {
        return waveInMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle waveInMessage$handle() {
        return waveInMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int waveInMessage(MemorySegment hwi, int uMsg, long dw1, long dw2) {
        var mh$ = waveInMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInMessage", hwi, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hwi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HMIDI__ {
     *     int unused;
     * } *HMIDI
     * }
     */
    public static final AddressLayout HMIDI = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDIIN__ {
     *     int unused;
     * } *HMIDIIN
     * }
     */
    public static final AddressLayout HMIDIIN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDIOUT__ {
     *     int unused;
     * } *HMIDIOUT
     * }
     */
    public static final AddressLayout HMIDIOUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDISTRM__ {
     *     int unused;
     * } *HMIDISTRM
     * }
     */
    public static final AddressLayout HMIDISTRM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDI *LPHMIDI
     * }
     */
    public static final AddressLayout LPHMIDI = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDIIN *LPHMIDIIN
     * }
     */
    public static final AddressLayout LPHMIDIIN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDIOUT *LPHMIDIOUT
     * }
     */
    public static final AddressLayout LPHMIDIOUT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDISTRM *LPHMIDISTRM
     * }
     */
    public static final AddressLayout LPHMIDISTRM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD *LPPATCHARRAY
     * }
     */
    public static final AddressLayout LPPATCHARRAY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD *LPKEYARRAY
     * }
     */
    public static final AddressLayout LPKEYARRAY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *PMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout PMIDIOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *NPMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *LPMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *PMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout PMIDIOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *NPMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *LPMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIOUTCAPSA PMIDIOUTCAPS
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *PMIDIINCAPSA
     * }
     */
    public static final AddressLayout PMIDIINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *NPMIDIINCAPSA
     * }
     */
    public static final AddressLayout NPMIDIINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *LPMIDIINCAPSA
     * }
     */
    public static final AddressLayout LPMIDIINCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *PMIDIINCAPSW
     * }
     */
    public static final AddressLayout PMIDIINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *NPMIDIINCAPSW
     * }
     */
    public static final AddressLayout NPMIDIINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *LPMIDIINCAPSW
     * }
     */
    public static final AddressLayout LPMIDIINCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIINCAPSA PMIDIINCAPS
     * }
     */
    public static final AddressLayout PMIDIINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIINCAPSA NPMIDIINCAPS
     * }
     */
    public static final AddressLayout NPMIDIINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIINCAPSA LPMIDIINCAPS
     * }
     */
    public static final AddressLayout LPMIDIINCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIINCAPS2A
     * }
     */
    public static final AddressLayout PMIDIINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIINCAPS2A
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIINCAPS2A
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIINCAPS2W
     * }
     */
    public static final AddressLayout PMIDIINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIINCAPS2W
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIINCAPS2W
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIINCAPS2A PMIDIINCAPS2
     * }
     */
    public static final AddressLayout PMIDIINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIINCAPS2A NPMIDIINCAPS2
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIINCAPS2A LPMIDIINCAPS2
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *PMIDIHDR
     * }
     */
    public static final AddressLayout PMIDIHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *NPMIDIHDR
     * }
     */
    public static final AddressLayout NPMIDIHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *LPMIDIHDR
     * }
     */
    public static final AddressLayout LPMIDIHDR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midiproptimediv_tag {
     *     DWORD cbStruct;
     *     DWORD dwTimeDiv;
     * } *LPMIDIPROPTIMEDIV
     * }
     */
    public static final AddressLayout LPMIDIPROPTIMEDIV = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midiproptempo_tag {
     *     DWORD cbStruct;
     *     DWORD dwTempo;
     * } *LPMIDIPROPTEMPO
     * }
     */
    public static final AddressLayout LPMIDIPROPTEMPO = C_POINTER;

    private static class midiOutGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static FunctionDescriptor midiOutGetNumDevs$descriptor() {
        return midiOutGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static MethodHandle midiOutGetNumDevs$handle() {
        return midiOutGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static int midiOutGetNumDevs() {
        var mh$ = midiOutGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiStreamOpen$descriptor() {
        return midiStreamOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiStreamOpen$handle() {
        return midiStreamOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiStreamOpen(MemorySegment phms, MemorySegment puDeviceID, int cMidi, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiStreamOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamOpen", phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamClose$descriptor() {
        return midiStreamClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamClose$handle() {
        return midiStreamClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static int midiStreamClose(MemorySegment hms) {
        var mh$ = midiStreamClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamClose", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static FunctionDescriptor midiStreamProperty$descriptor() {
        return midiStreamProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static MethodHandle midiStreamProperty$handle() {
        return midiStreamProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static int midiStreamProperty(MemorySegment hms, MemorySegment lppropdata, int dwProperty) {
        var mh$ = midiStreamProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamProperty", hms, lppropdata, dwProperty);
            }
            return (int)mh$.invokeExact(hms, lppropdata, dwProperty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamPosition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor midiStreamPosition$descriptor() {
        return midiStreamPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle midiStreamPosition$handle() {
        return midiStreamPosition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static int midiStreamPosition(MemorySegment hms, MemorySegment lpmmt, int cbmmt) {
        var mh$ = midiStreamPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamPosition", hms, lpmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hms, lpmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamOut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamOut"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiStreamOut$descriptor() {
        return midiStreamOut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiStreamOut$handle() {
        return midiStreamOut.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiStreamOut(MemorySegment hms, MemorySegment pmh, int cbmh) {
        var mh$ = midiStreamOut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamOut", hms, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hms, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamPause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamPause"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamPause$descriptor() {
        return midiStreamPause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamPause$handle() {
        return midiStreamPause.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static int midiStreamPause(MemorySegment hms) {
        var mh$ = midiStreamPause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamPause", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamRestart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamRestart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamRestart$descriptor() {
        return midiStreamRestart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamRestart$handle() {
        return midiStreamRestart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static int midiStreamRestart(MemorySegment hms) {
        var mh$ = midiStreamRestart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamRestart", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiStreamStop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamStop$descriptor() {
        return midiStreamStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamStop$handle() {
        return midiStreamStop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static int midiStreamStop(MemorySegment hms) {
        var mh$ = midiStreamStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamStop", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiConnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiConnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor midiConnect$descriptor() {
        return midiConnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MethodHandle midiConnect$handle() {
        return midiConnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static int midiConnect(MemorySegment hmi, MemorySegment hmo, MemorySegment pReserved) {
        var mh$ = midiConnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiConnect", hmi, hmo, pReserved);
            }
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiDisconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor midiDisconnect$descriptor() {
        return midiDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MethodHandle midiDisconnect$handle() {
        return midiDisconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static int midiDisconnect(MemorySegment hmi, MemorySegment hmo, MemorySegment pReserved) {
        var mh$ = midiDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiDisconnect", hmi, hmo, pReserved);
            }
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static FunctionDescriptor midiOutGetDevCapsA$descriptor() {
        return midiOutGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static MethodHandle midiOutGetDevCapsA$handle() {
        return midiOutGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static int midiOutGetDevCapsA(long uDeviceID, MemorySegment pmoc, int cbmoc) {
        var mh$ = midiOutGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetDevCapsA", uDeviceID, pmoc, cbmoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static FunctionDescriptor midiOutGetDevCapsW$descriptor() {
        return midiOutGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static MethodHandle midiOutGetDevCapsW$handle() {
        return midiOutGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static int midiOutGetDevCapsW(long uDeviceID, MemorySegment pmoc, int cbmoc) {
        var mh$ = midiOutGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetDevCapsW", uDeviceID, pmoc, cbmoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor midiOutGetVolume$descriptor() {
        return midiOutGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle midiOutGetVolume$handle() {
        return midiOutGetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static int midiOutGetVolume(MemorySegment hmo, MemorySegment pdwVolume) {
        var mh$ = midiOutGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetVolume", hmo, pdwVolume);
            }
            return (int)mh$.invokeExact(hmo, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutSetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor midiOutSetVolume$descriptor() {
        return midiOutSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static MethodHandle midiOutSetVolume$handle() {
        return midiOutSetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static int midiOutSetVolume(MemorySegment hmo, int dwVolume) {
        var mh$ = midiOutSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutSetVolume", hmo, dwVolume);
            }
            return (int)mh$.invokeExact(hmo, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetErrorTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiOutGetErrorTextA$descriptor() {
        return midiOutGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiOutGetErrorTextA$handle() {
        return midiOutGetErrorTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int midiOutGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiOutGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetErrorTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiOutGetErrorTextW$descriptor() {
        return midiOutGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiOutGetErrorTextW$handle() {
        return midiOutGetErrorTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int midiOutGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiOutGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiOutOpen$descriptor() {
        return midiOutOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiOutOpen$handle() {
        return midiOutOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiOutOpen(MemorySegment phmo, int uDeviceID, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiOutOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutOpen", phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static FunctionDescriptor midiOutClose$descriptor() {
        return midiOutClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static MethodHandle midiOutClose$handle() {
        return midiOutClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static int midiOutClose(MemorySegment hmo) {
        var mh$ = midiOutClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutClose", hmo);
            }
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutPrepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutPrepareHeader$descriptor() {
        return midiOutPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutPrepareHeader$handle() {
        return midiOutPrepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutPrepareHeader(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutPrepareHeader", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutUnprepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutUnprepareHeader$descriptor() {
        return midiOutUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutUnprepareHeader$handle() {
        return midiOutUnprepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutUnprepareHeader(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutUnprepareHeader", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutShortMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutShortMsg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static FunctionDescriptor midiOutShortMsg$descriptor() {
        return midiOutShortMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static MethodHandle midiOutShortMsg$handle() {
        return midiOutShortMsg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static int midiOutShortMsg(MemorySegment hmo, int dwMsg) {
        var mh$ = midiOutShortMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutShortMsg", hmo, dwMsg);
            }
            return (int)mh$.invokeExact(hmo, dwMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutLongMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutLongMsg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutLongMsg$descriptor() {
        return midiOutLongMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutLongMsg$handle() {
        return midiOutLongMsg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutLongMsg(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutLongMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutLongMsg", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutReset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static FunctionDescriptor midiOutReset$descriptor() {
        return midiOutReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static MethodHandle midiOutReset$handle() {
        return midiOutReset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static int midiOutReset(MemorySegment hmo) {
        var mh$ = midiOutReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutReset", hmo);
            }
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutCachePatches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutCachePatches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static FunctionDescriptor midiOutCachePatches$descriptor() {
        return midiOutCachePatches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static MethodHandle midiOutCachePatches$handle() {
        return midiOutCachePatches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static int midiOutCachePatches(MemorySegment hmo, int uBank, MemorySegment pwpa, int fuCache) {
        var mh$ = midiOutCachePatches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutCachePatches", hmo, uBank, pwpa, fuCache);
            }
            return (int)mh$.invokeExact(hmo, uBank, pwpa, fuCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutCacheDrumPatches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutCacheDrumPatches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static FunctionDescriptor midiOutCacheDrumPatches$descriptor() {
        return midiOutCacheDrumPatches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static MethodHandle midiOutCacheDrumPatches$handle() {
        return midiOutCacheDrumPatches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static int midiOutCacheDrumPatches(MemorySegment hmo, int uPatch, MemorySegment pwkya, int fuCache) {
        var mh$ = midiOutCacheDrumPatches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutCacheDrumPatches", hmo, uPatch, pwkya, fuCache);
            }
            return (int)mh$.invokeExact(hmo, uPatch, pwkya, fuCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutGetID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor midiOutGetID$descriptor() {
        return midiOutGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle midiOutGetID$handle() {
        return midiOutGetID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static int midiOutGetID(MemorySegment hmo, MemorySegment puDeviceID) {
        var mh$ = midiOutGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetID", hmo, puDeviceID);
            }
            return (int)mh$.invokeExact(hmo, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiOutMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor midiOutMessage$descriptor() {
        return midiOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle midiOutMessage$handle() {
        return midiOutMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int midiOutMessage(MemorySegment hmo, int uMsg, long dw1, long dw2) {
        var mh$ = midiOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutMessage", hmo, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hmo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static FunctionDescriptor midiInGetNumDevs$descriptor() {
        return midiInGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static MethodHandle midiInGetNumDevs$handle() {
        return midiInGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static int midiInGetNumDevs() {
        var mh$ = midiInGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static FunctionDescriptor midiInGetDevCapsA$descriptor() {
        return midiInGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static MethodHandle midiInGetDevCapsA$handle() {
        return midiInGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static int midiInGetDevCapsA(long uDeviceID, MemorySegment pmic, int cbmic) {
        var mh$ = midiInGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetDevCapsA", uDeviceID, pmic, cbmic);
            }
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static FunctionDescriptor midiInGetDevCapsW$descriptor() {
        return midiInGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static MethodHandle midiInGetDevCapsW$handle() {
        return midiInGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static int midiInGetDevCapsW(long uDeviceID, MemorySegment pmic, int cbmic) {
        var mh$ = midiInGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetDevCapsW", uDeviceID, pmic, cbmic);
            }
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetErrorTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiInGetErrorTextA$descriptor() {
        return midiInGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiInGetErrorTextA$handle() {
        return midiInGetErrorTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int midiInGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiInGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetErrorTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiInGetErrorTextW$descriptor() {
        return midiInGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiInGetErrorTextW$handle() {
        return midiInGetErrorTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int midiInGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiInGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiInOpen$descriptor() {
        return midiInOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiInOpen$handle() {
        return midiInOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiInOpen(MemorySegment phmi, int uDeviceID, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiInOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInOpen", phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInClose$descriptor() {
        return midiInClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInClose$handle() {
        return midiInClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static int midiInClose(MemorySegment hmi) {
        var mh$ = midiInClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInClose", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInPrepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInPrepareHeader$descriptor() {
        return midiInPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInPrepareHeader$handle() {
        return midiInPrepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInPrepareHeader(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInPrepareHeader", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInUnprepareHeader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInUnprepareHeader$descriptor() {
        return midiInUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInUnprepareHeader$handle() {
        return midiInUnprepareHeader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInUnprepareHeader(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInUnprepareHeader", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInAddBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInAddBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInAddBuffer$descriptor() {
        return midiInAddBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInAddBuffer$handle() {
        return midiInAddBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInAddBuffer(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInAddBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInAddBuffer", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInStart"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInStart$descriptor() {
        return midiInStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInStart$handle() {
        return midiInStart.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static int midiInStart(MemorySegment hmi) {
        var mh$ = midiInStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInStart", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInStop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInStop$descriptor() {
        return midiInStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInStop$handle() {
        return midiInStop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static int midiInStop(MemorySegment hmi) {
        var mh$ = midiInStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInStop", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInReset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInReset$descriptor() {
        return midiInReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInReset$handle() {
        return midiInReset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static int midiInReset(MemorySegment hmi) {
        var mh$ = midiInReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInReset", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInGetID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor midiInGetID$descriptor() {
        return midiInGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle midiInGetID$handle() {
        return midiInGetID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static int midiInGetID(MemorySegment hmi, MemorySegment puDeviceID) {
        var mh$ = midiInGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetID", hmi, puDeviceID);
            }
            return (int)mh$.invokeExact(hmi, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("midiInMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor midiInMessage$descriptor() {
        return midiInMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle midiInMessage$handle() {
        return midiInMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int midiInMessage(MemorySegment hmi, int uMsg, long dw1, long dw2) {
        var mh$ = midiInMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInMessage", hmi, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hmi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PAUXCAPSA
     * }
     */
    public static final AddressLayout PAUXCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPAUXCAPSA
     * }
     */
    public static final AddressLayout NPAUXCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPAUXCAPSA
     * }
     */
    public static final AddressLayout LPAUXCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PAUXCAPSW
     * }
     */
    public static final AddressLayout PAUXCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPAUXCAPSW
     * }
     */
    public static final AddressLayout NPAUXCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPAUXCAPSW
     * }
     */
    public static final AddressLayout LPAUXCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PAUXCAPSA PAUXCAPS
     * }
     */
    public static final AddressLayout PAUXCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPAUXCAPSA NPAUXCAPS
     * }
     */
    public static final AddressLayout NPAUXCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPAUXCAPSA LPAUXCAPS
     * }
     */
    public static final AddressLayout LPAUXCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PAUXCAPS2A
     * }
     */
    public static final AddressLayout PAUXCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPAUXCAPS2A
     * }
     */
    public static final AddressLayout NPAUXCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPAUXCAPS2A
     * }
     */
    public static final AddressLayout LPAUXCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PAUXCAPS2W
     * }
     */
    public static final AddressLayout PAUXCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPAUXCAPS2W
     * }
     */
    public static final AddressLayout NPAUXCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPAUXCAPS2W
     * }
     */
    public static final AddressLayout LPAUXCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PAUXCAPS2A PAUXCAPS2
     * }
     */
    public static final AddressLayout PAUXCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPAUXCAPS2A NPAUXCAPS2
     * }
     */
    public static final AddressLayout NPAUXCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPAUXCAPS2A LPAUXCAPS2
     * }
     */
    public static final AddressLayout LPAUXCAPS2 = C_POINTER;

    private static class auxGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static FunctionDescriptor auxGetNumDevs$descriptor() {
        return auxGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static MethodHandle auxGetNumDevs$handle() {
        return auxGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static int auxGetNumDevs() {
        var mh$ = auxGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static FunctionDescriptor auxGetDevCapsA$descriptor() {
        return auxGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static MethodHandle auxGetDevCapsA$handle() {
        return auxGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static int auxGetDevCapsA(long uDeviceID, MemorySegment pac, int cbac) {
        var mh$ = auxGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetDevCapsA", uDeviceID, pac, cbac);
            }
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static FunctionDescriptor auxGetDevCapsW$descriptor() {
        return auxGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static MethodHandle auxGetDevCapsW$handle() {
        return auxGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static int auxGetDevCapsW(long uDeviceID, MemorySegment pac, int cbac) {
        var mh$ = auxGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetDevCapsW", uDeviceID, pac, cbac);
            }
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxSetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor auxSetVolume$descriptor() {
        return auxSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static MethodHandle auxSetVolume$handle() {
        return auxSetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static int auxSetVolume(int uDeviceID, int dwVolume) {
        var mh$ = auxSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxSetVolume", uDeviceID, dwVolume);
            }
            return (int)mh$.invokeExact(uDeviceID, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxGetVolume"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor auxGetVolume$descriptor() {
        return auxGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle auxGetVolume$handle() {
        return auxGetVolume.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static int auxGetVolume(int uDeviceID, MemorySegment pdwVolume) {
        var mh$ = auxGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetVolume", uDeviceID, pdwVolume);
            }
            return (int)mh$.invokeExact(uDeviceID, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("auxOutMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor auxOutMessage$descriptor() {
        return auxOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle auxOutMessage$handle() {
        return auxOutMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int auxOutMessage(int uDeviceID, int uMsg, long dw1, long dw2) {
        var mh$ = auxOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxOutMessage", uDeviceID, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(uDeviceID, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HMIXEROBJ__ {
     *     int unused;
     * } *HMIXEROBJ
     * }
     */
    public static final AddressLayout HMIXEROBJ = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIXEROBJ *LPHMIXEROBJ
     * }
     */
    public static final AddressLayout LPHMIXEROBJ = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIXER__ {
     *     int unused;
     * } *HMIXER
     * }
     */
    public static final AddressLayout HMIXER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIXER *LPHMIXER
     * }
     */
    public static final AddressLayout LPHMIXER = C_POINTER;

    private static class mixerGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static FunctionDescriptor mixerGetNumDevs$descriptor() {
        return mixerGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static MethodHandle mixerGetNumDevs$handle() {
        return mixerGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static int mixerGetNumDevs() {
        var mh$ = mixerGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *PMIXERCAPSA
     * }
     */
    public static final AddressLayout PMIXERCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *LPMIXERCAPSA
     * }
     */
    public static final AddressLayout LPMIXERCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *PMIXERCAPSW
     * }
     */
    public static final AddressLayout PMIXERCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *LPMIXERCAPSW
     * }
     */
    public static final AddressLayout LPMIXERCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCAPSA PMIXERCAPS
     * }
     */
    public static final AddressLayout PMIXERCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCAPSA LPMIXERCAPS
     * }
     */
    public static final AddressLayout LPMIXERCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIXERCAPS2A
     * }
     */
    public static final AddressLayout PMIXERCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIXERCAPS2A
     * }
     */
    public static final AddressLayout LPMIXERCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIXERCAPS2W
     * }
     */
    public static final AddressLayout PMIXERCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIXERCAPS2W
     * }
     */
    public static final AddressLayout LPMIXERCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCAPS2A PMIXERCAPS2
     * }
     */
    public static final AddressLayout PMIXERCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCAPS2A LPMIXERCAPS2
     * }
     */
    public static final AddressLayout LPMIXERCAPS2 = C_POINTER;

    private static class mixerGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static FunctionDescriptor mixerGetDevCapsA$descriptor() {
        return mixerGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MethodHandle mixerGetDevCapsA$handle() {
        return mixerGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static int mixerGetDevCapsA(long uMxId, MemorySegment pmxcaps, int cbmxcaps) {
        var mh$ = mixerGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetDevCapsA", uMxId, pmxcaps, cbmxcaps);
            }
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static FunctionDescriptor mixerGetDevCapsW$descriptor() {
        return mixerGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MethodHandle mixerGetDevCapsW$handle() {
        return mixerGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static int mixerGetDevCapsW(long uMxId, MemorySegment pmxcaps, int cbmxcaps) {
        var mh$ = mixerGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetDevCapsW", uMxId, pmxcaps, cbmxcaps);
            }
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerOpen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mixerOpen$descriptor() {
        return mixerOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mixerOpen$handle() {
        return mixerOpen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int mixerOpen(MemorySegment phmx, int uMxId, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = mixerOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerOpen", phmx, uMxId, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmx, uMxId, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static FunctionDescriptor mixerClose$descriptor() {
        return mixerClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static MethodHandle mixerClose$handle() {
        return mixerClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static int mixerClose(MemorySegment hmx) {
        var mh$ = mixerClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerClose", hmx);
            }
            return (int)mh$.invokeExact(hmx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerMessage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor mixerMessage$descriptor() {
        return mixerMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle mixerMessage$handle() {
        return mixerMessage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int mixerMessage(MemorySegment hmx, int uMsg, long dwParam1, long dwParam2) {
        var mh$ = mixerMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerMessage", hmx, uMsg, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(hmx, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEA {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         CHAR szPname[32];
     *     } Target;
     * } *PMIXERLINEA
     * }
     */
    public static final AddressLayout PMIXERLINEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEA {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         CHAR szPname[32];
     *     } Target;
     * } *LPMIXERLINEA
     * }
     */
    public static final AddressLayout LPMIXERLINEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEW {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         WCHAR szPname[32];
     *     } Target;
     * } *PMIXERLINEW
     * }
     */
    public static final AddressLayout PMIXERLINEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEW {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         WCHAR szPname[32];
     *     } Target;
     * } *LPMIXERLINEW
     * }
     */
    public static final AddressLayout LPMIXERLINEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERLINEA PMIXERLINE
     * }
     */
    public static final AddressLayout PMIXERLINE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERLINEA LPMIXERLINE
     * }
     */
    public static final AddressLayout LPMIXERLINE = C_POINTER;

    private static class mixerGetLineInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetLineInfoA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static FunctionDescriptor mixerGetLineInfoA$descriptor() {
        return mixerGetLineInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static MethodHandle mixerGetLineInfoA$handle() {
        return mixerGetLineInfoA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static int mixerGetLineInfoA(MemorySegment hmxobj, MemorySegment pmxl, int fdwInfo) {
        var mh$ = mixerGetLineInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineInfoA", hmxobj, pmxl, fdwInfo);
            }
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetLineInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetLineInfoW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static FunctionDescriptor mixerGetLineInfoW$descriptor() {
        return mixerGetLineInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static MethodHandle mixerGetLineInfoW$handle() {
        return mixerGetLineInfoW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static int mixerGetLineInfoW(MemorySegment hmxobj, MemorySegment pmxl, int fdwInfo) {
        var mh$ = mixerGetLineInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineInfoW", hmxobj, pmxl, fdwInfo);
            }
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static FunctionDescriptor mixerGetID$descriptor() {
        return mixerGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static MethodHandle mixerGetID$handle() {
        return mixerGetID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static int mixerGetID(MemorySegment hmxobj, MemorySegment puMxId, int fdwId) {
        var mh$ = mixerGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetID", hmxobj, puMxId, fdwId);
            }
            return (int)mh$.invokeExact(hmxobj, puMxId, fdwId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLA {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *PMIXERCONTROLA
     * }
     */
    public static final AddressLayout PMIXERCONTROLA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLA {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *LPMIXERCONTROLA
     * }
     */
    public static final AddressLayout LPMIXERCONTROLA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLW {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *PMIXERCONTROLW
     * }
     */
    public static final AddressLayout PMIXERCONTROLW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLW {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *LPMIXERCONTROLW
     * }
     */
    public static final AddressLayout LPMIXERCONTROLW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCONTROLA PMIXERCONTROL
     * }
     */
    public static final AddressLayout PMIXERCONTROL = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCONTROLA LPMIXERCONTROL
     * }
     */
    public static final AddressLayout LPMIXERCONTROL = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSA {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLA pamxctrl;
     * } *PMIXERLINECONTROLSA
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSA {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLA pamxctrl;
     * } *LPMIXERLINECONTROLSA
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSW {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLW pamxctrl;
     * } *PMIXERLINECONTROLSW
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSW {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLW pamxctrl;
     * } *LPMIXERLINECONTROLSW
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLS = C_POINTER;

    private static class mixerGetLineControlsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetLineControlsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static FunctionDescriptor mixerGetLineControlsA$descriptor() {
        return mixerGetLineControlsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static MethodHandle mixerGetLineControlsA$handle() {
        return mixerGetLineControlsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static int mixerGetLineControlsA(MemorySegment hmxobj, MemorySegment pmxlc, int fdwControls) {
        var mh$ = mixerGetLineControlsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineControlsA", hmxobj, pmxlc, fdwControls);
            }
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetLineControlsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetLineControlsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static FunctionDescriptor mixerGetLineControlsW$descriptor() {
        return mixerGetLineControlsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static MethodHandle mixerGetLineControlsW$handle() {
        return mixerGetLineControlsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static int mixerGetLineControlsW(MemorySegment hmxobj, MemorySegment pmxlc, int fdwControls) {
        var mh$ = mixerGetLineControlsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineControlsW", hmxobj, pmxlc, fdwControls);
            }
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD cChannels;
     *     union {
     *         HWND hwndOwner;
     *         DWORD cMultipleItems;
     *     };
     *     DWORD cbDetails;
     *     LPVOID paDetails;
     * } *PMIXERCONTROLDETAILS
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD cChannels;
     *     union {
     *         HWND hwndOwner;
     *         DWORD cMultipleItems;
     *     };
     *     DWORD cbDetails;
     *     LPVOID paDetails;
     * } *LPMIXERCONTROLDETAILS
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     CHAR szName[64];
     * } *PMIXERCONTROLDETAILS_LISTTEXTA
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     CHAR szName[64];
     * } *LPMIXERCONTROLDETAILS_LISTTEXTA
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     WCHAR szName[64];
     * } *PMIXERCONTROLDETAILS_LISTTEXTW
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     WCHAR szName[64];
     * } *LPMIXERCONTROLDETAILS_LISTTEXTW
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
     *     LONG fValue;
     * } *PMIXERCONTROLDETAILS_BOOLEAN
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_BOOLEAN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
     *     LONG fValue;
     * } *LPMIXERCONTROLDETAILS_BOOLEAN
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_BOOLEAN = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_SIGNED {
     *     LONG lValue;
     * } *PMIXERCONTROLDETAILS_SIGNED
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_SIGNED = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_SIGNED {
     *     LONG lValue;
     * } *LPMIXERCONTROLDETAILS_SIGNED
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_SIGNED = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
     *     DWORD dwValue;
     * } *PMIXERCONTROLDETAILS_UNSIGNED
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_UNSIGNED = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
     *     DWORD dwValue;
     * } *LPMIXERCONTROLDETAILS_UNSIGNED
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_UNSIGNED = C_POINTER;

    private static class mixerGetControlDetailsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetControlDetailsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerGetControlDetailsA$descriptor() {
        return mixerGetControlDetailsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerGetControlDetailsA$handle() {
        return mixerGetControlDetailsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerGetControlDetailsA(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerGetControlDetailsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetControlDetailsA", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetControlDetailsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerGetControlDetailsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerGetControlDetailsW$descriptor() {
        return mixerGetControlDetailsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerGetControlDetailsW$handle() {
        return mixerGetControlDetailsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerGetControlDetailsW(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerGetControlDetailsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetControlDetailsW", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerSetControlDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("mixerSetControlDetails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerSetControlDetails$descriptor() {
        return mixerSetControlDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerSetControlDetails$handle() {
        return mixerSetControlDetails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerSetControlDetails(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerSetControlDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerSetControlDetails", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *PTIMECAPS
     * }
     */
    public static final AddressLayout PTIMECAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *NPTIMECAPS
     * }
     */
    public static final AddressLayout NPTIMECAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *LPTIMECAPS
     * }
     */
    public static final AddressLayout LPTIMECAPS = C_POINTER;

    private static class timeGetSystemTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeGetSystemTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor timeGetSystemTime$descriptor() {
        return timeGetSystemTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle timeGetSystemTime$handle() {
        return timeGetSystemTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int timeGetSystemTime(MemorySegment pmmt, int cbmmt) {
        var mh$ = timeGetSystemTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetSystemTime", pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeGetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeGetTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static FunctionDescriptor timeGetTime$descriptor() {
        return timeGetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static MethodHandle timeGetTime$handle() {
        return timeGetTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static int timeGetTime() {
        var mh$ = timeGetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetTime");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeGetDevCaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeGetDevCaps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static FunctionDescriptor timeGetDevCaps$descriptor() {
        return timeGetDevCaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static MethodHandle timeGetDevCaps$handle() {
        return timeGetDevCaps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static int timeGetDevCaps(MemorySegment ptc, int cbtc) {
        var mh$ = timeGetDevCaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetDevCaps", ptc, cbtc);
            }
            return (int)mh$.invokeExact(ptc, cbtc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeBeginPeriod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeBeginPeriod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static FunctionDescriptor timeBeginPeriod$descriptor() {
        return timeBeginPeriod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static MethodHandle timeBeginPeriod$handle() {
        return timeBeginPeriod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static int timeBeginPeriod(int uPeriod) {
        var mh$ = timeBeginPeriod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeBeginPeriod", uPeriod);
            }
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeEndPeriod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("timeEndPeriod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static FunctionDescriptor timeEndPeriod$descriptor() {
        return timeEndPeriod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static MethodHandle timeEndPeriod$handle() {
        return timeEndPeriod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static int timeEndPeriod(int uPeriod) {
        var mh$ = timeEndPeriod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeEndPeriod", uPeriod);
            }
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *PJOYCAPSA
     * }
     */
    public static final AddressLayout PJOYCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *NPJOYCAPSA
     * }
     */
    public static final AddressLayout NPJOYCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *LPJOYCAPSA
     * }
     */
    public static final AddressLayout LPJOYCAPSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *PJOYCAPSW
     * }
     */
    public static final AddressLayout PJOYCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *NPJOYCAPSW
     * }
     */
    public static final AddressLayout NPJOYCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *LPJOYCAPSW
     * }
     */
    public static final AddressLayout LPJOYCAPSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOYCAPSA PJOYCAPS
     * }
     */
    public static final AddressLayout PJOYCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPSA NPJOYCAPS
     * }
     */
    public static final AddressLayout NPJOYCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPSA LPJOYCAPS
     * }
     */
    public static final AddressLayout LPJOYCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2A
     * }
     */
    public static final AddressLayout PJOYCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2A
     * }
     */
    public static final AddressLayout NPJOYCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2A
     * }
     */
    public static final AddressLayout LPJOYCAPS2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2W
     * }
     */
    public static final AddressLayout PJOYCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2W
     * }
     */
    public static final AddressLayout NPJOYCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2W
     * }
     */
    public static final AddressLayout LPJOYCAPS2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOYCAPS2A PJOYCAPS2
     * }
     */
    public static final AddressLayout PJOYCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPS2A NPJOYCAPS2
     * }
     */
    public static final AddressLayout NPJOYCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPS2A LPJOYCAPS2
     * }
     */
    public static final AddressLayout LPJOYCAPS2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *PJOYINFO
     * }
     */
    public static final AddressLayout PJOYINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *NPJOYINFO
     * }
     */
    public static final AddressLayout NPJOYINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *LPJOYINFO
     * }
     */
    public static final AddressLayout LPJOYINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *PJOYINFOEX
     * }
     */
    public static final AddressLayout PJOYINFOEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *NPJOYINFOEX
     * }
     */
    public static final AddressLayout NPJOYINFOEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *LPJOYINFOEX
     * }
     */
    public static final AddressLayout LPJOYINFOEX = C_POINTER;

    private static class joyGetPosEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetPosEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static FunctionDescriptor joyGetPosEx$descriptor() {
        return joyGetPosEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static MethodHandle joyGetPosEx$handle() {
        return joyGetPosEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static int joyGetPosEx(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPosEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPosEx", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetNumDevs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static FunctionDescriptor joyGetNumDevs$descriptor() {
        return joyGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static MethodHandle joyGetNumDevs$handle() {
        return joyGetNumDevs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static int joyGetNumDevs() {
        var mh$ = joyGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetDevCapsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsA$descriptor() {
        return joyGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsA$handle() {
        return joyGetDevCapsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsA(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsA", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetDevCapsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsW$descriptor() {
        return joyGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsW$handle() {
        return joyGetDevCapsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsW(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsW", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetPos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static FunctionDescriptor joyGetPos$descriptor() {
        return joyGetPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static MethodHandle joyGetPos$handle() {
        return joyGetPos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static int joyGetPos(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPos", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyGetThreshold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static FunctionDescriptor joyGetThreshold$descriptor() {
        return joyGetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static MethodHandle joyGetThreshold$handle() {
        return joyGetThreshold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static int joyGetThreshold(int uJoyID, MemorySegment puThreshold) {
        var mh$ = joyGetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetThreshold", uJoyID, puThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, puThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyReleaseCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyReleaseCapture"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static FunctionDescriptor joyReleaseCapture$descriptor() {
        return joyReleaseCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static MethodHandle joyReleaseCapture$handle() {
        return joyReleaseCapture.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static int joyReleaseCapture(int uJoyID) {
        var mh$ = joyReleaseCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyReleaseCapture", uJoyID);
            }
            return (int)mh$.invokeExact(uJoyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joySetCapture"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static FunctionDescriptor joySetCapture$descriptor() {
        return joySetCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static MethodHandle joySetCapture$handle() {
        return joySetCapture.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static int joySetCapture(MemorySegment hwnd, int uJoyID, int uPeriod, int fChanged) {
        var mh$ = joySetCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetCapture", hwnd, uJoyID, uPeriod, fChanged);
            }
            return (int)mh$.invokeExact(hwnd, uJoyID, uPeriod, fChanged);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joySetThreshold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static FunctionDescriptor joySetThreshold$descriptor() {
        return joySetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static MethodHandle joySetThreshold$handle() {
        return joySetThreshold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static int joySetThreshold(int uJoyID, int uThreshold) {
        var mh$ = joySetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetThreshold", uJoyID, uThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, uThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyConfigChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("joyConfigChanged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor joyConfigChanged$descriptor() {
        return joyConfigChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static MethodHandle joyConfigChanged$handle() {
        return joyConfigChanged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static int joyConfigChanged(int dwFlags) {
        var mh$ = joyConfigChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyConfigChanged", dwFlags);
            }
            return (int)mh$.invokeExact(dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NCB {
     *     UCHAR ncb_command;
     *     UCHAR ncb_retcode;
     *     UCHAR ncb_lsn;
     *     UCHAR ncb_num;
     *     PUCHAR ncb_buffer;
     *     WORD ncb_length;
     *     UCHAR ncb_callname[16];
     *     UCHAR ncb_name[16];
     *     UCHAR ncb_rto;
     *     UCHAR ncb_sto;
     *     void (*ncb_post)(struct _NCB *) __attribute__((stdcall));
     *     UCHAR ncb_lana_num;
     *     UCHAR ncb_cmd_cplt;
     *     UCHAR ncb_reserve[18];
     *     HANDLE ncb_event;
     * } *PNCB
     * }
     */
    public static final AddressLayout PNCB = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADAPTER_STATUS {
     *     UCHAR adapter_address[6];
     *     UCHAR rev_major;
     *     UCHAR reserved0;
     *     UCHAR adapter_type;
     *     UCHAR rev_minor;
     *     WORD duration;
     *     WORD frmr_recv;
     *     WORD frmr_xmit;
     *     WORD iframe_recv_err;
     *     WORD xmit_aborts;
     *     DWORD xmit_success;
     *     DWORD recv_success;
     *     WORD iframe_xmit_err;
     *     WORD recv_buff_unavail;
     *     WORD t1_timeouts;
     *     WORD ti_timeouts;
     *     DWORD reserved1;
     *     WORD free_ncbs;
     *     WORD max_cfg_ncbs;
     *     WORD max_ncbs;
     *     WORD xmit_buf_unavail;
     *     WORD max_dgram_size;
     *     WORD pending_sess;
     *     WORD max_cfg_sess;
     *     WORD max_sess;
     *     WORD max_sess_pkt_size;
     *     WORD name_count;
     * } *PADAPTER_STATUS
     * }
     */
    public static final AddressLayout PADAPTER_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NAME_BUFFER {
     *     UCHAR name[16];
     *     UCHAR name_num;
     *     UCHAR name_flags;
     * } *PNAME_BUFFER
     * }
     */
    public static final AddressLayout PNAME_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_HEADER {
     *     UCHAR sess_name;
     *     UCHAR num_sess;
     *     UCHAR rcv_dg_outstanding;
     *     UCHAR rcv_any_outstanding;
     * } *PSESSION_HEADER
     * }
     */
    public static final AddressLayout PSESSION_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_BUFFER {
     *     UCHAR lsn;
     *     UCHAR state;
     *     UCHAR local_name[16];
     *     UCHAR remote_name[16];
     *     UCHAR rcvs_outstanding;
     *     UCHAR sends_outstanding;
     * } *PSESSION_BUFFER
     * }
     */
    public static final AddressLayout PSESSION_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LANA_ENUM {
     *     UCHAR length;
     *     UCHAR lana[255];
     * } *PLANA_ENUM
     * }
     */
    public static final AddressLayout PLANA_ENUM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_HEADER {
     *     WORD node_count;
     *     UCHAR reserved;
     *     UCHAR unique_group;
     * } *PFIND_NAME_HEADER
     * }
     */
    public static final AddressLayout PFIND_NAME_HEADER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_BUFFER {
     *     UCHAR length;
     *     UCHAR access_control;
     *     UCHAR frame_control;
     *     UCHAR destination_addr[6];
     *     UCHAR source_addr[6];
     *     UCHAR routing_info[18];
     * } *PFIND_NAME_BUFFER
     * }
     */
    public static final AddressLayout PFIND_NAME_BUFFER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTION_HEADER {
     *     ULONG transport_id;
     *     USHORT action_code;
     *     USHORT reserved;
     * } *PACTION_HEADER
     * }
     */
    public static final AddressLayout PACTION_HEADER = C_POINTER;

    private static class Netbios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("Netbios"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static FunctionDescriptor Netbios$descriptor() {
        return Netbios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static MethodHandle Netbios$handle() {
        return Netbios.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static byte Netbios(MemorySegment pncb) {
        var mh$ = Netbios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Netbios", pncb);
            }
            return (byte)mh$.invokeExact(pncb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_HANDLE
     * }
     */
    public static final AddressLayout I_RPC_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long RPC_STATUS
     * }
     */
    public static final OfInt RPC_STATUS = C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char *RPC_CSTR
     * }
     */
    public static final AddressLayout RPC_CSTR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short *RPC_WSTR
     * }
     */
    public static final AddressLayout RPC_WSTR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const unsigned short *RPC_CWSTR
     * }
     */
    public static final AddressLayout RPC_CWSTR = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE RPC_BINDING_HANDLE
     * }
     */
    public static final AddressLayout RPC_BINDING_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RPC_BINDING_HANDLE handle_t
     * }
     */
    public static final AddressLayout handle_t = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_IF_HANDLE
     * }
     */
    public static final AddressLayout RPC_IF_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_POLICY {
     *     unsigned int Length;
     *     unsigned long EndpointFlags;
     *     unsigned long NICFlags;
     * } *PRPC_POLICY
     * }
     */
    public static final AddressLayout PRPC_POLICY = C_POINTER;

    private static class RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingCopy$descriptor() {
        return RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle RpcBindingCopy$handle() {
        return RpcBindingCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFree$descriptor() {
        return RpcBindingFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFree$handle() {
        return RpcBindingFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFree(MemorySegment Binding) {
        var mh$ = RpcBindingFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFree", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetOption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingSetOption$descriptor() {
        return RpcBindingSetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle RpcBindingSetOption$handle() {
        return RpcBindingSetOption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int RpcBindingSetOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = RpcBindingSetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqOption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingInqOption$descriptor() {
        return RpcBindingInqOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static MethodHandle RpcBindingInqOption$handle() {
        return RpcBindingInqOption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static int RpcBindingInqOption(MemorySegment hBinding, int option, MemorySegment pOptionValue) {
        var mh$ = RpcBindingInqOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqOption", hBinding, option, pOptionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, pOptionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingFromStringBindingA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingA$descriptor() {
        return RpcBindingFromStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingA$handle() {
        return RpcBindingFromStringBindingA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingA(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingA", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingFromStringBindingW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingW$descriptor() {
        return RpcBindingFromStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingW$handle() {
        return RpcBindingFromStringBindingW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingW(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingW", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsGetContextBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcSsGetContextBinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcSsGetContextBinding$descriptor() {
        return RpcSsGetContextBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcSsGetContextBinding$handle() {
        return RpcSsGetContextBinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcSsGetContextBinding(MemorySegment ContextHandle, MemorySegment Binding) {
        var mh$ = RpcSsGetContextBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsGetContextBinding", ContextHandle, Binding);
            }
            return (int)mh$.invokeExact(ContextHandle, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqMaxCalls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqMaxCalls"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static FunctionDescriptor RpcBindingInqMaxCalls$descriptor() {
        return RpcBindingInqMaxCalls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static MethodHandle RpcBindingInqMaxCalls$handle() {
        return RpcBindingInqMaxCalls.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static int RpcBindingInqMaxCalls(MemorySegment Binding, MemorySegment MaxCalls) {
        var mh$ = RpcBindingInqMaxCalls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqMaxCalls", Binding, MaxCalls);
            }
            return (int)mh$.invokeExact(Binding, MaxCalls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingInqObject$descriptor() {
        return RpcBindingInqObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingInqObject$handle() {
        return RpcBindingInqObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingInqObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingInqObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingReset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingReset$descriptor() {
        return RpcBindingReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcBindingReset$handle() {
        return RpcBindingReset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcBindingReset(MemorySegment Binding) {
        var mh$ = RpcBindingReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingReset", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingSetObject$descriptor() {
        return RpcBindingSetObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingSetObject$handle() {
        return RpcBindingSetObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingSetObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingSetObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqDefaultProtectLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqDefaultProtectLevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqDefaultProtectLevel$descriptor() {
        return RpcMgmtInqDefaultProtectLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static MethodHandle RpcMgmtInqDefaultProtectLevel$handle() {
        return RpcMgmtInqDefaultProtectLevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static int RpcMgmtInqDefaultProtectLevel(int AuthnSvc, MemorySegment AuthnLevel) {
        var mh$ = RpcMgmtInqDefaultProtectLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqDefaultProtectLevel", AuthnSvc, AuthnLevel);
            }
            return (int)mh$.invokeExact(AuthnSvc, AuthnLevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingToStringBindingA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingA$descriptor() {
        return RpcBindingToStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingA$handle() {
        return RpcBindingToStringBindingA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingA(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingA", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingToStringBindingW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingW$descriptor() {
        return RpcBindingToStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingW$handle() {
        return RpcBindingToStringBindingW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingVectorFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcBindingVectorFree$descriptor() {
        return RpcBindingVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcBindingVectorFree$handle() {
        return RpcBindingVectorFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcBindingVectorFree(MemorySegment BindingVector) {
        var mh$ = RpcBindingVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingVectorFree", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringBindingComposeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeA$descriptor() {
        return RpcStringBindingComposeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeA$handle() {
        return RpcStringBindingComposeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeA(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeA", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringBindingComposeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeW$descriptor() {
        return RpcStringBindingComposeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeW$handle() {
        return RpcStringBindingComposeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeW(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeW", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringBindingParseA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseA$descriptor() {
        return RpcStringBindingParseA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseA$handle() {
        return RpcStringBindingParseA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseA(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseA", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringBindingParseW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseW$descriptor() {
        return RpcStringBindingParseW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseW$handle() {
        return RpcStringBindingParseW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseW(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseW", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringFreeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeA$descriptor() {
        return RpcStringFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeA$handle() {
        return RpcStringFreeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static int RpcStringFreeA(MemorySegment String_) {
        var mh$ = RpcStringFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeA", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcStringFreeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeW$descriptor() {
        return RpcStringFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeW$handle() {
        return RpcStringFreeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static int RpcStringFreeW(MemorySegment String_) {
        var mh$ = RpcStringFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeW", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfInqId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcIfInqId"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static FunctionDescriptor RpcIfInqId$descriptor() {
        return RpcIfInqId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static MethodHandle RpcIfInqId$handle() {
        return RpcIfInqId.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static int RpcIfInqId(MemorySegment RpcIfHandle, MemorySegment RpcIfId) {
        var mh$ = RpcIfInqId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfInqId", RpcIfHandle, RpcIfId);
            }
            return (int)mh$.invokeExact(RpcIfHandle, RpcIfId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNetworkIsProtseqValidA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidA$descriptor() {
        return RpcNetworkIsProtseqValidA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidA$handle() {
        return RpcNetworkIsProtseqValidA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidA(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidA", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNetworkIsProtseqValidW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidW$descriptor() {
        return RpcNetworkIsProtseqValidW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidW$handle() {
        return RpcNetworkIsProtseqValidW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidW(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidW", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqComTimeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqComTimeout$descriptor() {
        return RpcMgmtInqComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static MethodHandle RpcMgmtInqComTimeout$handle() {
        return RpcMgmtInqComTimeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static int RpcMgmtInqComTimeout(MemorySegment Binding, MemorySegment Timeout) {
        var mh$ = RpcMgmtInqComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtSetComTimeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetComTimeout$descriptor() {
        return RpcMgmtSetComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetComTimeout$handle() {
        return RpcMgmtSetComTimeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static int RpcMgmtSetComTimeout(MemorySegment Binding, int Timeout) {
        var mh$ = RpcMgmtSetComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetCancelTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtSetCancelTimeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetCancelTimeout$descriptor() {
        return RpcMgmtSetCancelTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetCancelTimeout$handle() {
        return RpcMgmtSetCancelTimeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static int RpcMgmtSetCancelTimeout(int Timeout) {
        var mh$ = RpcMgmtSetCancelTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetCancelTimeout", Timeout);
            }
            return (int)mh$.invokeExact(Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNetworkInqProtseqsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsA$descriptor() {
        return RpcNetworkInqProtseqsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsA$handle() {
        return RpcNetworkInqProtseqsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsA(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNetworkInqProtseqsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsW$descriptor() {
        return RpcNetworkInqProtseqsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsW$handle() {
        return RpcNetworkInqProtseqsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsW(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectInqType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcObjectInqType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectInqType$descriptor() {
        return RpcObjectInqType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectInqType$handle() {
        return RpcObjectInqType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectInqType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectInqType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectInqType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetInqFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcObjectSetInqFn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static FunctionDescriptor RpcObjectSetInqFn$descriptor() {
        return RpcObjectSetInqFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static MethodHandle RpcObjectSetInqFn$handle() {
        return RpcObjectSetInqFn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static int RpcObjectSetInqFn(MemorySegment InquiryFn) {
        var mh$ = RpcObjectSetInqFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetInqFn", InquiryFn);
            }
            return (int)mh$.invokeExact(InquiryFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcObjectSetType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectSetType$descriptor() {
        return RpcObjectSetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectSetType$handle() {
        return RpcObjectSetType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectSetType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectSetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcProtseqVectorFreeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeA$descriptor() {
        return RpcProtseqVectorFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeA$handle() {
        return RpcProtseqVectorFreeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeA(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcProtseqVectorFreeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeW$descriptor() {
        return RpcProtseqVectorFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeW$handle() {
        return RpcProtseqVectorFreeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeW(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqBindings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindings$descriptor() {
        return RpcServerInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindings$handle() {
        return RpcServerInqBindings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindings(MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindings", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqBindingsEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingsEx$descriptor() {
        return RpcServerInqBindingsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindingsEx$handle() {
        return RpcServerInqBindingsEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindingsEx(MemorySegment SecurityDescriptor, MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindingsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingsEx", SecurityDescriptor, BindingVector);
            }
            return (int)mh$.invokeExact(SecurityDescriptor, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqIf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerInqIf$descriptor() {
        return RpcServerInqIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static MethodHandle RpcServerInqIf$handle() {
        return RpcServerInqIf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static int RpcServerInqIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerInqIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerListen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static FunctionDescriptor RpcServerListen$descriptor() {
        return RpcServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static MethodHandle RpcServerListen$handle() {
        return RpcServerListen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static int RpcServerListen(int MinimumCallThreads, int MaxCalls, int DontWait) {
        var mh$ = RpcServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerListen", MinimumCallThreads, MaxCalls, DontWait);
            }
            return (int)mh$.invokeExact(MinimumCallThreads, MaxCalls, DontWait);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterIf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf$descriptor() {
        return RpcServerRegisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static MethodHandle RpcServerRegisterIf$handle() {
        return RpcServerRegisterIf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static int RpcServerRegisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerRegisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterIfEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIfEx$descriptor() {
        return RpcServerRegisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static MethodHandle RpcServerRegisterIfEx$handle() {
        return RpcServerRegisterIfEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static int RpcServerRegisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, MemorySegment IfCallback) {
        var mh$ = RpcServerRegisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIfEx", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterIf2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf2$descriptor() {
        return RpcServerRegisterIf2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static MethodHandle RpcServerRegisterIf2$handle() {
        return RpcServerRegisterIf2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static int RpcServerRegisterIf2(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallbackFn) {
        var mh$ = RpcServerRegisterIf2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf2", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterIf3"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf3$descriptor() {
        return RpcServerRegisterIf3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerRegisterIf3$handle() {
        return RpcServerRegisterIf3.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerRegisterIf3(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallback, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerRegisterIf3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf3", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUnregisterIf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIf$descriptor() {
        return RpcServerUnregisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static MethodHandle RpcServerUnregisterIf$handle() {
        return RpcServerUnregisterIf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static int RpcServerUnregisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int WaitForCallsToComplete) {
        var mh$ = RpcServerUnregisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIf", IfSpec, MgrTypeUuid, WaitForCallsToComplete);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, WaitForCallsToComplete);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUnregisterIfEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIfEx$descriptor() {
        return RpcServerUnregisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static MethodHandle RpcServerUnregisterIfEx$handle() {
        return RpcServerUnregisterIfEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static int RpcServerUnregisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int RundownContextHandles) {
        var mh$ = RpcServerUnregisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIfEx", IfSpec, MgrTypeUuid, RundownContextHandles);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, RundownContextHandles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseAllProtseqs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqs$descriptor() {
        return RpcServerUseAllProtseqs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqs$handle() {
        return RpcServerUseAllProtseqs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqs(int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqs", MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseAllProtseqsEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsEx$descriptor() {
        return RpcServerUseAllProtseqsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsEx$handle() {
        return RpcServerUseAllProtseqsEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsEx(int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsEx", MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseAllProtseqsIf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIf$descriptor() {
        return RpcServerUseAllProtseqsIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIf$handle() {
        return RpcServerUseAllProtseqsIf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqsIf(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqsIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIf", MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseAllProtseqsIfEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIfEx$descriptor() {
        return RpcServerUseAllProtseqsIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIfEx$handle() {
        return RpcServerUseAllProtseqsIfEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsIfEx(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIfEx", MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqA$descriptor() {
        return RpcServerUseProtseqA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqA$handle() {
        return RpcServerUseProtseqA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqA", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExA$descriptor() {
        return RpcServerUseProtseqExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExA$handle() {
        return RpcServerUseProtseqExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExA", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqW$descriptor() {
        return RpcServerUseProtseqW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqW$handle() {
        return RpcServerUseProtseqW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqW", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExW$descriptor() {
        return RpcServerUseProtseqExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExW$handle() {
        return RpcServerUseProtseqExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExW", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqEpA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpA$descriptor() {
        return RpcServerUseProtseqEpA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpA$handle() {
        return RpcServerUseProtseqEpA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpA", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqEpExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExA$descriptor() {
        return RpcServerUseProtseqEpExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExA$handle() {
        return RpcServerUseProtseqEpExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExA", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqEpW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpW$descriptor() {
        return RpcServerUseProtseqEpW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpW$handle() {
        return RpcServerUseProtseqEpW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpW", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqEpExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExW$descriptor() {
        return RpcServerUseProtseqEpExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExW$handle() {
        return RpcServerUseProtseqEpExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExW", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqIfA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfA$descriptor() {
        return RpcServerUseProtseqIfA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfA$handle() {
        return RpcServerUseProtseqIfA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfA", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqIfExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExA$descriptor() {
        return RpcServerUseProtseqIfExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExA$handle() {
        return RpcServerUseProtseqIfExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExA", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqIfW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfW$descriptor() {
        return RpcServerUseProtseqIfW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfW$handle() {
        return RpcServerUseProtseqIfW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfW", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerUseProtseqIfExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExW$descriptor() {
        return RpcServerUseProtseqIfExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExW$handle() {
        return RpcServerUseProtseqIfExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExW", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerYield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerYield"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static FunctionDescriptor RpcServerYield$descriptor() {
        return RpcServerYield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static MethodHandle RpcServerYield$handle() {
        return RpcServerYield.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static void RpcServerYield() {
        var mh$ = RpcServerYield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerYield");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStatsVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtStatsVectorFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtStatsVectorFree$descriptor() {
        return RpcMgmtStatsVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static MethodHandle RpcMgmtStatsVectorFree$handle() {
        return RpcMgmtStatsVectorFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static int RpcMgmtStatsVectorFree(MemorySegment StatsVector) {
        var mh$ = RpcMgmtStatsVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStatsVectorFree", StatsVector);
            }
            return (int)mh$.invokeExact(StatsVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqStats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqStats$descriptor() {
        return RpcMgmtInqStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static MethodHandle RpcMgmtInqStats$handle() {
        return RpcMgmtInqStats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static int RpcMgmtInqStats(MemorySegment Binding, MemorySegment Statistics) {
        var mh$ = RpcMgmtInqStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqStats", Binding, Statistics);
            }
            return (int)mh$.invokeExact(Binding, Statistics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtIsServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtIsServerListening"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtIsServerListening$descriptor() {
        return RpcMgmtIsServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtIsServerListening$handle() {
        return RpcMgmtIsServerListening.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtIsServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtIsServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtIsServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStopServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtStopServerListening"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtStopServerListening$descriptor() {
        return RpcMgmtStopServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtStopServerListening$handle() {
        return RpcMgmtStopServerListening.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtStopServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtStopServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStopServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtWaitServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtWaitServerListen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static FunctionDescriptor RpcMgmtWaitServerListen$descriptor() {
        return RpcMgmtWaitServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static MethodHandle RpcMgmtWaitServerListen$handle() {
        return RpcMgmtWaitServerListen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static int RpcMgmtWaitServerListen() {
        var mh$ = RpcMgmtWaitServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtWaitServerListen");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetServerStackSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtSetServerStackSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetServerStackSize$descriptor() {
        return RpcMgmtSetServerStackSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static MethodHandle RpcMgmtSetServerStackSize$handle() {
        return RpcMgmtSetServerStackSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static int RpcMgmtSetServerStackSize(int ThreadStackSize) {
        var mh$ = RpcMgmtSetServerStackSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetServerStackSize", ThreadStackSize);
            }
            return (int)mh$.invokeExact(ThreadStackSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcSsDontSerializeContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor RpcSsDontSerializeContext$descriptor() {
        return RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle RpcSsDontSerializeContext$handle() {
        return RpcSsDontSerializeContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static void RpcSsDontSerializeContext() {
        var mh$ = RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEnableIdleCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEnableIdleCleanup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static FunctionDescriptor RpcMgmtEnableIdleCleanup$descriptor() {
        return RpcMgmtEnableIdleCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static MethodHandle RpcMgmtEnableIdleCleanup$handle() {
        return RpcMgmtEnableIdleCleanup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static int RpcMgmtEnableIdleCleanup() {
        var mh$ = RpcMgmtEnableIdleCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEnableIdleCleanup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqIfIds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqIfIds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqIfIds$descriptor() {
        return RpcMgmtInqIfIds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcMgmtInqIfIds$handle() {
        return RpcMgmtInqIfIds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcMgmtInqIfIds(MemorySegment Binding, MemorySegment IfIdVector) {
        var mh$ = RpcMgmtInqIfIds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqIfIds", Binding, IfIdVector);
            }
            return (int)mh$.invokeExact(Binding, IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfIdVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcIfIdVectorFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcIfIdVectorFree$descriptor() {
        return RpcIfIdVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcIfIdVectorFree$handle() {
        return RpcIfIdVectorFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcIfIdVectorFree(MemorySegment IfIdVector) {
        var mh$ = RpcIfIdVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfIdVectorFree", IfIdVector);
            }
            return (int)mh$.invokeExact(IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqServerPrincNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameA$descriptor() {
        return RpcMgmtInqServerPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameA$handle() {
        return RpcMgmtInqServerPrincNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameA(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameA", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtInqServerPrincNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameW$descriptor() {
        return RpcMgmtInqServerPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameW$handle() {
        return RpcMgmtInqServerPrincNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameW(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameW", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqDefaultPrincNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameA$descriptor() {
        return RpcServerInqDefaultPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameA$handle() {
        return RpcServerInqDefaultPrincNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameA(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameA", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqDefaultPrincNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameW$descriptor() {
        return RpcServerInqDefaultPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameW$handle() {
        return RpcServerInqDefaultPrincNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameW(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameW", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpResolveBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpResolveBinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor RpcEpResolveBinding$descriptor() {
        return RpcEpResolveBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle RpcEpResolveBinding$handle() {
        return RpcEpResolveBinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int RpcEpResolveBinding(MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcEpResolveBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpResolveBinding", Binding, IfSpec);
            }
            return (int)mh$.invokeExact(Binding, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingInqEntryNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameA$descriptor() {
        return RpcNsBindingInqEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameA$handle() {
        return RpcNsBindingInqEntryNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingInqEntryNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameW$descriptor() {
        return RpcNsBindingInqEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameW$handle() {
        return RpcNsBindingInqEntryNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTH_IDENTITY_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTH_IDENTITY_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTHZ_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTHZ_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     * } *PRPC_SECURITY_QOS
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
     *     unsigned short *User;
     *     unsigned long UserLength;
     *     unsigned short *Domain;
     *     unsigned long DomainLength;
     *     unsigned short *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_W
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
     *     unsigned char *User;
     *     unsigned long UserLength;
     *     unsigned char *Domain;
     *     unsigned long DomainLength;
     *     unsigned char *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_A
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned short *NetworkAddress;
     *     unsigned short *StringEndpoint;
     *     union {
     *         unsigned short *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned char *NetworkAddress;
     *     unsigned char *StringEndpoint;
     *     union {
     *         unsigned char *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
     *     unsigned long Version;
     *     unsigned short *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
     *     unsigned long Version;
     *     unsigned char *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ComTimeout;
     *     unsigned long CallTimeout;
     * } *PRPC_BINDING_HANDLE_OPTIONS_V1
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_OPTIONS_V1 = C_POINTER;

    private static class RpcBindingCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingCreateA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateA$descriptor() {
        return RpcBindingCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateA$handle() {
        return RpcBindingCreateA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateA(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateA", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingCreateW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateW$descriptor() {
        return RpcBindingCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateW$handle() {
        return RpcBindingCreateW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateW(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateW", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingGetTrainingContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingGetTrainingContextHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static FunctionDescriptor RpcBindingGetTrainingContextHandle$descriptor() {
        return RpcBindingGetTrainingContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static MethodHandle RpcBindingGetTrainingContextHandle$handle() {
        return RpcBindingGetTrainingContextHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static int RpcBindingGetTrainingContextHandle(MemorySegment Binding, MemorySegment ContextHandle) {
        var mh$ = RpcBindingGetTrainingContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingGetTrainingContextHandle", Binding, ContextHandle);
            }
            return (int)mh$.invokeExact(Binding, ContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInqBindingHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingHandle$descriptor() {
        return RpcServerInqBindingHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcServerInqBindingHandle$handle() {
        return RpcServerInqBindingHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcServerInqBindingHandle(MemorySegment Binding) {
        var mh$ = RpcServerInqBindingHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingHandle", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RPCHTTP_RS_REDIRECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_REDIRECT = 1
     * }
     */
    public static int RPCHTTP_RS_REDIRECT() {
        return RPCHTTP_RS_REDIRECT;
    }
    private static final int RPCHTTP_RS_ACCESS_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_1 = 2
     * }
     */
    public static int RPCHTTP_RS_ACCESS_1() {
        return RPCHTTP_RS_ACCESS_1;
    }
    private static final int RPCHTTP_RS_SESSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_SESSION = 3
     * }
     */
    public static int RPCHTTP_RS_SESSION() {
        return RPCHTTP_RS_SESSION;
    }
    private static final int RPCHTTP_RS_ACCESS_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_2 = 4
     * }
     */
    public static int RPCHTTP_RS_ACCESS_2() {
        return RPCHTTP_RS_ACCESS_2;
    }
    private static final int RPCHTTP_RS_INTERFACE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_INTERFACE = 5
     * }
     */
    public static int RPCHTTP_RS_INTERFACE() {
        return RPCHTTP_RS_INTERFACE;
    }

    private static class RpcImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcImpersonateClient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient$descriptor() {
        return RpcImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient$handle() {
        return RpcImpersonateClient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClient2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcImpersonateClient2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient2$descriptor() {
        return RpcImpersonateClient2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient2$handle() {
        return RpcImpersonateClient2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient2(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient2", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcRevertToSelfEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcRevertToSelfEx$descriptor() {
        return RpcRevertToSelfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcRevertToSelfEx$handle() {
        return RpcRevertToSelfEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcRevertToSelfEx(MemorySegment BindingHandle) {
        var mh$ = RpcRevertToSelfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelfEx", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcRevertToSelf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static FunctionDescriptor RpcRevertToSelf$descriptor() {
        return RpcRevertToSelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static MethodHandle RpcRevertToSelf$handle() {
        return RpcRevertToSelf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static int RpcRevertToSelf() {
        var mh$ = RpcRevertToSelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelf");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClientContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcImpersonateClientContainer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClientContainer$descriptor() {
        return RpcImpersonateClientContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClientContainer$handle() {
        return RpcImpersonateClientContainer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClientContainer(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClientContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClientContainer", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertContainerImpersonation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcRevertContainerImpersonation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static FunctionDescriptor RpcRevertContainerImpersonation$descriptor() {
        return RpcRevertContainerImpersonation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static MethodHandle RpcRevertContainerImpersonation$handle() {
        return RpcRevertContainerImpersonation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static int RpcRevertContainerImpersonation() {
        var mh$ = RpcRevertContainerImpersonation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertContainerImpersonation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthClientA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientA$descriptor() {
        return RpcBindingInqAuthClientA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientA$handle() {
        return RpcBindingInqAuthClientA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthClientW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientW$descriptor() {
        return RpcBindingInqAuthClientW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientW$handle() {
        return RpcBindingInqAuthClientW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthClientExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExA$descriptor() {
        return RpcBindingInqAuthClientExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExA$handle() {
        return RpcBindingInqAuthClientExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthClientExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExW$descriptor() {
        return RpcBindingInqAuthClientExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExW$handle() {
        return RpcBindingInqAuthClientExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthInfoA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoA$descriptor() {
        return RpcBindingInqAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoA$handle() {
        return RpcBindingInqAuthInfoA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthInfoW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoW$descriptor() {
        return RpcBindingInqAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoW$handle() {
        return RpcBindingInqAuthInfoW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetAuthInfoA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoA$descriptor() {
        return RpcBindingSetAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoA$handle() {
        return RpcBindingSetAuthInfoA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetAuthInfoExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExA$descriptor() {
        return RpcBindingSetAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExA$handle() {
        return RpcBindingSetAuthInfoExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static int RpcBindingSetAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQos) {
        var mh$ = RpcBindingSetAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetAuthInfoW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoW$descriptor() {
        return RpcBindingSetAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoW$handle() {
        return RpcBindingSetAuthInfoW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingSetAuthInfoExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExW$descriptor() {
        return RpcBindingSetAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExW$handle() {
        return RpcBindingSetAuthInfoExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingSetAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingSetAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthInfoExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExA$descriptor() {
        return RpcBindingInqAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExA$handle() {
        return RpcBindingInqAuthInfoExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingInqAuthInfoExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExW$descriptor() {
        return RpcBindingInqAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExW$handle() {
        return RpcBindingInqAuthInfoExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerCompleteSecurityCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerCompleteSecurityCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor RpcServerCompleteSecurityCallback$descriptor() {
        return RpcServerCompleteSecurityCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static MethodHandle RpcServerCompleteSecurityCallback$handle() {
        return RpcServerCompleteSecurityCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static int RpcServerCompleteSecurityCallback(MemorySegment BindingHandle, int Status) {
        var mh$ = RpcServerCompleteSecurityCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerCompleteSecurityCallback", BindingHandle, Status);
            }
            return (int)mh$.invokeExact(BindingHandle, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterAuthInfoA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoA$descriptor() {
        return RpcServerRegisterAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoA$handle() {
        return RpcServerRegisterAuthInfoA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoA(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoA", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerRegisterAuthInfoW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoW$descriptor() {
        return RpcServerRegisterAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoW$handle() {
        return RpcServerRegisterAuthInfoW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoW(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoW", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned char *UserName;
     *     unsigned char *ComputerName;
     *     unsigned short Privilege;
     *     unsigned long AuthFlags;
     * } *PRPC_CLIENT_INFORMATION1
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INFORMATION1 = C_POINTER;

    private static class RpcBindingServerFromClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcBindingServerFromClient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingServerFromClient$descriptor() {
        return RpcBindingServerFromClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static MethodHandle RpcBindingServerFromClient$handle() {
        return RpcBindingServerFromClient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static int RpcBindingServerFromClient(MemorySegment ClientBinding, MemorySegment ServerBinding) {
        var mh$ = RpcBindingServerFromClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingServerFromClient", ClientBinding, ServerBinding);
            }
            return (int)mh$.invokeExact(ClientBinding, ServerBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRaiseException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcRaiseException"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static FunctionDescriptor RpcRaiseException$descriptor() {
        return RpcRaiseException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static MethodHandle RpcRaiseException$handle() {
        return RpcRaiseException.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static void RpcRaiseException(int exception) {
        var mh$ = RpcRaiseException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRaiseException", exception);
            }
            mh$.invokeExact(exception);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcTestCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static FunctionDescriptor RpcTestCancel$descriptor() {
        return RpcTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static MethodHandle RpcTestCancel$handle() {
        return RpcTestCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static int RpcTestCancel() {
        var mh$ = RpcTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerTestCancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcServerTestCancel$descriptor() {
        return RpcServerTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcServerTestCancel$handle() {
        return RpcServerTestCancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcServerTestCancel(MemorySegment BindingHandle) {
        var mh$ = RpcServerTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerTestCancel", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcCancelThread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static FunctionDescriptor RpcCancelThread$descriptor() {
        return RpcCancelThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static MethodHandle RpcCancelThread$handle() {
        return RpcCancelThread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static int RpcCancelThread(MemorySegment Thread) {
        var mh$ = RpcCancelThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThread", Thread);
            }
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThreadEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcCancelThreadEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static FunctionDescriptor RpcCancelThreadEx$descriptor() {
        return RpcCancelThreadEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static MethodHandle RpcCancelThreadEx$handle() {
        return RpcCancelThreadEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static int RpcCancelThreadEx(MemorySegment Thread, int Timeout) {
        var mh$ = RpcCancelThreadEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThreadEx", Thread, Timeout);
            }
            return (int)mh$.invokeExact(Thread, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidCreate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreate$descriptor() {
        return UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreate$handle() {
        return UuidCreate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static int UuidCreate(MemorySegment Uuid) {
        var mh$ = UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateSequential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidCreateSequential"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreateSequential$descriptor() {
        return UuidCreateSequential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreateSequential$handle() {
        return UuidCreateSequential.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static int UuidCreateSequential(MemorySegment Uuid) {
        var mh$ = UuidCreateSequential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateSequential", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidToStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringA$descriptor() {
        return UuidToStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringA$handle() {
        return UuidToStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static int UuidToStringA(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringA", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidFromStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringA$descriptor() {
        return UuidFromStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringA$handle() {
        return UuidFromStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringA(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringA", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidToStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringW$descriptor() {
        return UuidToStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringW$handle() {
        return UuidToStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static int UuidToStringW(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringW", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidFromStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringW$descriptor() {
        return UuidFromStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringW$handle() {
        return UuidFromStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringW(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringW", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCompare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidCompare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidCompare$descriptor() {
        return UuidCompare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidCompare$handle() {
        return UuidCompare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidCompare(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidCompare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCompare", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidCreateNil"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static FunctionDescriptor UuidCreateNil$descriptor() {
        return UuidCreateNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static MethodHandle UuidCreateNil$handle() {
        return UuidCreateNil.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static int UuidCreateNil(MemorySegment NilUuid) {
        var mh$ = UuidCreateNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateNil", NilUuid);
            }
            return (int)mh$.invokeExact(NilUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidEqual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidEqual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidEqual$descriptor() {
        return UuidEqual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidEqual$handle() {
        return UuidEqual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidEqual(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidEqual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidEqual", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_SHORT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidHash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidHash$descriptor() {
        return UuidHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidHash$handle() {
        return UuidHash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static short UuidHash(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidHash", Uuid, Status);
            }
            return (short)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidIsNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UuidIsNil"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidIsNil$descriptor() {
        return UuidIsNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidIsNil$handle() {
        return UuidIsNil.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static int UuidIsNil(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidIsNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidIsNil", Uuid, Status);
            }
            return (int)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpRegisterNoReplaceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceA$descriptor() {
        return RpcEpRegisterNoReplaceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceA$handle() {
        return RpcEpRegisterNoReplaceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpRegisterNoReplaceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceW$descriptor() {
        return RpcEpRegisterNoReplaceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceW$handle() {
        return RpcEpRegisterNoReplaceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpRegisterA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterA$descriptor() {
        return RpcEpRegisterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterA$handle() {
        return RpcEpRegisterA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpRegisterW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterW$descriptor() {
        return RpcEpRegisterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterW$handle() {
        return RpcEpRegisterW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcEpUnregister"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static FunctionDescriptor RpcEpUnregister$descriptor() {
        return RpcEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static MethodHandle RpcEpUnregister$handle() {
        return RpcEpUnregister.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static int RpcEpUnregister(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector) {
        var mh$ = RpcEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpUnregister", IfSpec, BindingVector, UuidVector);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DceErrorInqTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextA$descriptor() {
        return DceErrorInqTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextA$handle() {
        return DceErrorInqTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextA(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextA", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DceErrorInqTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextW$descriptor() {
        return DceErrorInqTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextW$handle() {
        return DceErrorInqTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextW(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextW", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE
     * }
     */
    public static final AddressLayout RPC_EP_INQ_HANDLE = C_POINTER;

    private static class RpcMgmtEpEltInqBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEpEltInqBegin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqBegin$descriptor() {
        return RpcMgmtEpEltInqBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqBegin$handle() {
        return RpcMgmtEpEltInqBegin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqBegin(MemorySegment EpBinding, int InquiryType, MemorySegment IfId, int VersOption, MemorySegment ObjectUuid, MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqBegin", EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
            }
            return (int)mh$.invokeExact(EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEpEltInqDone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqDone$descriptor() {
        return RpcMgmtEpEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqDone$handle() {
        return RpcMgmtEpEltInqDone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEpEltInqNextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextA$descriptor() {
        return RpcMgmtEpEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextA$handle() {
        return RpcMgmtEpEltInqNextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextA", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEpEltInqNextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextW$descriptor() {
        return RpcMgmtEpEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextW$handle() {
        return RpcMgmtEpEltInqNextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextW", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtEpUnregister"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpUnregister$descriptor() {
        return RpcMgmtEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcMgmtEpUnregister$handle() {
        return RpcMgmtEpUnregister.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcMgmtEpUnregister(MemorySegment EpBinding, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcMgmtEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpUnregister", EpBinding, IfId, Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(EpBinding, IfId, Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetAuthorizationFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcMgmtSetAuthorizationFn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetAuthorizationFn$descriptor() {
        return RpcMgmtSetAuthorizationFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static MethodHandle RpcMgmtSetAuthorizationFn$handle() {
        return RpcMgmtSetAuthorizationFn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static int RpcMgmtSetAuthorizationFn(MemorySegment AuthorizationFn) {
        var mh$ = RpcMgmtSetAuthorizationFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetAuthorizationFn", AuthorizationFn);
            }
            return (int)mh$.invokeExact(AuthorizationFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcExceptionFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor RpcExceptionFilter$descriptor() {
        return RpcExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle RpcExceptionFilter$handle() {
        return RpcExceptionFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static int RpcExceptionFilter(int ExceptionCode) {
        var mh$ = RpcExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcExceptionFilter", ExceptionCode);
            }
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout RPC_INTERFACE_GROUP = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void **PRPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_GROUP = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_WSTR ProtSeq;
     *     RPC_WSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_CSTR ProtSeq;
     *     RPC_CSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_CSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_WSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEW = C_POINTER;

    private static class RpcServerInterfaceGroupCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupCreateW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateW$descriptor() {
        return RpcServerInterfaceGroupCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateW$handle() {
        return RpcServerInterfaceGroupCreateW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateW(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateW", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupCreateA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateA$descriptor() {
        return RpcServerInterfaceGroupCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateA$handle() {
        return RpcServerInterfaceGroupCreateA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateA(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateA", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupClose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupClose$descriptor() {
        return RpcServerInterfaceGroupClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupClose$handle() {
        return RpcServerInterfaceGroupClose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupClose(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupClose", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupActivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupActivate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupActivate$descriptor() {
        return RpcServerInterfaceGroupActivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupActivate$handle() {
        return RpcServerInterfaceGroupActivate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupActivate(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupActivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupActivate", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupDeactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupDeactivate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupDeactivate$descriptor() {
        return RpcServerInterfaceGroupDeactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupDeactivate$handle() {
        return RpcServerInterfaceGroupDeactivate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static int RpcServerInterfaceGroupDeactivate(MemorySegment IfGroup, int ForceDeactivation) {
        var mh$ = RpcServerInterfaceGroupDeactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupDeactivate", IfGroup, ForceDeactivation);
            }
            return (int)mh$.invokeExact(IfGroup, ForceDeactivation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcServerInterfaceGroupInqBindings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupInqBindings$descriptor() {
        return RpcServerInterfaceGroupInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupInqBindings$handle() {
        return RpcServerInterfaceGroupInqBindings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInterfaceGroupInqBindings(MemorySegment IfGroup, MemorySegment BindingVector) {
        var mh$ = RpcServerInterfaceGroupInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupInqBindings", IfGroup, BindingVector);
            }
            return (int)mh$.invokeExact(IfGroup, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SYNTAX_IDENTIFIER {
     *     GUID SyntaxGUID;
     *     RPC_VERSION SyntaxVersion;
     * } *PRPC_SYNTAX_IDENTIFIER
     * }
     */
    public static final AddressLayout PRPC_SYNTAX_IDENTIFIER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_MESSAGE {
     *     RPC_BINDING_HANDLE Handle;
     *     unsigned long DataRepresentation;
     *     void *Buffer;
     *     unsigned int BufferLength;
     *     unsigned int ProcNum;
     *     PRPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     void *RpcInterfaceInformation;
     *     void *ReservedForRuntime;
     *     void *ManagerEpv;
     *     void *ImportContext;
     *     unsigned long RpcFlags;
     * } *PRPC_MESSAGE
     * }
     */
    public static final AddressLayout PRPC_MESSAGE = C_POINTER;
    private static final int PROTOCOL_NOT_LOADED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_NOT_LOADED = 1
     * }
     */
    public static int PROTOCOL_NOT_LOADED() {
        return PROTOCOL_NOT_LOADED;
    }
    private static final int PROTOCOL_LOADED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_LOADED = 2
     * }
     */
    public static int PROTOCOL_LOADED() {
        return PROTOCOL_LOADED;
    }
    private static final int PROTOCOL_ADDRESS_CHANGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_ADDRESS_CHANGE = 3
     * }
     */
    public static int PROTOCOL_ADDRESS_CHANGE() {
        return PROTOCOL_ADDRESS_CHANGE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned int DispatchTableCount;
     *     RPC_DISPATCH_FUNCTION *DispatchTable;
     *     LONG_PTR Reserved;
     * } *PRPC_DISPATCH_TABLE
     * }
     */
    public static final AddressLayout PRPC_DISPATCH_TABLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_PROTSEQ_ENDPOINT {
     *     unsigned char *RpcProtocolSequence;
     *     unsigned char *Endpoint;
     * } *PRPC_PROTSEQ_ENDPOINT
     * }
     */
    public static final AddressLayout PRPC_PROTSEQ_ENDPOINT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SERVER_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     void *DefaultManagerEpv;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_SERVER_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_SERVER_INTERFACE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_CLIENT_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     ULONG_PTR Reserved;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_CLIENT_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INTERFACE = C_POINTER;

    private static class I_RpcNegotiateTransferSyntax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcNegotiateTransferSyntax"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcNegotiateTransferSyntax$descriptor() {
        return I_RpcNegotiateTransferSyntax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcNegotiateTransferSyntax$handle() {
        return I_RpcNegotiateTransferSyntax.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcNegotiateTransferSyntax(MemorySegment Message) {
        var mh$ = I_RpcNegotiateTransferSyntax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNegotiateTransferSyntax", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcGetBuffer$descriptor() {
        return I_RpcGetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcGetBuffer$handle() {
        return I_RpcGetBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcGetBuffer(MemorySegment Message) {
        var mh$ = I_RpcGetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBufferWithObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetBufferWithObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor I_RpcGetBufferWithObject$descriptor() {
        return I_RpcGetBufferWithObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle I_RpcGetBufferWithObject$handle() {
        return I_RpcGetBufferWithObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static int I_RpcGetBufferWithObject(MemorySegment Message, MemorySegment ObjectUuid) {
        var mh$ = I_RpcGetBufferWithObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBufferWithObject", Message, ObjectUuid);
            }
            return (int)mh$.invokeExact(Message, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSendReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSendReceive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcSendReceive$descriptor() {
        return I_RpcSendReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcSendReceive$handle() {
        return I_RpcSendReceive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcSendReceive(MemorySegment Message) {
        var mh$ = I_RpcSendReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSendReceive", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcFreeBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreeBuffer$descriptor() {
        return I_RpcFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreeBuffer$handle() {
        return I_RpcFreeBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static FunctionDescriptor I_RpcSend$descriptor() {
        return I_RpcSend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static MethodHandle I_RpcSend$handle() {
        return I_RpcSend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static int I_RpcSend(MemorySegment Message) {
        var mh$ = I_RpcSend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSend", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcReceive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcReceive$descriptor() {
        return I_RpcReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcReceive$handle() {
        return I_RpcReceive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static int I_RpcReceive(MemorySegment Message, int Size) {
        var mh$ = I_RpcReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReceive", Message, Size);
            }
            return (int)mh$.invokeExact(Message, Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreePipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcFreePipeBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreePipeBuffer$descriptor() {
        return I_RpcFreePipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreePipeBuffer$handle() {
        return I_RpcFreePipeBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreePipeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreePipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreePipeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReallocPipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcReallocPipeBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static FunctionDescriptor I_RpcReallocPipeBuffer$descriptor() {
        return I_RpcReallocPipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static MethodHandle I_RpcReallocPipeBuffer$handle() {
        return I_RpcReallocPipeBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static int I_RpcReallocPipeBuffer(MemorySegment Message, int NewSize) {
        var mh$ = I_RpcReallocPipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReallocPipeBuffer", Message, NewSize);
            }
            return (int)mh$.invokeExact(Message, NewSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_MUTEX
     * }
     */
    public static final AddressLayout I_RPC_MUTEX = C_POINTER;

    private static class I_RpcRequestMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcRequestMutex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcRequestMutex$descriptor() {
        return I_RpcRequestMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static MethodHandle I_RpcRequestMutex$handle() {
        return I_RpcRequestMutex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static void I_RpcRequestMutex(MemorySegment Mutex) {
        var mh$ = I_RpcRequestMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRequestMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcClearMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcClearMutex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcClearMutex$descriptor() {
        return I_RpcClearMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcClearMutex$handle() {
        return I_RpcClearMutex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcClearMutex(MemorySegment Mutex) {
        var mh$ = I_RpcClearMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcClearMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcDeleteMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcDeleteMutex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcDeleteMutex$descriptor() {
        return I_RpcDeleteMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcDeleteMutex$handle() {
        return I_RpcDeleteMutex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcDeleteMutex(MemorySegment Mutex) {
        var mh$ = I_RpcDeleteMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcDeleteMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcAllocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcAllocate$descriptor() {
        return I_RpcAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcAllocate$handle() {
        return I_RpcAllocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcAllocate(int Size) {
        var mh$ = I_RpcAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static FunctionDescriptor I_RpcFree$descriptor() {
        return I_RpcFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static MethodHandle I_RpcFree$handle() {
        return I_RpcFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static void I_RpcFree(MemorySegment Object) {
        var mh$ = I_RpcFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFree", Object);
            }
            mh$.invokeExact(Object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandleCollection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcFreeSystemHandleCollection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandleCollection$descriptor() {
        return I_RpcFreeSystemHandleCollection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandleCollection$handle() {
        return I_RpcFreeSystemHandleCollection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static int I_RpcFreeSystemHandleCollection(MemorySegment CallObj, int FreeFlags) {
        var mh$ = I_RpcFreeSystemHandleCollection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandleCollection", CallObj, FreeFlags);
            }
            return (int)mh$.invokeExact(CallObj, FreeFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_CHAR,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSetSystemHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static FunctionDescriptor I_RpcSetSystemHandle$descriptor() {
        return I_RpcSetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static MethodHandle I_RpcSetSystemHandle$handle() {
        return I_RpcSetSystemHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static int I_RpcSetSystemHandle(MemorySegment Handle, byte Type, int AccessMask, MemorySegment CallObj, MemorySegment HandleIndex) {
        var mh$ = I_RpcSetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetSystemHandle", Handle, Type, AccessMask, CallObj, HandleIndex);
            }
            return (int)mh$.invokeExact(Handle, Type, AccessMask, CallObj, HandleIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_CHAR,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetSystemHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static FunctionDescriptor I_RpcGetSystemHandle$descriptor() {
        return I_RpcGetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static MethodHandle I_RpcGetSystemHandle$handle() {
        return I_RpcGetSystemHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static int I_RpcGetSystemHandle(MemorySegment pMemory, byte Type, int AccessMask, int HandleIndex, MemorySegment CallObj) {
        var mh$ = I_RpcGetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetSystemHandle", pMemory, Type, AccessMask, HandleIndex, CallObj);
            }
            return (int)mh$.invokeExact(pMemory, Type, AccessMask, HandleIndex, CallObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcFreeSystemHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandle$descriptor() {
        return I_RpcFreeSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandle$handle() {
        return I_RpcFreeSystemHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static void I_RpcFreeSystemHandle(byte Type, MemorySegment Handle) {
        var mh$ = I_RpcFreeSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandle", Type, Handle);
            }
            mh$.invokeExact(Type, Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcPauseExecution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcPauseExecution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static FunctionDescriptor I_RpcPauseExecution$descriptor() {
        return I_RpcPauseExecution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static MethodHandle I_RpcPauseExecution$handle() {
        return I_RpcPauseExecution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static void I_RpcPauseExecution(int Milliseconds) {
        var mh$ = I_RpcPauseExecution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcPauseExecution", Milliseconds);
            }
            mh$.invokeExact(Milliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetExtendedError"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static FunctionDescriptor I_RpcGetExtendedError$descriptor() {
        return I_RpcGetExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static MethodHandle I_RpcGetExtendedError$handle() {
        return I_RpcGetExtendedError.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static int I_RpcGetExtendedError() {
        var mh$ = I_RpcGetExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MarshalDirectionMarshal = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionMarshal = 0
     * }
     */
    public static int MarshalDirectionMarshal() {
        return MarshalDirectionMarshal;
    }
    private static final int MarshalDirectionUnmarshal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionUnmarshal = 1
     * }
     */
    public static int MarshalDirectionUnmarshal() {
        return MarshalDirectionUnmarshal;
    }

    private static class I_RpcSystemHandleTypeSpecificWork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_CHAR,
            C_CHAR,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSystemHandleTypeSpecificWork"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static FunctionDescriptor I_RpcSystemHandleTypeSpecificWork$descriptor() {
        return I_RpcSystemHandleTypeSpecificWork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static MethodHandle I_RpcSystemHandleTypeSpecificWork$handle() {
        return I_RpcSystemHandleTypeSpecificWork.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static int I_RpcSystemHandleTypeSpecificWork(MemorySegment Handle, byte ActualType, byte IdlType, int MarshalDirection) {
        var mh$ = I_RpcSystemHandleTypeSpecificWork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSystemHandleTypeSpecificWork", Handle, ActualType, IdlType, MarshalDirection);
            }
            return (int)mh$.invokeExact(Handle, ActualType, IdlType, MarshalDirection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcMonitorAssociation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static FunctionDescriptor I_RpcMonitorAssociation$descriptor() {
        return I_RpcMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static MethodHandle I_RpcMonitorAssociation$handle() {
        return I_RpcMonitorAssociation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static int I_RpcMonitorAssociation(MemorySegment Handle, MemorySegment RundownRoutine, MemorySegment Context) {
        var mh$ = I_RpcMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMonitorAssociation", Handle, RundownRoutine, Context);
            }
            return (int)mh$.invokeExact(Handle, RundownRoutine, Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcStopMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcStopMonitorAssociation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static FunctionDescriptor I_RpcStopMonitorAssociation$descriptor() {
        return I_RpcStopMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MethodHandle I_RpcStopMonitorAssociation$handle() {
        return I_RpcStopMonitorAssociation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static int I_RpcStopMonitorAssociation(MemorySegment Handle) {
        var mh$ = I_RpcStopMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcStopMonitorAssociation", Handle);
            }
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetCurrentCallHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetCurrentCallHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static FunctionDescriptor I_RpcGetCurrentCallHandle$descriptor() {
        return I_RpcGetCurrentCallHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MethodHandle I_RpcGetCurrentCallHandle$handle() {
        return I_RpcGetCurrentCallHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MemorySegment I_RpcGetCurrentCallHandle() {
        var mh$ = I_RpcGetCurrentCallHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetCurrentCallHandle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetAssociationContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetAssociationContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static FunctionDescriptor I_RpcGetAssociationContext$descriptor() {
        return I_RpcGetAssociationContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static MethodHandle I_RpcGetAssociationContext$handle() {
        return I_RpcGetAssociationContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static int I_RpcGetAssociationContext(MemorySegment BindingHandle, MemorySegment AssociationContext) {
        var mh$ = I_RpcGetAssociationContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetAssociationContext", BindingHandle, AssociationContext);
            }
            return (int)mh$.invokeExact(BindingHandle, AssociationContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetServerContextList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor I_RpcGetServerContextList$descriptor() {
        return I_RpcGetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle I_RpcGetServerContextList$handle() {
        return I_RpcGetServerContextList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment I_RpcGetServerContextList(MemorySegment BindingHandle) {
        var mh$ = I_RpcGetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetServerContextList", BindingHandle);
            }
            return (MemorySegment)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSetServerContextList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static FunctionDescriptor I_RpcSetServerContextList$descriptor() {
        return I_RpcSetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static MethodHandle I_RpcSetServerContextList$handle() {
        return I_RpcSetServerContextList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static void I_RpcSetServerContextList(MemorySegment BindingHandle, MemorySegment ServerContextList) {
        var mh$ = I_RpcSetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetServerContextList", BindingHandle, ServerContextList);
            }
            mh$.invokeExact(BindingHandle, ServerContextList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceExported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcNsInterfaceExported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceExported$descriptor() {
        return I_RpcNsInterfaceExported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceExported$handle() {
        return I_RpcNsInterfaceExported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceExported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceExported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceExported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceUnexported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcNsInterfaceUnexported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceUnexported$descriptor() {
        return I_RpcNsInterfaceUnexported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceUnexported$handle() {
        return I_RpcNsInterfaceUnexported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceUnexported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceUnexported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceUnexported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingToStaticStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingToStaticStringBindingW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingToStaticStringBindingW$descriptor() {
        return I_RpcBindingToStaticStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static MethodHandle I_RpcBindingToStaticStringBindingW$handle() {
        return I_RpcBindingToStaticStringBindingW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static int I_RpcBindingToStaticStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = I_RpcBindingToStaticStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingToStaticStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqSecurityContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqSecurityContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContext$descriptor() {
        return I_RpcBindingInqSecurityContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContext$handle() {
        return I_RpcBindingInqSecurityContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static int I_RpcBindingInqSecurityContext(MemorySegment Binding, MemorySegment SecurityContextHandle) {
        var mh$ = I_RpcBindingInqSecurityContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContext", Binding, SecurityContextHandle);
            }
            return (int)mh$.invokeExact(Binding, SecurityContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SEC_CONTEXT_KEY_INFO {
     *     unsigned long EncryptAlgorithm;
     *     unsigned long KeySize;
     *     unsigned long SignatureAlgorithm;
     * } *PRPC_SEC_CONTEXT_KEY_INFO
     * }
     */
    public static final AddressLayout PRPC_SEC_CONTEXT_KEY_INFO = C_POINTER;

    private static class I_RpcBindingInqSecurityContextKeyInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqSecurityContextKeyInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContextKeyInfo$descriptor() {
        return I_RpcBindingInqSecurityContextKeyInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContextKeyInfo$handle() {
        return I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static int I_RpcBindingInqSecurityContextKeyInfo(MemorySegment Binding, MemorySegment KeyInfo) {
        var mh$ = I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContextKeyInfo", Binding, KeyInfo);
            }
            return (int)mh$.invokeExact(Binding, KeyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqWireIdForSnego {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqWireIdForSnego"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqWireIdForSnego$descriptor() {
        return I_RpcBindingInqWireIdForSnego.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static MethodHandle I_RpcBindingInqWireIdForSnego$handle() {
        return I_RpcBindingInqWireIdForSnego.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static int I_RpcBindingInqWireIdForSnego(MemorySegment Binding, MemorySegment WireId) {
        var mh$ = I_RpcBindingInqWireIdForSnego.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqWireIdForSnego", Binding, WireId);
            }
            return (int)mh$.invokeExact(Binding, WireId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqMarshalledTargetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqMarshalledTargetInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqMarshalledTargetInfo$descriptor() {
        return I_RpcBindingInqMarshalledTargetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqMarshalledTargetInfo$handle() {
        return I_RpcBindingInqMarshalledTargetInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static int I_RpcBindingInqMarshalledTargetInfo(MemorySegment Binding, MemorySegment MarshalledTargetInfoSize, MemorySegment MarshalledTargetInfo) {
        var mh$ = I_RpcBindingInqMarshalledTargetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqMarshalledTargetInfo", Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
            }
            return (int)mh$.invokeExact(Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqLocalClientPID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqLocalClientPID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqLocalClientPID$descriptor() {
        return I_RpcBindingInqLocalClientPID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static MethodHandle I_RpcBindingInqLocalClientPID$handle() {
        return I_RpcBindingInqLocalClientPID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static int I_RpcBindingInqLocalClientPID(MemorySegment Binding, MemorySegment Pid) {
        var mh$ = I_RpcBindingInqLocalClientPID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqLocalClientPID", Binding, Pid);
            }
            return (int)mh$.invokeExact(Binding, Pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingHandleToAsyncHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingHandleToAsyncHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingHandleToAsyncHandle$descriptor() {
        return I_RpcBindingHandleToAsyncHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static MethodHandle I_RpcBindingHandleToAsyncHandle$handle() {
        return I_RpcBindingHandleToAsyncHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static int I_RpcBindingHandleToAsyncHandle(MemorySegment Binding, MemorySegment AsyncHandle) {
        var mh$ = I_RpcBindingHandleToAsyncHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingHandleToAsyncHandle", Binding, AsyncHandle);
            }
            return (int)mh$.invokeExact(Binding, AsyncHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcNsBindingSetEntryNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameW$descriptor() {
        return I_RpcNsBindingSetEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameW$handle() {
        return I_RpcNsBindingSetEntryNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcNsBindingSetEntryNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameA$descriptor() {
        return I_RpcNsBindingSetEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameA$handle() {
        return I_RpcNsBindingSetEntryNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUseProtseqEp2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2A$descriptor() {
        return I_RpcServerUseProtseqEp2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2A$handle() {
        return I_RpcServerUseProtseqEp2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2A", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUseProtseqEp2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2W$descriptor() {
        return I_RpcServerUseProtseqEp2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2W$handle() {
        return I_RpcServerUseProtseqEp2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2W", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUseProtseq2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2W$descriptor() {
        return I_RpcServerUseProtseq2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2W$handle() {
        return I_RpcServerUseProtseq2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2W", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUseProtseq2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2A$descriptor() {
        return I_RpcServerUseProtseq2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2A$handle() {
        return I_RpcServerUseProtseq2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2A", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerStartService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartService$descriptor() {
        return I_RpcServerStartService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle I_RpcServerStartService$handle() {
        return I_RpcServerStartService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int I_RpcServerStartService(MemorySegment Protseq, MemorySegment Endpoint, MemorySegment IfSpec) {
        var mh$ = I_RpcServerStartService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartService", Protseq, Endpoint, IfSpec);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqDynamicEndpointW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointW$descriptor() {
        return I_RpcBindingInqDynamicEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointW$handle() {
        return I_RpcBindingInqDynamicEndpointW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointW(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointW", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqDynamicEndpointA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointA$descriptor() {
        return I_RpcBindingInqDynamicEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointA$handle() {
        return I_RpcBindingInqDynamicEndpointA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointA(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointA", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerCheckClientRestriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerCheckClientRestriction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static FunctionDescriptor I_RpcServerCheckClientRestriction$descriptor() {
        return I_RpcServerCheckClientRestriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static MethodHandle I_RpcServerCheckClientRestriction$handle() {
        return I_RpcServerCheckClientRestriction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static int I_RpcServerCheckClientRestriction(MemorySegment Context) {
        var mh$ = I_RpcServerCheckClientRestriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerCheckClientRestriction", Context);
            }
            return (int)mh$.invokeExact(Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqTransportType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqTransportType$descriptor() {
        return I_RpcBindingInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcBindingInqTransportType$handle() {
        return I_RpcBindingInqTransportType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static int I_RpcBindingInqTransportType(MemorySegment Binding, MemorySegment Type) {
        var mh$ = I_RpcBindingInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqTransportType", Binding, Type);
            }
            return (int)mh$.invokeExact(Binding, Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcIfInqTransferSyntaxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcIfInqTransferSyntaxes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static FunctionDescriptor I_RpcIfInqTransferSyntaxes$descriptor() {
        return I_RpcIfInqTransferSyntaxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static MethodHandle I_RpcIfInqTransferSyntaxes$handle() {
        return I_RpcIfInqTransferSyntaxes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static int I_RpcIfInqTransferSyntaxes(MemorySegment RpcIfHandle, MemorySegment TransferSyntaxes, int TransferSyntaxSize, MemorySegment TransferSyntaxCount) {
        var mh$ = I_RpcIfInqTransferSyntaxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcIfInqTransferSyntaxes", RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
            }
            return (int)mh$.invokeExact(RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_UuidCreate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor I_UuidCreate$descriptor() {
        return I_UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle I_UuidCreate$handle() {
        return I_UuidCreate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static int I_UuidCreate(MemorySegment Uuid) {
        var mh$ = I_UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcUninitializeNdrOle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcUninitializeNdrOle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static FunctionDescriptor I_RpcUninitializeNdrOle$descriptor() {
        return I_RpcUninitializeNdrOle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static MethodHandle I_RpcUninitializeNdrOle$handle() {
        return I_RpcUninitializeNdrOle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static void I_RpcUninitializeNdrOle() {
        var mh$ = I_RpcUninitializeNdrOle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcUninitializeNdrOle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingCopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCopy$descriptor() {
        return I_RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle I_RpcBindingCopy$handle() {
        return I_RpcBindingCopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int I_RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = I_RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsClientLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingIsClientLocal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsClientLocal$descriptor() {
        return I_RpcBindingIsClientLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsClientLocal$handle() {
        return I_RpcBindingIsClientLocal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static int I_RpcBindingIsClientLocal(MemorySegment BindingHandle, MemorySegment ClientLocalFlag) {
        var mh$ = I_RpcBindingIsClientLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsClientLocal", BindingHandle, ClientLocalFlag);
            }
            return (int)mh$.invokeExact(BindingHandle, ClientLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqConnId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingInqConnId"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqConnId$descriptor() {
        return I_RpcBindingInqConnId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static MethodHandle I_RpcBindingInqConnId$handle() {
        return I_RpcBindingInqConnId.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static int I_RpcBindingInqConnId(MemorySegment Binding, MemorySegment ConnId, MemorySegment pfFirstCall) {
        var mh$ = I_RpcBindingInqConnId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqConnId", Binding, ConnId, pfFirstCall);
            }
            return (int)mh$.invokeExact(Binding, ConnId, pfFirstCall);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCreateNP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingCreateNP"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCreateNP$descriptor() {
        return I_RpcBindingCreateNP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle I_RpcBindingCreateNP$handle() {
        return I_RpcBindingCreateNP.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int I_RpcBindingCreateNP(MemorySegment ServerName, MemorySegment ServiceName, MemorySegment NetworkOptions, MemorySegment Binding) {
        var mh$ = I_RpcBindingCreateNP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCreateNP", ServerName, ServiceName, NetworkOptions, Binding);
            }
            return (int)mh$.invokeExact(ServerName, ServiceName, NetworkOptions, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSsDontSerializeContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor I_RpcSsDontSerializeContext$descriptor() {
        return I_RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle I_RpcSsDontSerializeContext$handle() {
        return I_RpcSsDontSerializeContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static void I_RpcSsDontSerializeContext() {
        var mh$ = I_RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcLaunchDatagramReceiveThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcLaunchDatagramReceiveThread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static FunctionDescriptor I_RpcLaunchDatagramReceiveThread$descriptor() {
        return I_RpcLaunchDatagramReceiveThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static MethodHandle I_RpcLaunchDatagramReceiveThread$handle() {
        return I_RpcLaunchDatagramReceiveThread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static int I_RpcLaunchDatagramReceiveThread(MemorySegment pAddress) {
        var mh$ = I_RpcLaunchDatagramReceiveThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcLaunchDatagramReceiveThread", pAddress);
            }
            return (int)mh$.invokeExact(pAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerRegisterForwardFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerRegisterForwardFunction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static FunctionDescriptor I_RpcServerRegisterForwardFunction$descriptor() {
        return I_RpcServerRegisterForwardFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static MethodHandle I_RpcServerRegisterForwardFunction$handle() {
        return I_RpcServerRegisterForwardFunction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static int I_RpcServerRegisterForwardFunction(MemorySegment pForwardFunction) {
        var mh$ = I_RpcServerRegisterForwardFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerRegisterForwardFunction", pForwardFunction);
            }
            return (int)mh$.invokeExact(pForwardFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerInqAddressChangeFn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static FunctionDescriptor I_RpcServerInqAddressChangeFn$descriptor() {
        return I_RpcServerInqAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MethodHandle I_RpcServerInqAddressChangeFn$handle() {
        return I_RpcServerInqAddressChangeFn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MemorySegment I_RpcServerInqAddressChangeFn() {
        var mh$ = I_RpcServerInqAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqAddressChangeFn");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSetAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerSetAddressChangeFn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static FunctionDescriptor I_RpcServerSetAddressChangeFn$descriptor() {
        return I_RpcServerSetAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static MethodHandle I_RpcServerSetAddressChangeFn$handle() {
        return I_RpcServerSetAddressChangeFn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static int I_RpcServerSetAddressChangeFn(MemorySegment pAddressChangeFn) {
        var mh$ = I_RpcServerSetAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSetAddressChangeFn", pAddressChangeFn);
            }
            return (int)mh$.invokeExact(pAddressChangeFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqLocalConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerInqLocalConnAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqLocalConnAddress$descriptor() {
        return I_RpcServerInqLocalConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqLocalConnAddress$handle() {
        return I_RpcServerInqLocalConnAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqLocalConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqLocalConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqLocalConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqRemoteConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerInqRemoteConnAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqRemoteConnAddress$descriptor() {
        return I_RpcServerInqRemoteConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqRemoteConnAddress$handle() {
        return I_RpcServerInqRemoteConnAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqRemoteConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqRemoteConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqRemoteConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSessionStrictContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSessionStrictContextHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static FunctionDescriptor I_RpcSessionStrictContextHandle$descriptor() {
        return I_RpcSessionStrictContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static MethodHandle I_RpcSessionStrictContextHandle$handle() {
        return I_RpcSessionStrictContextHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static void I_RpcSessionStrictContextHandle() {
        var mh$ = I_RpcSessionStrictContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSessionStrictContextHandle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcTurnOnEEInfoPropagation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcTurnOnEEInfoPropagation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static FunctionDescriptor I_RpcTurnOnEEInfoPropagation$descriptor() {
        return I_RpcTurnOnEEInfoPropagation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static MethodHandle I_RpcTurnOnEEInfoPropagation$handle() {
        return I_RpcTurnOnEEInfoPropagation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static int I_RpcTurnOnEEInfoPropagation() {
        var mh$ = I_RpcTurnOnEEInfoPropagation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcTurnOnEEInfoPropagation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionInqSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcConnectionInqSockBuffSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionInqSockBuffSize$descriptor() {
        return I_RpcConnectionInqSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionInqSockBuffSize$handle() {
        return I_RpcConnectionInqSockBuffSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static int I_RpcConnectionInqSockBuffSize(MemorySegment RecvBuffSize, MemorySegment SendBuffSize) {
        var mh$ = I_RpcConnectionInqSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionInqSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionSetSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcConnectionSetSockBuffSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionSetSockBuffSize$descriptor() {
        return I_RpcConnectionSetSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionSetSockBuffSize$handle() {
        return I_RpcConnectionSetSockBuffSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static int I_RpcConnectionSetSockBuffSize(int RecvBuffSize, int SendBuffSize) {
        var mh$ = I_RpcConnectionSetSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionSetSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerStartListening"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartListening$descriptor() {
        return I_RpcServerStartListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static MethodHandle I_RpcServerStartListening$handle() {
        return I_RpcServerStartListening.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static int I_RpcServerStartListening(MemorySegment hWnd) {
        var mh$ = I_RpcServerStartListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartListening", hWnd);
            }
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStopListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerStopListening"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static FunctionDescriptor I_RpcServerStopListening$descriptor() {
        return I_RpcServerStopListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static MethodHandle I_RpcServerStopListening$handle() {
        return I_RpcServerStopListening.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static int I_RpcServerStopListening() {
        var mh$ = I_RpcServerStopListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStopListening");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingSetAsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetAsync$descriptor() {
        return I_RpcBindingSetAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static MethodHandle I_RpcBindingSetAsync$handle() {
        return I_RpcBindingSetAsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static int I_RpcBindingSetAsync(MemorySegment Binding, MemorySegment BlockingFn, int ServerTid) {
        var mh$ = I_RpcBindingSetAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetAsync", Binding, BlockingFn, ServerTid);
            }
            return (int)mh$.invokeExact(Binding, BlockingFn, ServerTid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetThreadParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcSetThreadParams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static FunctionDescriptor I_RpcSetThreadParams$descriptor() {
        return I_RpcSetThreadParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static MethodHandle I_RpcSetThreadParams$handle() {
        return I_RpcSetThreadParams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static int I_RpcSetThreadParams(int fClientFree, MemorySegment Context, MemorySegment hWndClient) {
        var mh$ = I_RpcSetThreadParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetThreadParams", fClientFree, Context, hWndClient);
            }
            return (int)mh$.invokeExact(fClientFree, Context, hWndClient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcWindowProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcWindowProc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static FunctionDescriptor I_RpcWindowProc$descriptor() {
        return I_RpcWindowProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static MethodHandle I_RpcWindowProc$handle() {
        return I_RpcWindowProc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static int I_RpcWindowProc(MemorySegment hWnd, int Message, int wParam, int lParam) {
        var mh$ = I_RpcWindowProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcWindowProc", hWnd, Message, wParam, lParam);
            }
            return (int)mh$.invokeExact(hWnd, Message, wParam, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUnregisterEndpointA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointA$descriptor() {
        return I_RpcServerUnregisterEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointA$handle() {
        return I_RpcServerUnregisterEndpointA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointA(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointA", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUnregisterEndpointW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointW$descriptor() {
        return I_RpcServerUnregisterEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointW$handle() {
        return I_RpcServerUnregisterEndpointW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointW(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointW", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerInqTransportType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqTransportType$descriptor() {
        return I_RpcServerInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcServerInqTransportType$handle() {
        return I_RpcServerInqTransportType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static int I_RpcServerInqTransportType(MemorySegment Type) {
        var mh$ = I_RpcServerInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqTransportType", Type);
            }
            return (int)mh$.invokeExact(Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMapWin32Status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcMapWin32Status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor I_RpcMapWin32Status$descriptor() {
        return I_RpcMapWin32Status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static MethodHandle I_RpcMapWin32Status$handle() {
        return I_RpcMapWin32Status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static int I_RpcMapWin32Status(int Status) {
        var mh$ = I_RpcMapWin32Status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMapWin32Status", Status);
            }
            return (int)mh$.invokeExact(Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcCurrentUniqueUser = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcCurrentUniqueUser = 1
     * }
     */
    public static int RpcCurrentUniqueUser() {
        return RpcCurrentUniqueUser;
    }
    private static final int RpcBackEndConnectionAttempts = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionAttempts = 2
     * }
     */
    public static int RpcBackEndConnectionAttempts() {
        return RpcBackEndConnectionAttempts;
    }
    private static final int RpcBackEndConnectionFailed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionFailed = 3
     * }
     */
    public static int RpcBackEndConnectionFailed() {
        return RpcBackEndConnectionFailed;
    }
    private static final int RpcRequestsPerSecond = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcRequestsPerSecond = 4
     * }
     */
    public static int RpcRequestsPerSecond() {
        return RpcRequestsPerSecond;
    }
    private static final int RpcIncomingConnections = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingConnections = 5
     * }
     */
    public static int RpcIncomingConnections() {
        return RpcIncomingConnections;
    }
    private static final int RpcIncomingBandwidth = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingBandwidth = 6
     * }
     */
    public static int RpcIncomingBandwidth() {
        return RpcIncomingBandwidth;
    }
    private static final int RpcOutgoingBandwidth = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcOutgoingBandwidth = 7
     * }
     */
    public static int RpcOutgoingBandwidth() {
        return RpcOutgoingBandwidth;
    }
    private static final int RpcAttemptedLbsDecisions = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsDecisions = 8
     * }
     */
    public static int RpcAttemptedLbsDecisions() {
        return RpcAttemptedLbsDecisions;
    }
    private static final int RpcFailedLbsDecisions = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsDecisions = 9
     * }
     */
    public static int RpcFailedLbsDecisions() {
        return RpcFailedLbsDecisions;
    }
    private static final int RpcAttemptedLbsMessages = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsMessages = 10
     * }
     */
    public static int RpcAttemptedLbsMessages() {
        return RpcAttemptedLbsMessages;
    }
    private static final int RpcFailedLbsMessages = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsMessages = 11
     * }
     */
    public static int RpcFailedLbsMessages() {
        return RpcFailedLbsMessages;
    }
    private static final int RpcLastCounter = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcLastCounter = 12
     * }
     */
    public static int RpcLastCounter() {
        return RpcLastCounter;
    }

    private static class I_RpcProxyNewConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcProxyNewConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static FunctionDescriptor I_RpcProxyNewConnection$descriptor() {
        return I_RpcProxyNewConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static MethodHandle I_RpcProxyNewConnection$handle() {
        return I_RpcProxyNewConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static int I_RpcProxyNewConnection(int ConnectionType, MemorySegment ServerAddress, MemorySegment ServerPort, MemorySegment MinConnTimeout, MemorySegment ConnectionParameter, MemorySegment CallOutState, MemorySegment ProxyCallbackInterface) {
        var mh$ = I_RpcProxyNewConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcProxyNewConnection", ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
            }
            return (int)mh$.invokeExact(ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReplyToClientWithStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcReplyToClientWithStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static FunctionDescriptor I_RpcReplyToClientWithStatus$descriptor() {
        return I_RpcReplyToClientWithStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static MethodHandle I_RpcReplyToClientWithStatus$handle() {
        return I_RpcReplyToClientWithStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static int I_RpcReplyToClientWithStatus(MemorySegment ConnectionParameter, int RpcStatus) {
        var mh$ = I_RpcReplyToClientWithStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReplyToClientWithStatus", ConnectionParameter, RpcStatus);
            }
            return (int)mh$.invokeExact(ConnectionParameter, RpcStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcRecordCalloutFailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcRecordCalloutFailure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static FunctionDescriptor I_RpcRecordCalloutFailure$descriptor() {
        return I_RpcRecordCalloutFailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static MethodHandle I_RpcRecordCalloutFailure$handle() {
        return I_RpcRecordCalloutFailure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static void I_RpcRecordCalloutFailure(int RpcStatus, MemorySegment CallOutState, MemorySegment DllName) {
        var mh$ = I_RpcRecordCalloutFailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRecordCalloutFailure", RpcStatus, CallOutState, DllName);
            }
            mh$.invokeExact(RpcStatus, CallOutState, DllName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMgmtEnableDedicatedThreadPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcMgmtEnableDedicatedThreadPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static FunctionDescriptor I_RpcMgmtEnableDedicatedThreadPool$descriptor() {
        return I_RpcMgmtEnableDedicatedThreadPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static MethodHandle I_RpcMgmtEnableDedicatedThreadPool$handle() {
        return I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static int I_RpcMgmtEnableDedicatedThreadPool() {
        var mh$ = I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMgmtEnableDedicatedThreadPool");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetDefaultSD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcGetDefaultSD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static FunctionDescriptor I_RpcGetDefaultSD$descriptor() {
        return I_RpcGetDefaultSD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static MethodHandle I_RpcGetDefaultSD$handle() {
        return I_RpcGetDefaultSD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static int I_RpcGetDefaultSD(MemorySegment ppSecurityDescriptor) {
        var mh$ = I_RpcGetDefaultSD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetDefaultSD", ppSecurityDescriptor);
            }
            return (int)mh$.invokeExact(ppSecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcOpenClientProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcOpenClientProcess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static FunctionDescriptor I_RpcOpenClientProcess$descriptor() {
        return I_RpcOpenClientProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static MethodHandle I_RpcOpenClientProcess$handle() {
        return I_RpcOpenClientProcess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static int I_RpcOpenClientProcess(MemorySegment Binding, int DesiredAccess, MemorySegment ClientProcess) {
        var mh$ = I_RpcOpenClientProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcOpenClientProcess", Binding, DesiredAccess, ClientProcess);
            }
            return (int)mh$.invokeExact(Binding, DesiredAccess, ClientProcess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsServerLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingIsServerLocal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsServerLocal$descriptor() {
        return I_RpcBindingIsServerLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsServerLocal$handle() {
        return I_RpcBindingIsServerLocal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static int I_RpcBindingIsServerLocal(MemorySegment Binding, MemorySegment ServerLocalFlag) {
        var mh$ = I_RpcBindingIsServerLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsServerLocal", Binding, ServerLocalFlag);
            }
            return (int)mh$.invokeExact(Binding, ServerLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetPrivateOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcBindingSetPrivateOption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetPrivateOption$descriptor() {
        return I_RpcBindingSetPrivateOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle I_RpcBindingSetPrivateOption$handle() {
        return I_RpcBindingSetPrivateOption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int I_RpcBindingSetPrivateOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = I_RpcBindingSetPrivateOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetPrivateOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerSubscribeForDisconnectNotification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification$handle() {
        return I_RpcServerSubscribeForDisconnectNotification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment hEvent) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification", Binding, hEvent);
            }
            return (int)mh$.invokeExact(Binding, hEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerGetAssociationID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerGetAssociationID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static FunctionDescriptor I_RpcServerGetAssociationID$descriptor() {
        return I_RpcServerGetAssociationID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static MethodHandle I_RpcServerGetAssociationID$handle() {
        return I_RpcServerGetAssociationID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static int I_RpcServerGetAssociationID(MemorySegment Binding, MemorySegment AssociationID) {
        var mh$ = I_RpcServerGetAssociationID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerGetAssociationID", Binding, AssociationID);
            }
            return (int)mh$.invokeExact(Binding, AssociationID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerDisableExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerDisableExceptionFilter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static FunctionDescriptor I_RpcServerDisableExceptionFilter$descriptor() {
        return I_RpcServerDisableExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static MethodHandle I_RpcServerDisableExceptionFilter$handle() {
        return I_RpcServerDisableExceptionFilter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static int I_RpcServerDisableExceptionFilter() {
        var mh$ = I_RpcServerDisableExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerDisableExceptionFilter");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerSubscribeForDisconnectNotification2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification2$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification2$handle() {
        return I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification2(MemorySegment Binding, MemorySegment hEvent, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification2", Binding, hEvent, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, hEvent, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnsubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            _GUID.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("I_RpcServerUnsubscribeForDisconnectNotification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnsubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerUnsubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerUnsubscribeForDisconnectNotification$handle() {
        return I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static int I_RpcServerUnsubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnsubscribeForDisconnectNotification", Binding, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_NS_HANDLE
     * }
     */
    public static final AddressLayout RPC_NS_HANDLE = C_POINTER;

    private static class RpcNsBindingExportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingExportA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportA$descriptor() {
        return RpcNsBindingExportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportA$handle() {
        return RpcNsBindingExportA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportA", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingUnexportA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportA$descriptor() {
        return RpcNsBindingUnexportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportA$handle() {
        return RpcNsBindingUnexportA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportA", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingExportW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportW$descriptor() {
        return RpcNsBindingExportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportW$handle() {
        return RpcNsBindingExportW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportW", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingUnexportW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportW$descriptor() {
        return RpcNsBindingUnexportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportW$handle() {
        return RpcNsBindingUnexportW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportW", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingExportPnPA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPA$descriptor() {
        return RpcNsBindingExportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPA$handle() {
        return RpcNsBindingExportPnPA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingUnexportPnPA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPA$descriptor() {
        return RpcNsBindingUnexportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPA$handle() {
        return RpcNsBindingUnexportPnPA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingExportPnPW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPW$descriptor() {
        return RpcNsBindingExportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPW$handle() {
        return RpcNsBindingExportPnPW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingUnexportPnPW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPW$descriptor() {
        return RpcNsBindingUnexportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPW$handle() {
        return RpcNsBindingUnexportPnPW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingLookupBeginA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginA$descriptor() {
        return RpcNsBindingLookupBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginA$handle() {
        return RpcNsBindingLookupBeginA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginA", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingLookupBeginW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginW$descriptor() {
        return RpcNsBindingLookupBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginW$handle() {
        return RpcNsBindingLookupBeginW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginW", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingLookupNext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupNext$descriptor() {
        return RpcNsBindingLookupNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static MethodHandle RpcNsBindingLookupNext$handle() {
        return RpcNsBindingLookupNext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static int RpcNsBindingLookupNext(MemorySegment LookupContext, MemorySegment BindingVec) {
        var mh$ = RpcNsBindingLookupNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupNext", LookupContext, BindingVec);
            }
            return (int)mh$.invokeExact(LookupContext, BindingVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsBindingLookupDone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupDone$descriptor() {
        return RpcNsBindingLookupDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupDone$handle() {
        return RpcNsBindingLookupDone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupDone(MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupDone", LookupContext);
            }
            return (int)mh$.invokeExact(LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupDeleteA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteA$descriptor() {
        return RpcNsGroupDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteA$handle() {
        return RpcNsGroupDeleteA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteA(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteA", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrAddA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddA$descriptor() {
        return RpcNsGroupMbrAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddA$handle() {
        return RpcNsGroupMbrAddA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrRemoveA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveA$descriptor() {
        return RpcNsGroupMbrRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveA$handle() {
        return RpcNsGroupMbrRemoveA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrInqBeginA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginA$descriptor() {
        return RpcNsGroupMbrInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginA$handle() {
        return RpcNsGroupMbrInqBeginA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginA", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrInqNextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextA$descriptor() {
        return RpcNsGroupMbrInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextA$handle() {
        return RpcNsGroupMbrInqNextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextA(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextA", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupDeleteW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteW$descriptor() {
        return RpcNsGroupDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteW$handle() {
        return RpcNsGroupDeleteW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteW(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteW", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrAddW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddW$descriptor() {
        return RpcNsGroupMbrAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddW$handle() {
        return RpcNsGroupMbrAddW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrRemoveW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveW$descriptor() {
        return RpcNsGroupMbrRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveW$handle() {
        return RpcNsGroupMbrRemoveW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrInqBeginW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginW$descriptor() {
        return RpcNsGroupMbrInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginW$handle() {
        return RpcNsGroupMbrInqBeginW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginW", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrInqNextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextW$descriptor() {
        return RpcNsGroupMbrInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextW$handle() {
        return RpcNsGroupMbrInqNextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextW(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextW", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsGroupMbrInqDone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqDone$descriptor() {
        return RpcNsGroupMbrInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqDone$handle() {
        return RpcNsGroupMbrInqDone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileDeleteA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteA$descriptor() {
        return RpcNsProfileDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteA$handle() {
        return RpcNsProfileDeleteA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteA(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteA", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltAddA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddA$descriptor() {
        return RpcNsProfileEltAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddA$handle() {
        return RpcNsProfileEltAddA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltRemoveA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveA$descriptor() {
        return RpcNsProfileEltRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveA$handle() {
        return RpcNsProfileEltRemoveA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltInqBeginA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginA$descriptor() {
        return RpcNsProfileEltInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginA$handle() {
        return RpcNsProfileEltInqBeginA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginA(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginA", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltInqNextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextA$descriptor() {
        return RpcNsProfileEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextA$handle() {
        return RpcNsProfileEltInqNextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextA", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileDeleteW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteW$descriptor() {
        return RpcNsProfileDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteW$handle() {
        return RpcNsProfileDeleteW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteW(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteW", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltAddW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddW$descriptor() {
        return RpcNsProfileEltAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddW$handle() {
        return RpcNsProfileEltAddW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltRemoveW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveW$descriptor() {
        return RpcNsProfileEltRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveW$handle() {
        return RpcNsProfileEltRemoveW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltInqBeginW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginW$descriptor() {
        return RpcNsProfileEltInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginW$handle() {
        return RpcNsProfileEltInqBeginW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginW(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginW", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltInqNextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextW$descriptor() {
        return RpcNsProfileEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextW$handle() {
        return RpcNsProfileEltInqNextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextW", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsProfileEltInqDone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqDone$descriptor() {
        return RpcNsProfileEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqDone$handle() {
        return RpcNsProfileEltInqDone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RpcNsEntryObjectInqBeginA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqBeginA$descriptor() {
        return RpcNsEntryObjectInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqBeginA$handle() {
        return RpcNsEntryObjectInqBeginA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqBeginA", EntryNameSyntax, EntryName, InquiryContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}


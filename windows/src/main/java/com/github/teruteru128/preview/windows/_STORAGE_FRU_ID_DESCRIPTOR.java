// Generated by jextract

package com.github.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_FRU_ID_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD IdentifierSize;
 *     BYTE Identifier[1];
 * }
 * }
 */
public class _STORAGE_FRU_ID_DESCRIPTOR {

    _STORAGE_FRU_ID_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_LONG.withName("Version"),
        Windows_h.C_LONG.withName("Size"),
        Windows_h.C_LONG.withName("IdentifierSize"),
        MemoryLayout.sequenceLayout(1, Windows_h.C_CHAR).withName("Identifier"),
        MemoryLayout.paddingLayout(3)
    ).withName("_STORAGE_FRU_ID_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt IdentifierSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("IdentifierSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD IdentifierSize
     * }
     */
    public static final OfInt IdentifierSize$layout() {
        return IdentifierSize$LAYOUT;
    }

    private static final long IdentifierSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD IdentifierSize
     * }
     */
    public static final long IdentifierSize$offset() {
        return IdentifierSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD IdentifierSize
     * }
     */
    public static int IdentifierSize(MemorySegment struct) {
        return struct.get(IdentifierSize$LAYOUT, IdentifierSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD IdentifierSize
     * }
     */
    public static void IdentifierSize(MemorySegment struct, int fieldValue) {
        struct.set(IdentifierSize$LAYOUT, IdentifierSize$OFFSET, fieldValue);
    }

    private static final SequenceLayout Identifier$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Identifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static final SequenceLayout Identifier$layout() {
        return Identifier$LAYOUT;
    }

    private static final long Identifier$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static final long Identifier$offset() {
        return Identifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static MemorySegment Identifier(MemorySegment struct) {
        return struct.asSlice(Identifier$OFFSET, Identifier$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static void Identifier(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Identifier$OFFSET, Identifier$LAYOUT.byteSize());
    }

    private static long[] Identifier$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static long[] Identifier$dimensions() {
        return Identifier$DIMS;
    }
    private static final VarHandle Identifier$ELEM_HANDLE = Identifier$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static byte Identifier(MemorySegment struct, long index0) {
        return (byte)Identifier$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Identifier[1]
     * }
     */
    public static void Identifier(MemorySegment struct, long index0, byte fieldValue) {
        Identifier$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


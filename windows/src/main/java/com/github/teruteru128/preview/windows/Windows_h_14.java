// Generated by jextract

package com.github.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Windows_h_14 extends Windows_h_15 {

    Windows_h_14() {
        // Should not be called directly
    }

    private static class VarI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR8$descriptor() {
        return VarI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR8$handle() {
        return VarI8FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromCy$descriptor() {
        return VarI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromCy$handle() {
        return VarI8FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDate$descriptor() {
        return VarI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDate$handle() {
        return VarI8FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromStr$descriptor() {
        return VarI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromStr$handle() {
        return VarI8FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDisp$descriptor() {
        return VarI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDisp$handle() {
        return VarI8FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromBool$descriptor() {
        return VarI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromBool$handle() {
        return VarI8FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI1$descriptor() {
        return VarI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI1$handle() {
        return VarI8FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI2$descriptor() {
        return VarI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI2$handle() {
        return VarI8FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI4$descriptor() {
        return VarI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI4$handle() {
        return VarI8FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI8$descriptor() {
        return VarI8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI8$handle() {
        return VarI8FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI8FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDec$descriptor() {
        return VarI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDec$handle() {
        return VarI8FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI1$descriptor() {
        return VarR4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI1$handle() {
        return VarR4FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI1(byte bIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI1", bIn, pfltOut);
            }
            return (int)mh$.invokeExact(bIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI2$descriptor() {
        return VarR4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI2$handle() {
        return VarR4FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI2(short sIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI2", sIn, pfltOut);
            }
            return (int)mh$.invokeExact(sIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI4$descriptor() {
        return VarR4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI4$handle() {
        return VarR4FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI4(int lIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI4", lIn, pfltOut);
            }
            return (int)mh$.invokeExact(lIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI8$descriptor() {
        return VarR4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI8$handle() {
        return VarR4FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI8(long i64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI8", i64In, pfltOut);
            }
            return (int)mh$.invokeExact(i64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromR8$descriptor() {
        return VarR4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromR8$handle() {
        return VarR4FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromR8(double dblIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromR8", dblIn, pfltOut);
            }
            return (int)mh$.invokeExact(dblIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromCy$descriptor() {
        return VarR4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromCy$handle() {
        return VarR4FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromCy(MemorySegment cyIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromCy", cyIn, pfltOut);
            }
            return (int)mh$.invokeExact(cyIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDate$descriptor() {
        return VarR4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDate$handle() {
        return VarR4FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDate(double dateIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDate", dateIn, pfltOut);
            }
            return (int)mh$.invokeExact(dateIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromStr$descriptor() {
        return VarR4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromStr$handle() {
        return VarR4FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pfltOut) {
        var mh$ = VarR4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromStr", strIn, lcid, dwFlags, pfltOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDisp$descriptor() {
        return VarR4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDisp$handle() {
        return VarR4FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pfltOut) {
        var mh$ = VarR4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDisp", pdispIn, lcid, pfltOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromBool$descriptor() {
        return VarR4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromBool$handle() {
        return VarR4FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromBool(short boolIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromBool", boolIn, pfltOut);
            }
            return (int)mh$.invokeExact(boolIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI1$descriptor() {
        return VarR4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI1$handle() {
        return VarR4FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI1(byte cIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI1", cIn, pfltOut);
            }
            return (int)mh$.invokeExact(cIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI2$descriptor() {
        return VarR4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI2$handle() {
        return VarR4FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI2(short uiIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI2", uiIn, pfltOut);
            }
            return (int)mh$.invokeExact(uiIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI4$descriptor() {
        return VarR4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI4$handle() {
        return VarR4FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI4(int ulIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI4", ulIn, pfltOut);
            }
            return (int)mh$.invokeExact(ulIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI8$descriptor() {
        return VarR4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI8$handle() {
        return VarR4FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI8(long ui64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI8", ui64In, pfltOut);
            }
            return (int)mh$.invokeExact(ui64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDec$descriptor() {
        return VarR4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDec$handle() {
        return VarR4FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDec(MemorySegment pdecIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDec", pdecIn, pfltOut);
            }
            return (int)mh$.invokeExact(pdecIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI1$descriptor() {
        return VarR8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI1$handle() {
        return VarR8FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI1(byte bIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI1", bIn, pdblOut);
            }
            return (int)mh$.invokeExact(bIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI2$descriptor() {
        return VarR8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI2$handle() {
        return VarR8FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI2(short sIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI2", sIn, pdblOut);
            }
            return (int)mh$.invokeExact(sIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI4$descriptor() {
        return VarR8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI4$handle() {
        return VarR8FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI4(int lIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI4", lIn, pdblOut);
            }
            return (int)mh$.invokeExact(lIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI8$descriptor() {
        return VarR8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI8$handle() {
        return VarR8FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI8(long i64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI8", i64In, pdblOut);
            }
            return (int)mh$.invokeExact(i64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromR4$descriptor() {
        return VarR8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromR4$handle() {
        return VarR8FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromR4(float fltIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromR4", fltIn, pdblOut);
            }
            return (int)mh$.invokeExact(fltIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromCy$descriptor() {
        return VarR8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromCy$handle() {
        return VarR8FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromCy(MemorySegment cyIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromCy", cyIn, pdblOut);
            }
            return (int)mh$.invokeExact(cyIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDate$descriptor() {
        return VarR8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDate$handle() {
        return VarR8FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDate(double dateIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDate", dateIn, pdblOut);
            }
            return (int)mh$.invokeExact(dateIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromStr$descriptor() {
        return VarR8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromStr$handle() {
        return VarR8FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdblOut) {
        var mh$ = VarR8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromStr", strIn, lcid, dwFlags, pdblOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDisp$descriptor() {
        return VarR8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDisp$handle() {
        return VarR8FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdblOut) {
        var mh$ = VarR8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDisp", pdispIn, lcid, pdblOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromBool$descriptor() {
        return VarR8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromBool$handle() {
        return VarR8FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromBool(short boolIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromBool", boolIn, pdblOut);
            }
            return (int)mh$.invokeExact(boolIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI1$descriptor() {
        return VarR8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI1$handle() {
        return VarR8FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI1(byte cIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI1", cIn, pdblOut);
            }
            return (int)mh$.invokeExact(cIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI2$descriptor() {
        return VarR8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI2$handle() {
        return VarR8FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI2(short uiIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI2", uiIn, pdblOut);
            }
            return (int)mh$.invokeExact(uiIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI4$descriptor() {
        return VarR8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI4$handle() {
        return VarR8FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI4(int ulIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI4", ulIn, pdblOut);
            }
            return (int)mh$.invokeExact(ulIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI8$descriptor() {
        return VarR8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI8$handle() {
        return VarR8FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI8(long ui64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI8", ui64In, pdblOut);
            }
            return (int)mh$.invokeExact(ui64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDec$descriptor() {
        return VarR8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDec$handle() {
        return VarR8FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDec(MemorySegment pdecIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDec", pdecIn, pdblOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI1$descriptor() {
        return VarDateFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI1$handle() {
        return VarDateFromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI1(byte bIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI1", bIn, pdateOut);
            }
            return (int)mh$.invokeExact(bIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI2$descriptor() {
        return VarDateFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI2$handle() {
        return VarDateFromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI2(short sIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI2", sIn, pdateOut);
            }
            return (int)mh$.invokeExact(sIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI4$descriptor() {
        return VarDateFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI4$handle() {
        return VarDateFromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI4(int lIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI4", lIn, pdateOut);
            }
            return (int)mh$.invokeExact(lIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI8$descriptor() {
        return VarDateFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI8$handle() {
        return VarDateFromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI8(long i64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI8", i64In, pdateOut);
            }
            return (int)mh$.invokeExact(i64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR4$descriptor() {
        return VarDateFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR4$handle() {
        return VarDateFromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR4(float fltIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR4", fltIn, pdateOut);
            }
            return (int)mh$.invokeExact(fltIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR8$descriptor() {
        return VarDateFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR8$handle() {
        return VarDateFromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR8(double dblIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR8", dblIn, pdateOut);
            }
            return (int)mh$.invokeExact(dblIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromCy$descriptor() {
        return VarDateFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromCy$handle() {
        return VarDateFromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromCy(MemorySegment cyIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromCy", cyIn, pdateOut);
            }
            return (int)mh$.invokeExact(cyIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromStr$descriptor() {
        return VarDateFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromStr$handle() {
        return VarDateFromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromStr", strIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDisp$descriptor() {
        return VarDateFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDisp$handle() {
        return VarDateFromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdateOut) {
        var mh$ = VarDateFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDisp", pdispIn, lcid, pdateOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromBool$descriptor() {
        return VarDateFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromBool$handle() {
        return VarDateFromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromBool(short boolIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromBool", boolIn, pdateOut);
            }
            return (int)mh$.invokeExact(boolIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI1$descriptor() {
        return VarDateFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI1$handle() {
        return VarDateFromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI1(byte cIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI1", cIn, pdateOut);
            }
            return (int)mh$.invokeExact(cIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI2$descriptor() {
        return VarDateFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI2$handle() {
        return VarDateFromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI2(short uiIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI2", uiIn, pdateOut);
            }
            return (int)mh$.invokeExact(uiIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI4$descriptor() {
        return VarDateFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI4$handle() {
        return VarDateFromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI4(int ulIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI4", ulIn, pdateOut);
            }
            return (int)mh$.invokeExact(ulIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI8$descriptor() {
        return VarDateFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI8$handle() {
        return VarDateFromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI8(long ui64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI8", ui64In, pdateOut);
            }
            return (int)mh$.invokeExact(ui64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDec$descriptor() {
        return VarDateFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDec$handle() {
        return VarDateFromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDec(MemorySegment pdecIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDec", pdecIn, pdateOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI1$descriptor() {
        return VarCyFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI1$handle() {
        return VarCyFromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI1(byte bIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI1", bIn, pcyOut);
            }
            return (int)mh$.invokeExact(bIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI2$descriptor() {
        return VarCyFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI2$handle() {
        return VarCyFromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI2(short sIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI2", sIn, pcyOut);
            }
            return (int)mh$.invokeExact(sIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI4$descriptor() {
        return VarCyFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI4$handle() {
        return VarCyFromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI4(int lIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI4", lIn, pcyOut);
            }
            return (int)mh$.invokeExact(lIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI8$descriptor() {
        return VarCyFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI8$handle() {
        return VarCyFromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromI8(long i64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI8", i64In, pcyOut);
            }
            return (int)mh$.invokeExact(i64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR4$descriptor() {
        return VarCyFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR4$handle() {
        return VarCyFromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR4(float fltIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR4", fltIn, pcyOut);
            }
            return (int)mh$.invokeExact(fltIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR8$descriptor() {
        return VarCyFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR8$handle() {
        return VarCyFromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR8(double dblIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR8", dblIn, pcyOut);
            }
            return (int)mh$.invokeExact(dblIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDate$descriptor() {
        return VarCyFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDate$handle() {
        return VarCyFromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDate(double dateIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDate", dateIn, pcyOut);
            }
            return (int)mh$.invokeExact(dateIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromStr$descriptor() {
        return VarCyFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromStr$handle() {
        return VarCyFromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static int VarCyFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcyOut) {
        var mh$ = VarCyFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromStr", strIn, lcid, dwFlags, pcyOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDisp$descriptor() {
        return VarCyFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDisp$handle() {
        return VarCyFromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static int VarCyFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcyOut) {
        var mh$ = VarCyFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDisp", pdispIn, lcid, pcyOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromBool$descriptor() {
        return VarCyFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromBool$handle() {
        return VarCyFromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromBool(short boolIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromBool", boolIn, pcyOut);
            }
            return (int)mh$.invokeExact(boolIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI1$descriptor() {
        return VarCyFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI1$handle() {
        return VarCyFromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI1(byte cIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI1", cIn, pcyOut);
            }
            return (int)mh$.invokeExact(cIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI2$descriptor() {
        return VarCyFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI2$handle() {
        return VarCyFromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI2(short uiIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI2", uiIn, pcyOut);
            }
            return (int)mh$.invokeExact(uiIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI4$descriptor() {
        return VarCyFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI4$handle() {
        return VarCyFromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI4(int ulIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI4", ulIn, pcyOut);
            }
            return (int)mh$.invokeExact(ulIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI8$descriptor() {
        return VarCyFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI8$handle() {
        return VarCyFromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI8(long ui64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI8", ui64In, pcyOut);
            }
            return (int)mh$.invokeExact(ui64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDec$descriptor() {
        return VarCyFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDec$handle() {
        return VarCyFromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDec(MemorySegment pdecIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDec", pdecIn, pcyOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI1$descriptor() {
        return VarBstrFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI1$handle() {
        return VarBstrFromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI1(byte bVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI1", bVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(bVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI2$descriptor() {
        return VarBstrFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI2$handle() {
        return VarBstrFromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI2(short iVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI2", iVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI4$descriptor() {
        return VarBstrFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI4$handle() {
        return VarBstrFromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI4(int lIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI4", lIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(lIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI8$descriptor() {
        return VarBstrFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI8$handle() {
        return VarBstrFromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI8(long i64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI8", i64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(i64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR4$descriptor() {
        return VarBstrFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR4$handle() {
        return VarBstrFromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR4(float fltIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR4", fltIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(fltIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR8$descriptor() {
        return VarBstrFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR8$handle() {
        return VarBstrFromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR8(double dblIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR8", dblIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dblIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromCy$descriptor() {
        return VarBstrFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromCy$handle() {
        return VarBstrFromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromCy(MemorySegment cyIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromCy", cyIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cyIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDate$descriptor() {
        return VarBstrFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDate$handle() {
        return VarBstrFromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDate(double dateIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDate", dateIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dateIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDisp$descriptor() {
        return VarBstrFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDisp$handle() {
        return VarBstrFromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDisp(MemorySegment pdispIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDisp", pdispIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromBool$descriptor() {
        return VarBstrFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromBool$handle() {
        return VarBstrFromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromBool(short boolIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromBool", boolIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(boolIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI1$descriptor() {
        return VarBstrFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI1$handle() {
        return VarBstrFromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI1(byte cIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI1", cIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI2$descriptor() {
        return VarBstrFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI2$handle() {
        return VarBstrFromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI2(short uiIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI2", uiIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(uiIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI4$descriptor() {
        return VarBstrFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI4$handle() {
        return VarBstrFromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI4(int ulIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI4", ulIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ulIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI8$descriptor() {
        return VarBstrFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI8$handle() {
        return VarBstrFromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI8(long ui64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI8", ui64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ui64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrFromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDec$descriptor() {
        return VarBstrFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDec$handle() {
        return VarBstrFromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDec(MemorySegment pdecIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDec", pdecIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdecIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI1$descriptor() {
        return VarBoolFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI1$handle() {
        return VarBoolFromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI1(byte bIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI1", bIn, pboolOut);
            }
            return (int)mh$.invokeExact(bIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI2$descriptor() {
        return VarBoolFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI2$handle() {
        return VarBoolFromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI2(short sIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI2", sIn, pboolOut);
            }
            return (int)mh$.invokeExact(sIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI4$descriptor() {
        return VarBoolFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI4$handle() {
        return VarBoolFromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI4(int lIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI4", lIn, pboolOut);
            }
            return (int)mh$.invokeExact(lIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI8$descriptor() {
        return VarBoolFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI8$handle() {
        return VarBoolFromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR4$descriptor() {
        return VarBoolFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR4$handle() {
        return VarBoolFromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR4(float fltIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR4", fltIn, pboolOut);
            }
            return (int)mh$.invokeExact(fltIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR8$descriptor() {
        return VarBoolFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR8$handle() {
        return VarBoolFromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR8(double dblIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR8", dblIn, pboolOut);
            }
            return (int)mh$.invokeExact(dblIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDate$descriptor() {
        return VarBoolFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDate$handle() {
        return VarBoolFromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDate(double dateIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDate", dateIn, pboolOut);
            }
            return (int)mh$.invokeExact(dateIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromCy$descriptor() {
        return VarBoolFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromCy$handle() {
        return VarBoolFromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromCy(MemorySegment cyIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromCy", cyIn, pboolOut);
            }
            return (int)mh$.invokeExact(cyIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromStr$descriptor() {
        return VarBoolFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromStr$handle() {
        return VarBoolFromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pboolOut) {
        var mh$ = VarBoolFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromStr", strIn, lcid, dwFlags, pboolOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDisp$descriptor() {
        return VarBoolFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDisp$handle() {
        return VarBoolFromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDisp", pdispIn, lcid, pboolOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI1$descriptor() {
        return VarBoolFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI1$handle() {
        return VarBoolFromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI1(byte cIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI1", cIn, pboolOut);
            }
            return (int)mh$.invokeExact(cIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI2$descriptor() {
        return VarBoolFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI2$handle() {
        return VarBoolFromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI2(short uiIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI2", uiIn, pboolOut);
            }
            return (int)mh$.invokeExact(uiIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI4$descriptor() {
        return VarBoolFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI4$handle() {
        return VarBoolFromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI4(int ulIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI4", ulIn, pboolOut);
            }
            return (int)mh$.invokeExact(ulIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI8$descriptor() {
        return VarBoolFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI8$handle() {
        return VarBoolFromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBoolFromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDec$descriptor() {
        return VarBoolFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDec$handle() {
        return VarBoolFromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDec(MemorySegment pdecIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDec", pdecIn, pboolOut);
            }
            return (int)mh$.invokeExact(pdecIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI1$descriptor() {
        return VarI1FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI1$handle() {
        return VarI1FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI1(byte bIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI1", bIn, pcOut);
            }
            return (int)mh$.invokeExact(bIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI2$descriptor() {
        return VarI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI2$handle() {
        return VarI1FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI4$descriptor() {
        return VarI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI4$handle() {
        return VarI1FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI4(int lIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI4", lIn, pcOut);
            }
            return (int)mh$.invokeExact(lIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI8$descriptor() {
        return VarI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI8$handle() {
        return VarI1FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR4$descriptor() {
        return VarI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR4$handle() {
        return VarI1FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR4(float fltIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR4", fltIn, pcOut);
            }
            return (int)mh$.invokeExact(fltIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR8$descriptor() {
        return VarI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR8$handle() {
        return VarI1FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR8(double dblIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR8", dblIn, pcOut);
            }
            return (int)mh$.invokeExact(dblIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDate$descriptor() {
        return VarI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDate$handle() {
        return VarI1FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDate(double dateIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDate", dateIn, pcOut);
            }
            return (int)mh$.invokeExact(dateIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromCy$descriptor() {
        return VarI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromCy$handle() {
        return VarI1FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromCy(MemorySegment cyIn, MemorySegment pcOut) {
        var mh$ = VarI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromCy", cyIn, pcOut);
            }
            return (int)mh$.invokeExact(cyIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromStr$descriptor() {
        return VarI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromStr$handle() {
        return VarI1FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static int VarI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcOut) {
        var mh$ = VarI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromStr", strIn, lcid, dwFlags, pcOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDisp$descriptor() {
        return VarI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDisp$handle() {
        return VarI1FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcOut) {
        var mh$ = VarI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDisp", pdispIn, lcid, pcOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromBool$descriptor() {
        return VarI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromBool$handle() {
        return VarI1FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromBool(short boolIn, MemorySegment pcOut) {
        var mh$ = VarI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromBool", boolIn, pcOut);
            }
            return (int)mh$.invokeExact(boolIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI2$descriptor() {
        return VarI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI2$handle() {
        return VarI1FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI4$descriptor() {
        return VarI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI4$handle() {
        return VarI1FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI4(int ulIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI4", ulIn, pcOut);
            }
            return (int)mh$.invokeExact(ulIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI8$descriptor() {
        return VarI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI8$handle() {
        return VarI1FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarI1FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDec$descriptor() {
        return VarI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDec$handle() {
        return VarI1FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDec(MemorySegment pdecIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDec", pdecIn, pcOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI1$descriptor() {
        return VarUI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI1$handle() {
        return VarUI2FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI1(byte bIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI1", bIn, puiOut);
            }
            return (int)mh$.invokeExact(bIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI2$descriptor() {
        return VarUI2FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI2$handle() {
        return VarUI2FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI2(short uiIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI2", uiIn, puiOut);
            }
            return (int)mh$.invokeExact(uiIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI4$descriptor() {
        return VarUI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI4$handle() {
        return VarUI2FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI4(int lIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI4", lIn, puiOut);
            }
            return (int)mh$.invokeExact(lIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI8$descriptor() {
        return VarUI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI8$handle() {
        return VarUI2FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR4$descriptor() {
        return VarUI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR4$handle() {
        return VarUI2FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR4(float fltIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR4", fltIn, puiOut);
            }
            return (int)mh$.invokeExact(fltIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR8$descriptor() {
        return VarUI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR8$handle() {
        return VarUI2FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR8(double dblIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR8", dblIn, puiOut);
            }
            return (int)mh$.invokeExact(dblIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDate$descriptor() {
        return VarUI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDate$handle() {
        return VarUI2FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDate(double dateIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDate", dateIn, puiOut);
            }
            return (int)mh$.invokeExact(dateIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromCy$descriptor() {
        return VarUI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromCy$handle() {
        return VarUI2FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromCy(MemorySegment cyIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromCy", cyIn, puiOut);
            }
            return (int)mh$.invokeExact(cyIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromStr$descriptor() {
        return VarUI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromStr$handle() {
        return VarUI2FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment puiOut) {
        var mh$ = VarUI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromStr", strIn, lcid, dwFlags, puiOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDisp$descriptor() {
        return VarUI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDisp$handle() {
        return VarUI2FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment puiOut) {
        var mh$ = VarUI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDisp", pdispIn, lcid, puiOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromBool$descriptor() {
        return VarUI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromBool$handle() {
        return VarUI2FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromBool(short boolIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromBool", boolIn, puiOut);
            }
            return (int)mh$.invokeExact(boolIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI1$descriptor() {
        return VarUI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI1$handle() {
        return VarUI2FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI1(byte cIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI1", cIn, puiOut);
            }
            return (int)mh$.invokeExact(cIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI4$descriptor() {
        return VarUI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI4$handle() {
        return VarUI2FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI4(int ulIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI4", ulIn, puiOut);
            }
            return (int)mh$.invokeExact(ulIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI8$descriptor() {
        return VarUI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI8$handle() {
        return VarUI2FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI2FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDec$descriptor() {
        return VarUI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDec$handle() {
        return VarUI2FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDec(MemorySegment pdecIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDec", pdecIn, puiOut);
            }
            return (int)mh$.invokeExact(pdecIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI1$descriptor() {
        return VarUI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI1$handle() {
        return VarUI4FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI1(byte bIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI1", bIn, pulOut);
            }
            return (int)mh$.invokeExact(bIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI2$descriptor() {
        return VarUI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI2$handle() {
        return VarUI4FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI4$descriptor() {
        return VarUI4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI4$handle() {
        return VarUI4FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI4(int lIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI4", lIn, pulOut);
            }
            return (int)mh$.invokeExact(lIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI8$descriptor() {
        return VarUI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromI8$handle() {
        return VarUI4FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarUI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR4$descriptor() {
        return VarUI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR4$handle() {
        return VarUI4FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR4(float fltIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR4", fltIn, pulOut);
            }
            return (int)mh$.invokeExact(fltIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR8$descriptor() {
        return VarUI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR8$handle() {
        return VarUI4FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR8(double dblIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR8", dblIn, pulOut);
            }
            return (int)mh$.invokeExact(dblIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDate$descriptor() {
        return VarUI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDate$handle() {
        return VarUI4FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDate(double dateIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDate", dateIn, pulOut);
            }
            return (int)mh$.invokeExact(dateIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromCy$descriptor() {
        return VarUI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromCy$handle() {
        return VarUI4FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromCy(MemorySegment cyIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromCy", cyIn, pulOut);
            }
            return (int)mh$.invokeExact(cyIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromStr$descriptor() {
        return VarUI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromStr$handle() {
        return VarUI4FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pulOut) {
        var mh$ = VarUI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromStr", strIn, lcid, dwFlags, pulOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDisp$descriptor() {
        return VarUI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDisp$handle() {
        return VarUI4FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pulOut) {
        var mh$ = VarUI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDisp", pdispIn, lcid, pulOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromBool$descriptor() {
        return VarUI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromBool$handle() {
        return VarUI4FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromBool(short boolIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromBool", boolIn, pulOut);
            }
            return (int)mh$.invokeExact(boolIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI1$descriptor() {
        return VarUI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI1$handle() {
        return VarUI4FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI1(byte cIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI1", cIn, pulOut);
            }
            return (int)mh$.invokeExact(cIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI2$descriptor() {
        return VarUI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI2$handle() {
        return VarUI4FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI8$descriptor() {
        return VarUI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromUI8$handle() {
        return VarUI4FromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarUI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI4FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDec$descriptor() {
        return VarUI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDec$handle() {
        return VarUI4FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDec(MemorySegment pdecIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDec", pdecIn, pulOut);
            }
            return (int)mh$.invokeExact(pdecIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI1$descriptor() {
        return VarUI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI1$handle() {
        return VarUI8FromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI2$descriptor() {
        return VarUI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI2$handle() {
        return VarUI8FromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI4$descriptor() {
        return VarUI8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI4$handle() {
        return VarUI8FromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI4(int lIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI4", lIn, pi64Out);
            }
            return (int)mh$.invokeExact(lIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI8$descriptor() {
        return VarUI8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI8$handle() {
        return VarUI8FromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR4$descriptor() {
        return VarUI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR4$handle() {
        return VarUI8FromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR8$descriptor() {
        return VarUI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR8$handle() {
        return VarUI8FromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromCy$descriptor() {
        return VarUI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromCy$handle() {
        return VarUI8FromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDate$descriptor() {
        return VarUI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDate$handle() {
        return VarUI8FromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromStr$descriptor() {
        return VarUI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromStr$handle() {
        return VarUI8FromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarUI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDisp$descriptor() {
        return VarUI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDisp$handle() {
        return VarUI8FromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromBool$descriptor() {
        return VarUI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromBool$handle() {
        return VarUI8FromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI1$descriptor() {
        return VarUI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI1$handle() {
        return VarUI8FromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI2$descriptor() {
        return VarUI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI2$handle() {
        return VarUI8FromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI4$descriptor() {
        return VarUI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI4$handle() {
        return VarUI8FromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUI8FromDec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDec$descriptor() {
        return VarUI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDec$handle() {
        return VarUI8FromDec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromUI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI1$descriptor() {
        return VarDecFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI1$handle() {
        return VarDecFromUI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI1(byte bIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI1", bIn, pdecOut);
            }
            return (int)mh$.invokeExact(bIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI2$descriptor() {
        return VarDecFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI2$handle() {
        return VarDecFromI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI4$descriptor() {
        return VarDecFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI4$handle() {
        return VarDecFromI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI4(int lIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI4", lIn, pdecOut);
            }
            return (int)mh$.invokeExact(lIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI8$descriptor() {
        return VarDecFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI8$handle() {
        return VarDecFromI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI8(long i64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI8", i64In, pdecOut);
            }
            return (int)mh$.invokeExact(i64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromR4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR4$descriptor() {
        return VarDecFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR4$handle() {
        return VarDecFromR4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR4(float fltIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR4", fltIn, pdecOut);
            }
            return (int)mh$.invokeExact(fltIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR8$descriptor() {
        return VarDecFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR8$handle() {
        return VarDecFromR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR8(double dblIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR8", dblIn, pdecOut);
            }
            return (int)mh$.invokeExact(dblIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDate$descriptor() {
        return VarDecFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDate$handle() {
        return VarDecFromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDate(double dateIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDate", dateIn, pdecOut);
            }
            return (int)mh$.invokeExact(dateIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromCy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromCy$descriptor() {
        return VarDecFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromCy$handle() {
        return VarDecFromCy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromCy(MemorySegment cyIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromCy", cyIn, pdecOut);
            }
            return (int)mh$.invokeExact(cyIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromStr$descriptor() {
        return VarDecFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromStr$handle() {
        return VarDecFromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdecOut) {
        var mh$ = VarDecFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromStr", strIn, lcid, dwFlags, pdecOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromDisp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDisp$descriptor() {
        return VarDecFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDisp$handle() {
        return VarDecFromDisp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdecOut) {
        var mh$ = VarDecFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDisp", pdispIn, lcid, pdecOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromBool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromBool$descriptor() {
        return VarDecFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromBool$handle() {
        return VarDecFromBool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromBool(short boolIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromBool", boolIn, pdecOut);
            }
            return (int)mh$.invokeExact(boolIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_CHAR,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromI1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI1$descriptor() {
        return VarDecFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI1$handle() {
        return VarDecFromI1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI1(byte cIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI1", cIn, pdecOut);
            }
            return (int)mh$.invokeExact(cIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromUI2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI2$descriptor() {
        return VarDecFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI2$handle() {
        return VarDecFromUI2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromUI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI4$descriptor() {
        return VarDecFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI4$handle() {
        return VarDecFromUI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI4(int ulIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI4", ulIn, pdecOut);
            }
            return (int)mh$.invokeExact(ulIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFromUI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI8$descriptor() {
        return VarDecFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI8$handle() {
        return VarDecFromUI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI8(long ui64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI8", ui64In, pdecOut);
            }
            return (int)mh$.invokeExact(ui64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarParseNumFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarParseNumFromStr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static FunctionDescriptor VarParseNumFromStr$descriptor() {
        return VarParseNumFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static MethodHandle VarParseNumFromStr$handle() {
        return VarParseNumFromStr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static int VarParseNumFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pnumprs, MemorySegment rgbDig) {
        var mh$ = VarParseNumFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarParseNumFromStr", strIn, lcid, dwFlags, pnumprs, rgbDig);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pnumprs, rgbDig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNumFromParseNum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarNumFromParseNum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static FunctionDescriptor VarNumFromParseNum$descriptor() {
        return VarNumFromParseNum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static MethodHandle VarNumFromParseNum$handle() {
        return VarNumFromParseNum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static int VarNumFromParseNum(MemorySegment pnumprs, MemorySegment rgbDig, int dwVtBits, MemorySegment pvar) {
        var mh$ = VarNumFromParseNum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNumFromParseNum", pnumprs, rgbDig, dwVtBits, pvar);
            }
            return (int)mh$.invokeExact(pnumprs, rgbDig, dwVtBits, pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarAdd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAdd$descriptor() {
        return VarAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAdd$handle() {
        return VarAdd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAdd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAdd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarAnd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAnd$descriptor() {
        return VarAnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAnd$handle() {
        return VarAnd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAnd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAnd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarCat$descriptor() {
        return VarCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarCat$handle() {
        return VarCat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarCat(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCat", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDiv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarDiv$descriptor() {
        return VarDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarDiv$handle() {
        return VarDiv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarDiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarEqv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarEqv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarEqv$descriptor() {
        return VarEqv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarEqv$handle() {
        return VarEqv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarEqv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarEqv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarEqv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarIdiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarIdiv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarIdiv$descriptor() {
        return VarIdiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarIdiv$handle() {
        return VarIdiv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarIdiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarIdiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarIdiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarImp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarImp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarImp$descriptor() {
        return VarImp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarImp$handle() {
        return VarImp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarImp(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarImp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarImp", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarMod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMod$descriptor() {
        return VarMod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMod$handle() {
        return VarMod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMod(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMod", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarMul"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMul$descriptor() {
        return VarMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMul$handle() {
        return VarMul.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMul(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMul", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarOr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarOr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarOr$descriptor() {
        return VarOr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarOr$handle() {
        return VarOr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarOr(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarOr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarOr", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarPow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarPow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarPow$descriptor() {
        return VarPow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarPow$handle() {
        return VarPow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarPow(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarPow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarPow", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarSub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarSub$descriptor() {
        return VarSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarSub$handle() {
        return VarSub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarSub(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarSub", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarXor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarXor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarXor$descriptor() {
        return VarXor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarXor$handle() {
        return VarXor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarXor(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarXor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarXor", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarAbs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAbs$descriptor() {
        return VarAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAbs$handle() {
        return VarAbs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarAbs(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAbs", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarFix$descriptor() {
        return VarFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarFix$handle() {
        return VarFix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarFix(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFix", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarInt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarInt$descriptor() {
        return VarInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarInt$handle() {
        return VarInt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarInt(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarInt", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarNeg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNeg$descriptor() {
        return VarNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNeg$handle() {
        return VarNeg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNeg(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNeg", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarNot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNot$descriptor() {
        return VarNot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNot$handle() {
        return VarNot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNot(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNot", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarRound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarRound$descriptor() {
        return VarRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarRound$handle() {
        return VarRound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static int VarRound(MemorySegment pvarIn, int cDecimals, MemorySegment pvarResult) {
        var mh$ = VarRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarRound", pvarIn, cDecimals, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, cDecimals, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarCmp$descriptor() {
        return VarCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarCmp$handle() {
        return VarCmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarCmp(MemorySegment pvarLeft, MemorySegment pvarRight, int lcid, int dwFlags) {
        var mh$ = VarCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCmp", pvarLeft, pvarRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecAdd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAdd$descriptor() {
        return VarDecAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAdd$handle() {
        return VarDecAdd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAdd(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAdd", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecDiv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecDiv$descriptor() {
        return VarDecDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecDiv$handle() {
        return VarDecDiv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecDiv(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecDiv", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecMul"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecMul$descriptor() {
        return VarDecMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecMul$handle() {
        return VarDecMul.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecMul(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecMul", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecSub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecSub$descriptor() {
        return VarDecSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecSub$handle() {
        return VarDecSub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecSub(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecSub", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecAbs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAbs$descriptor() {
        return VarDecAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAbs$handle() {
        return VarDecAbs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAbs(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAbs", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecFix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecFix$descriptor() {
        return VarDecFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecFix$handle() {
        return VarDecFix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecFix(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFix", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecInt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecInt$descriptor() {
        return VarDecInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecInt$handle() {
        return VarDecInt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecInt(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecInt", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecNeg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecNeg$descriptor() {
        return VarDecNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecNeg$handle() {
        return VarDecNeg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecNeg(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecNeg", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecRound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecRound$descriptor() {
        return VarDecRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecRound$handle() {
        return VarDecRound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecRound(MemorySegment pdecIn, int cDecimals, MemorySegment pdecResult) {
        var mh$ = VarDecRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecRound", pdecIn, cDecimals, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, cDecimals, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecCmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static FunctionDescriptor VarDecCmp$descriptor() {
        return VarDecCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static MethodHandle VarDecCmp$handle() {
        return VarDecCmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static int VarDecCmp(MemorySegment pdecLeft, MemorySegment pdecRight) {
        var mh$ = VarDecCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmp", pdecLeft, pdecRight);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDecCmpR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarDecCmpR8$descriptor() {
        return VarDecCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static MethodHandle VarDecCmpR8$handle() {
        return VarDecCmpR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static int VarDecCmpR8(MemorySegment pdecLeft, double dblRight) {
        var mh$ = VarDecCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmpR8", pdecLeft, dblRight);
            }
            return (int)mh$.invokeExact(pdecLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyAdd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAdd$descriptor() {
        return VarCyAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAdd$handle() {
        return VarCyAdd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyAdd(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAdd", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyMul"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMul$descriptor() {
        return VarCyMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMul$handle() {
        return VarCyMul.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMul(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMul", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyMulI4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI4$descriptor() {
        return VarCyMulI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI4$handle() {
        return VarCyMulI4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI4(MemorySegment cyLeft, int lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI4", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyMulI8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI8$descriptor() {
        return VarCyMulI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI8$handle() {
        return VarCyMulI8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI8(MemorySegment cyLeft, long lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI8", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCySub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCySub"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCySub$descriptor() {
        return VarCySub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCySub$handle() {
        return VarCySub.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCySub(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCySub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCySub", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyAbs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAbs$descriptor() {
        return VarCyAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAbs$handle() {
        return VarCyAbs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyAbs(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAbs", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyFix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyFix$descriptor() {
        return VarCyFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyFix$handle() {
        return VarCyFix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyFix(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFix", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyInt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyInt$descriptor() {
        return VarCyInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyInt$handle() {
        return VarCyInt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyInt(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyInt", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyNeg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyNeg$descriptor() {
        return VarCyNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyNeg$handle() {
        return VarCyNeg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyNeg(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyNeg", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyRound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyRound$descriptor() {
        return VarCyRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyRound$handle() {
        return VarCyRound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static int VarCyRound(MemorySegment cyIn, int cDecimals, MemorySegment pcyResult) {
        var mh$ = VarCyRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyRound", cyIn, cDecimals, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, cDecimals, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            tagCY.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyCmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static FunctionDescriptor VarCyCmp$descriptor() {
        return VarCyCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static MethodHandle VarCyCmp$handle() {
        return VarCyCmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static int VarCyCmp(MemorySegment cyLeft, MemorySegment cyRight) {
        var mh$ = VarCyCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmp", cyLeft, cyRight);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            tagCY.layout(),
            C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarCyCmpR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarCyCmpR8$descriptor() {
        return VarCyCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static MethodHandle VarCyCmpR8$handle() {
        return VarCyCmpR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static int VarCyCmpR8(MemorySegment cyLeft, double dblRight) {
        var mh$ = VarCyCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmpR8", cyLeft, dblRight);
            }
            return (int)mh$.invokeExact(cyLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrCat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static FunctionDescriptor VarBstrCat$descriptor() {
        return VarBstrCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static MethodHandle VarBstrCat$handle() {
        return VarBstrCat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static int VarBstrCat(MemorySegment bstrLeft, MemorySegment bstrRight, MemorySegment pbstrResult) {
        var mh$ = VarBstrCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCat", bstrLeft, bstrRight, pbstrResult);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, pbstrResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarBstrCmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarBstrCmp$descriptor() {
        return VarBstrCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarBstrCmp$handle() {
        return VarBstrCmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarBstrCmp(MemorySegment bstrLeft, MemorySegment bstrRight, int lcid, int dwFlags) {
        var mh$ = VarBstrCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCmp", bstrLeft, bstrRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_DOUBLE,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8Pow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Pow$descriptor() {
        return VarR8Pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Pow$handle() {
        return VarR8Pow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static int VarR8Pow(double dblLeft, double dblRight, MemorySegment pdblResult) {
        var mh$ = VarR8Pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Pow", dblLeft, dblRight, pdblResult);
            }
            return (int)mh$.invokeExact(dblLeft, dblRight, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4CmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_FLOAT,
            C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR4CmpR8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarR4CmpR8$descriptor() {
        return VarR4CmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static MethodHandle VarR4CmpR8$handle() {
        return VarR4CmpR8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static int VarR4CmpR8(float fltLeft, double dblRight) {
        var mh$ = VarR4CmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4CmpR8", fltLeft, dblRight);
            }
            return (int)mh$.invokeExact(fltLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarR8Round"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Round$descriptor() {
        return VarR8Round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Round$handle() {
        return VarR8Round.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static int VarR8Round(double dblIn, int cDecimals, MemorySegment pdblResult) {
        var mh$ = VarR8Round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Round", dblIn, cDecimals, pdblResult);
            }
            return (int)mh$.invokeExact(dblIn, cDecimals, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUdate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdate$descriptor() {
        return VarDateFromUdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdate$handle() {
        return VarDateFromUdate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdate(MemorySegment pudateIn, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdate", pudateIn, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarDateFromUdateEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdateEx$descriptor() {
        return VarDateFromUdateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdateEx$handle() {
        return VarDateFromUdateEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdateEx(MemorySegment pudateIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdateEx", pudateIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUdateFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_DOUBLE,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarUdateFromDate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static FunctionDescriptor VarUdateFromDate$descriptor() {
        return VarUdateFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static MethodHandle VarUdateFromDate$handle() {
        return VarUdateFromDate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static int VarUdateFromDate(double dateIn, int dwFlags, MemorySegment pudateOut) {
        var mh$ = VarUdateFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUdateFromDate", dateIn, dwFlags, pudateOut);
            }
            return (int)mh$.invokeExact(dateIn, dwFlags, pudateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetAltMonthNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetAltMonthNames"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static FunctionDescriptor GetAltMonthNames$descriptor() {
        return GetAltMonthNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static MethodHandle GetAltMonthNames$handle() {
        return GetAltMonthNames.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static int GetAltMonthNames(int lcid, MemorySegment prgp) {
        var mh$ = GetAltMonthNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetAltMonthNames", lcid, prgp);
            }
            return (int)mh$.invokeExact(lcid, prgp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormat$descriptor() {
        return VarFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormat$handle() {
        return VarFormat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormat(MemorySegment pvarIn, MemorySegment pstrFormat, int iFirstDay, int iFirstWeek, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormat", pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormatDateTime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatDateTime$descriptor() {
        return VarFormatDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatDateTime$handle() {
        return VarFormatDateTime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatDateTime(MemorySegment pvarIn, int iNamedFormat, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatDateTime", pvarIn, iNamedFormat, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNamedFormat, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormatNumber"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatNumber$descriptor() {
        return VarFormatNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatNumber$handle() {
        return VarFormatNumber.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatNumber(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatNumber", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatPercent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormatPercent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatPercent$descriptor() {
        return VarFormatPercent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatPercent$handle() {
        return VarFormatPercent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatPercent(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatPercent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatPercent", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatCurrency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormatCurrency"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatCurrency$descriptor() {
        return VarFormatCurrency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatCurrency$handle() {
        return VarFormatCurrency.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatCurrency(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatCurrency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatCurrency", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarWeekdayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarWeekdayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarWeekdayName$descriptor() {
        return VarWeekdayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarWeekdayName$handle() {
        return VarWeekdayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarWeekdayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarWeekdayName", iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMonthName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarMonthName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarMonthName$descriptor() {
        return VarMonthName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarMonthName$handle() {
        return VarMonthName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarMonthName(int iMonth, int fAbbrev, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarMonthName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMonthName", iMonth, fAbbrev, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iMonth, fAbbrev, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatFromTokens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarFormatFromTokens"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static FunctionDescriptor VarFormatFromTokens$descriptor() {
        return VarFormatFromTokens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static MethodHandle VarFormatFromTokens$handle() {
        return VarFormatFromTokens.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static int VarFormatFromTokens(MemorySegment pvarIn, MemorySegment pstrFormat, MemorySegment pbTokCur, int dwFlags, MemorySegment pbstrOut, int lcid) {
        var mh$ = VarFormatFromTokens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatFromTokens", pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarTokenizeFormatString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("VarTokenizeFormatString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static FunctionDescriptor VarTokenizeFormatString$descriptor() {
        return VarTokenizeFormatString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static MethodHandle VarTokenizeFormatString$handle() {
        return VarTokenizeFormatString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static int VarTokenizeFormatString(MemorySegment pstrFormat, MemorySegment rgbTok, int cbTok, int iFirstDay, int iFirstWeek, int lcid, MemorySegment pcbActual) {
        var mh$ = VarTokenizeFormatString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarTokenizeFormatString", pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
            }
            return (int)mh$.invokeExact(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSysA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LHashValOfNameSysA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSysA$descriptor() {
        return LHashValOfNameSysA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static MethodHandle LHashValOfNameSysA$handle() {
        return LHashValOfNameSysA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static int LHashValOfNameSysA(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSysA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSysA", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LHashValOfNameSys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSys$descriptor() {
        return LHashValOfNameSys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static MethodHandle LHashValOfNameSys$handle() {
        return LHashValOfNameSys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static int LHashValOfNameSys(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSys", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LoadTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLib$descriptor() {
        return LoadTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLib$handle() {
        return LoadTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLib(MemorySegment szFile, MemorySegment pptlib) {
        var mh$ = LoadTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLib", szFile, pptlib);
            }
            return (int)mh$.invokeExact(szFile, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int REGKIND_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_DEFAULT = 0
     * }
     */
    public static int REGKIND_DEFAULT() {
        return REGKIND_DEFAULT;
    }
    private static final int REGKIND_REGISTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_REGISTER = 1
     * }
     */
    public static int REGKIND_REGISTER() {
        return REGKIND_REGISTER;
    }
    private static final int REGKIND_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_NONE = 2
     * }
     */
    public static int REGKIND_NONE() {
        return REGKIND_NONE;
    }

    private static class LoadTypeLibEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LoadTypeLibEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLibEx$descriptor() {
        return LoadTypeLibEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLibEx$handle() {
        return LoadTypeLibEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLibEx(MemorySegment szFile, int regkind, MemorySegment pptlib) {
        var mh$ = LoadTypeLibEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLibEx", szFile, regkind, pptlib);
            }
            return (int)mh$.invokeExact(szFile, regkind, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_SHORT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LoadRegTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadRegTypeLib$descriptor() {
        return LoadRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadRegTypeLib$handle() {
        return LoadRegTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static int LoadRegTypeLib(MemorySegment rguid, short wVerMajor, short wVerMinor, int lcid, MemorySegment pptlib) {
        var mh$ = LoadRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadRegTypeLib", rguid, wVerMajor, wVerMinor, lcid, pptlib);
            }
            return (int)mh$.invokeExact(rguid, wVerMajor, wVerMinor, lcid, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryPathOfRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_SHORT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryPathOfRegTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static FunctionDescriptor QueryPathOfRegTypeLib$descriptor() {
        return QueryPathOfRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static MethodHandle QueryPathOfRegTypeLib$handle() {
        return QueryPathOfRegTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static int QueryPathOfRegTypeLib(MemorySegment guid, short wMaj, short wMin, int lcid, MemorySegment lpbstrPathName) {
        var mh$ = QueryPathOfRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryPathOfRegTypeLib", guid, wMaj, wMin, lcid, lpbstrPathName);
            }
            return (int)mh$.invokeExact(guid, wMaj, wMin, lcid, lpbstrPathName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLib$descriptor() {
        return RegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLib$handle() {
        return RegisterTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static int RegisterTypeLib(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLib", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_SHORT,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UnRegisterTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLib$descriptor() {
        return UnRegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLib$handle() {
        return UnRegisterTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLib(MemorySegment libID, short wVerMajor, short wVerMinor, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLib", libID, wVerMajor, wVerMinor, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wVerMajor, wVerMinor, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterTypeLibForUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLibForUser$descriptor() {
        return RegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLibForUser$handle() {
        return RegisterTypeLibForUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static int RegisterTypeLibForUser(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLibForUser", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_SHORT,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UnRegisterTypeLibForUser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLibForUser$descriptor() {
        return UnRegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLibForUser$handle() {
        return UnRegisterTypeLibForUser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLibForUser(MemorySegment libID, short wMajorVerNum, short wMinorVerNum, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLibForUser", libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateTypeLib"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib$descriptor() {
        return CreateTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib$handle() {
        return CreateTypeLib.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static int CreateTypeLib(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateTypeLib2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib2$descriptor() {
        return CreateTypeLib2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib2$handle() {
        return CreateTypeLib2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static int CreateTypeLib2(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib2", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDATA {
     *     OLECHAR *szName;
     *     VARTYPE vt;
     * } *LPPARAMDATA
     * }
     */
    public static final AddressLayout LPPARAMDATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMETHODDATA {
     *     OLECHAR *szName;
     *     PARAMDATA *ppdata;
     *     DISPID dispid;
     *     UINT iMeth;
     *     CALLCONV cc;
     *     UINT cArgs;
     *     WORD wFlags;
     *     VARTYPE vtReturn;
     * } *LPMETHODDATA
     * }
     */
    public static final AddressLayout LPMETHODDATA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEDATA {
     *     METHODDATA *pmethdata;
     *     UINT cMembers;
     * } *LPINTERFACEDATA
     * }
     */
    public static final AddressLayout LPINTERFACEDATA = C_POINTER;

    private static class DispGetParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_SHORT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DispGetParam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispGetParam$descriptor() {
        return DispGetParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispGetParam$handle() {
        return DispGetParam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static int DispGetParam(MemorySegment pdispparams, int position, short vtTarg, MemorySegment pvarResult, MemorySegment puArgErr) {
        var mh$ = DispGetParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetParam", pdispparams, position, vtTarg, pvarResult, puArgErr);
            }
            return (int)mh$.invokeExact(pdispparams, position, vtTarg, pvarResult, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispGetIDsOfNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DispGetIDsOfNames"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static FunctionDescriptor DispGetIDsOfNames$descriptor() {
        return DispGetIDsOfNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static MethodHandle DispGetIDsOfNames$handle() {
        return DispGetIDsOfNames.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static int DispGetIDsOfNames(MemorySegment ptinfo, MemorySegment rgszNames, int cNames, MemorySegment rgdispid) {
        var mh$ = DispGetIDsOfNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetIDsOfNames", ptinfo, rgszNames, cNames, rgdispid);
            }
            return (int)mh$.invokeExact(ptinfo, rgszNames, cNames, rgdispid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispInvoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DispInvoke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispInvoke$descriptor() {
        return DispInvoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispInvoke$handle() {
        return DispInvoke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static int DispInvoke(MemorySegment _this, MemorySegment ptinfo, int dispidMember, short wFlags, MemorySegment pparams, MemorySegment pvarResult, MemorySegment pexcepinfo, MemorySegment puArgErr) {
        var mh$ = DispInvoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispInvoke", _this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
            }
            return (int)mh$.invokeExact(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDispTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateDispTypeInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static FunctionDescriptor CreateDispTypeInfo$descriptor() {
        return CreateDispTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static MethodHandle CreateDispTypeInfo$handle() {
        return CreateDispTypeInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static int CreateDispTypeInfo(MemorySegment pidata, int lcid, MemorySegment pptinfo) {
        var mh$ = CreateDispTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDispTypeInfo", pidata, lcid, pptinfo);
            }
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateStdDispatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateStdDispatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static FunctionDescriptor CreateStdDispatch$descriptor() {
        return CreateStdDispatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static MethodHandle CreateStdDispatch$handle() {
        return CreateStdDispatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static int CreateStdDispatch(MemorySegment punkOuter, MemorySegment pvThis, MemorySegment ptinfo, MemorySegment ppunkStdDisp) {
        var mh$ = CreateStdDispatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdDispatch", punkOuter, pvThis, ptinfo, ppunkStdDisp);
            }
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispCallFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG_LONG,
            C_INT,
            C_SHORT,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DispCallFunc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static FunctionDescriptor DispCallFunc$descriptor() {
        return DispCallFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static MethodHandle DispCallFunc$handle() {
        return DispCallFunc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static int DispCallFunc(MemorySegment pvInstance, long oVft, int cc, short vtReturn, int cActuals, MemorySegment prgvt, MemorySegment prgpvarg, MemorySegment pvargResult) {
        var mh$ = DispCallFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispCallFunc", pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
            }
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterActiveObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static FunctionDescriptor RegisterActiveObject$descriptor() {
        return RegisterActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static MethodHandle RegisterActiveObject$handle() {
        return RegisterActiveObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static int RegisterActiveObject(MemorySegment punk, MemorySegment rclsid, int dwFlags, MemorySegment pdwRegister) {
        var mh$ = RegisterActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterActiveObject", punk, rclsid, dwFlags, pdwRegister);
            }
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RevokeActiveObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static FunctionDescriptor RevokeActiveObject$descriptor() {
        return RevokeActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static MethodHandle RevokeActiveObject$handle() {
        return RevokeActiveObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static int RevokeActiveObject(int dwRegister, MemorySegment pvReserved) {
        var mh$ = RevokeActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeActiveObject", dwRegister, pvReserved);
            }
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetActiveObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static FunctionDescriptor GetActiveObject$descriptor() {
        return GetActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static MethodHandle GetActiveObject$handle() {
        return GetActiveObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static int GetActiveObject(MemorySegment rclsid, MemorySegment pvReserved, MemorySegment ppunk) {
        var mh$ = GetActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetActiveObject", rclsid, pvReserved, ppunk);
            }
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SetErrorInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static FunctionDescriptor SetErrorInfo$descriptor() {
        return SetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static MethodHandle SetErrorInfo$handle() {
        return SetErrorInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static int SetErrorInfo(int dwReserved, MemorySegment perrinfo) {
        var mh$ = SetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetErrorInfo", dwReserved, perrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetErrorInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor GetErrorInfo$descriptor() {
        return GetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle GetErrorInfo$handle() {
        return GetErrorInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static int GetErrorInfo(int dwReserved, MemorySegment pperrinfo) {
        var mh$ = GetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetErrorInfo", dwReserved, pperrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateErrorInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor CreateErrorInfo$descriptor() {
        return CreateErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle CreateErrorInfo$handle() {
        return CreateErrorInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static int CreateErrorInfo(MemorySegment pperrinfo) {
        var mh$ = CreateErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateErrorInfo", pperrinfo);
            }
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetRecordInfoFromTypeInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromTypeInfo$descriptor() {
        return GetRecordInfoFromTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromTypeInfo$handle() {
        return GetRecordInfoFromTypeInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromTypeInfo(MemorySegment pTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromTypeInfo", pTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromGuids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetRecordInfoFromGuids"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromGuids$descriptor() {
        return GetRecordInfoFromGuids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromGuids$handle() {
        return GetRecordInfoFromGuids.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromGuids(MemorySegment rGuidTypeLib, int uVerMajor, int uVerMinor, int lcid, MemorySegment rGuidTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromGuids", rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OaBuildVersion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static FunctionDescriptor OaBuildVersion$descriptor() {
        return OaBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static MethodHandle OaBuildVersion$handle() {
        return OaBuildVersion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static int OaBuildVersion() {
        var mh$ = OaBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClearCustData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ClearCustData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static FunctionDescriptor ClearCustData$descriptor() {
        return ClearCustData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static MethodHandle ClearCustData$handle() {
        return ClearCustData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static void ClearCustData(MemorySegment pCustData) {
        var mh$ = ClearCustData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClearCustData", pCustData);
            }
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaEnablePerUserTLibRegistration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OaEnablePerUserTLibRegistration"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static FunctionDescriptor OaEnablePerUserTLibRegistration$descriptor() {
        return OaEnablePerUserTLibRegistration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static MethodHandle OaEnablePerUserTLibRegistration$handle() {
        return OaEnablePerUserTLibRegistration.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static void OaEnablePerUserTLibRegistration() {
        var mh$ = OaEnablePerUserTLibRegistration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaEnablePerUserTLibRegistration");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleBuildVersion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static FunctionDescriptor OleBuildVersion$descriptor() {
        return OleBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static MethodHandle OleBuildVersion$handle() {
        return OleBuildVersion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static int OleBuildVersion() {
        var mh$ = OleBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WriteFmtUserTypeStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static FunctionDescriptor WriteFmtUserTypeStg$descriptor() {
        return WriteFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static MethodHandle WriteFmtUserTypeStg$handle() {
        return WriteFmtUserTypeStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static int WriteFmtUserTypeStg(MemorySegment pstg, short cf, MemorySegment lpszUserType) {
        var mh$ = WriteFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteFmtUserTypeStg", pstg, cf, lpszUserType);
            }
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReadFmtUserTypeStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static FunctionDescriptor ReadFmtUserTypeStg$descriptor() {
        return ReadFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static MethodHandle ReadFmtUserTypeStg$handle() {
        return ReadFmtUserTypeStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static int ReadFmtUserTypeStg(MemorySegment pstg, MemorySegment pcf, MemorySegment lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadFmtUserTypeStg", pstg, pcf, lplpszUserType);
            }
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleInitialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static FunctionDescriptor OleInitialize$descriptor() {
        return OleInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static MethodHandle OleInitialize$handle() {
        return OleInitialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static int OleInitialize(MemorySegment pvReserved) {
        var mh$ = OleInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleInitialize", pvReserved);
            }
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleUninitialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static FunctionDescriptor OleUninitialize$descriptor() {
        return OleUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static MethodHandle OleUninitialize$handle() {
        return OleUninitialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static void OleUninitialize() {
        var mh$ = OleUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleUninitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleQueryLinkFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryLinkFromData$descriptor() {
        return OleQueryLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryLinkFromData$handle() {
        return OleQueryLinkFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryLinkFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryLinkFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleQueryCreateFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryCreateFromData$descriptor() {
        return OleQueryCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryCreateFromData$handle() {
        return OleQueryCreateFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryCreateFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryCreateFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreate$descriptor() {
        return OleCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreate$handle() {
        return OleCreate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreate(MemorySegment rclsid, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreate", rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateEx$descriptor() {
        return OleCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateEx$handle() {
        return OleCreateEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateEx(MemorySegment rclsid, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateEx", rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromData$descriptor() {
        return OleCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromData$handle() {
        return OleCreateFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateFromDataEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromDataEx$descriptor() {
        return OleCreateFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromDataEx$handle() {
        return OleCreateFromDataEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLinkFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromData$descriptor() {
        return OleCreateLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromData$handle() {
        return OleCreateLinkFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLinkFromDataEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromDataEx$descriptor() {
        return OleCreateLinkFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromDataEx$handle() {
        return OleCreateLinkFromDataEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateStaticFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateStaticFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateStaticFromData$descriptor() {
        return OleCreateStaticFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateStaticFromData$handle() {
        return OleCreateStaticFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateStaticFromData(MemorySegment pSrcDataObj, MemorySegment iid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateStaticFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateStaticFromData", pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLink$descriptor() {
        return OleCreateLink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLink$handle() {
        return OleCreateLink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLink(MemorySegment pmkLinkSrc, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLink", pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLinkEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkEx$descriptor() {
        return OleCreateLinkEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkEx$handle() {
        return OleCreateLinkEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkEx(MemorySegment pmkLinkSrc, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkEx", pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLinkToFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFile$descriptor() {
        return OleCreateLinkToFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFile$handle() {
        return OleCreateLinkToFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFile(MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFile", lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFileEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateLinkToFileEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFileEx$descriptor() {
        return OleCreateLinkToFileEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFileEx$handle() {
        return OleCreateLinkToFileEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFileEx(MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFileEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFileEx", lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateFromFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromFile$descriptor() {
        return OleCreateFromFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromFile$handle() {
        return OleCreateFromFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromFile(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromFile", rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromFileEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateFromFileEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromFileEx$descriptor() {
        return OleCreateFromFileEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromFileEx$handle() {
        return OleCreateFromFileEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromFileEx(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFileEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromFileEx", rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleLoad"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleLoad$descriptor() {
        return OleLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleLoad$handle() {
        return OleLoad.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static int OleLoad(MemorySegment pStg, MemorySegment riid, MemorySegment pClientSite, MemorySegment ppvObj) {
        var mh$ = OleLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLoad", pStg, riid, pClientSite, ppvObj);
            }
            return (int)mh$.invokeExact(pStg, riid, pClientSite, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSave"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static FunctionDescriptor OleSave$descriptor() {
        return OleSave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static MethodHandle OleSave$handle() {
        return OleSave.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static int OleSave(MemorySegment pPS, MemorySegment pStg, int fSameAsLoad) {
        var mh$ = OleSave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSave", pPS, pStg, fSameAsLoad);
            }
            return (int)mh$.invokeExact(pPS, pStg, fSameAsLoad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLoadFromStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleLoadFromStream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleLoadFromStream$descriptor() {
        return OleLoadFromStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleLoadFromStream$handle() {
        return OleLoadFromStream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static int OleLoadFromStream(MemorySegment pStm, MemorySegment iidInterface, MemorySegment ppvObj) {
        var mh$ = OleLoadFromStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLoadFromStream", pStm, iidInterface, ppvObj);
            }
            return (int)mh$.invokeExact(pStm, iidInterface, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSaveToStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSaveToStream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static FunctionDescriptor OleSaveToStream$descriptor() {
        return OleSaveToStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static MethodHandle OleSaveToStream$handle() {
        return OleSaveToStream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static int OleSaveToStream(MemorySegment pPStm, MemorySegment pStm) {
        var mh$ = OleSaveToStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSaveToStream", pPStm, pStm);
            }
            return (int)mh$.invokeExact(pPStm, pStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetContainedObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSetContainedObject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static FunctionDescriptor OleSetContainedObject$descriptor() {
        return OleSetContainedObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static MethodHandle OleSetContainedObject$handle() {
        return OleSetContainedObject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static int OleSetContainedObject(MemorySegment pUnknown, int fContained) {
        var mh$ = OleSetContainedObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetContainedObject", pUnknown, fContained);
            }
            return (int)mh$.invokeExact(pUnknown, fContained);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleNoteObjectVisible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleNoteObjectVisible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static FunctionDescriptor OleNoteObjectVisible$descriptor() {
        return OleNoteObjectVisible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static MethodHandle OleNoteObjectVisible$handle() {
        return OleNoteObjectVisible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static int OleNoteObjectVisible(MemorySegment pUnknown, int fVisible) {
        var mh$ = OleNoteObjectVisible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleNoteObjectVisible", pUnknown, fVisible);
            }
            return (int)mh$.invokeExact(pUnknown, fVisible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterDragDrop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static FunctionDescriptor RegisterDragDrop$descriptor() {
        return RegisterDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static MethodHandle RegisterDragDrop$handle() {
        return RegisterDragDrop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static int RegisterDragDrop(MemorySegment hwnd, MemorySegment pDropTarget) {
        var mh$ = RegisterDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterDragDrop", hwnd, pDropTarget);
            }
            return (int)mh$.invokeExact(hwnd, pDropTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RevokeDragDrop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static FunctionDescriptor RevokeDragDrop$descriptor() {
        return RevokeDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static MethodHandle RevokeDragDrop$handle() {
        return RevokeDragDrop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static int RevokeDragDrop(MemorySegment hwnd) {
        var mh$ = RevokeDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeDragDrop", hwnd);
            }
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DoDragDrop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static FunctionDescriptor DoDragDrop$descriptor() {
        return DoDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static MethodHandle DoDragDrop$handle() {
        return DoDragDrop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static int DoDragDrop(MemorySegment pDataObj, MemorySegment pDropSource, int dwOKEffects, MemorySegment pdwEffect) {
        var mh$ = DoDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoDragDrop", pDataObj, pDropSource, dwOKEffects, pdwEffect);
            }
            return (int)mh$.invokeExact(pDataObj, pDropSource, dwOKEffects, pdwEffect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSetClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static FunctionDescriptor OleSetClipboard$descriptor() {
        return OleSetClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MethodHandle OleSetClipboard$handle() {
        return OleSetClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static int OleSetClipboard(MemorySegment pDataObj) {
        var mh$ = OleSetClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetClipboard", pDataObj);
            }
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleGetClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static FunctionDescriptor OleGetClipboard$descriptor() {
        return OleGetClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static MethodHandle OleGetClipboard$handle() {
        return OleGetClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static int OleGetClipboard(MemorySegment ppDataObj) {
        var mh$ = OleGetClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetClipboard", ppDataObj);
            }
            return (int)mh$.invokeExact(ppDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetClipboardWithEnterpriseInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleGetClipboardWithEnterpriseInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static FunctionDescriptor OleGetClipboardWithEnterpriseInfo$descriptor() {
        return OleGetClipboardWithEnterpriseInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static MethodHandle OleGetClipboardWithEnterpriseInfo$handle() {
        return OleGetClipboardWithEnterpriseInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static int OleGetClipboardWithEnterpriseInfo(MemorySegment dataObject, MemorySegment dataEnterpriseId, MemorySegment sourceDescription, MemorySegment targetDescription, MemorySegment dataDescription) {
        var mh$ = OleGetClipboardWithEnterpriseInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetClipboardWithEnterpriseInfo", dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
            }
            return (int)mh$.invokeExact(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleFlushClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleFlushClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static FunctionDescriptor OleFlushClipboard$descriptor() {
        return OleFlushClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static MethodHandle OleFlushClipboard$handle() {
        return OleFlushClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static int OleFlushClipboard() {
        var mh$ = OleFlushClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleFlushClipboard");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleIsCurrentClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleIsCurrentClipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static FunctionDescriptor OleIsCurrentClipboard$descriptor() {
        return OleIsCurrentClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MethodHandle OleIsCurrentClipboard$handle() {
        return OleIsCurrentClipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static int OleIsCurrentClipboard(MemorySegment pDataObj) {
        var mh$ = OleIsCurrentClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleIsCurrentClipboard", pDataObj);
            }
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateMenuDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static FunctionDescriptor OleCreateMenuDescriptor$descriptor() {
        return OleCreateMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static MethodHandle OleCreateMenuDescriptor$handle() {
        return OleCreateMenuDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static MemorySegment OleCreateMenuDescriptor(MemorySegment hmenuCombined, MemorySegment lpMenuWidths) {
        var mh$ = OleCreateMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateMenuDescriptor", hmenuCombined, lpMenuWidths);
            }
            return (MemorySegment)mh$.invokeExact(hmenuCombined, lpMenuWidths);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSetMenuDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static FunctionDescriptor OleSetMenuDescriptor$descriptor() {
        return OleSetMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static MethodHandle OleSetMenuDescriptor$handle() {
        return OleSetMenuDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static int OleSetMenuDescriptor(MemorySegment holemenu, MemorySegment hwndFrame, MemorySegment hwndActiveObject, MemorySegment lpFrame, MemorySegment lpActiveObj) {
        var mh$ = OleSetMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetMenuDescriptor", holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
            }
            return (int)mh$.invokeExact(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDestroyMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleDestroyMenuDescriptor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static FunctionDescriptor OleDestroyMenuDescriptor$descriptor() {
        return OleDestroyMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static MethodHandle OleDestroyMenuDescriptor$handle() {
        return OleDestroyMenuDescriptor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static int OleDestroyMenuDescriptor(MemorySegment holemenu) {
        var mh$ = OleDestroyMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDestroyMenuDescriptor", holemenu);
            }
            return (int)mh$.invokeExact(holemenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleTranslateAccelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleTranslateAccelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static FunctionDescriptor OleTranslateAccelerator$descriptor() {
        return OleTranslateAccelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static MethodHandle OleTranslateAccelerator$handle() {
        return OleTranslateAccelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static int OleTranslateAccelerator(MemorySegment lpFrame, MemorySegment lpFrameInfo, MemorySegment lpmsg) {
        var mh$ = OleTranslateAccelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleTranslateAccelerator", lpFrame, lpFrameInfo, lpmsg);
            }
            return (int)mh$.invokeExact(lpFrame, lpFrameInfo, lpmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDuplicateData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_SHORT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleDuplicateData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static FunctionDescriptor OleDuplicateData$descriptor() {
        return OleDuplicateData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static MethodHandle OleDuplicateData$handle() {
        return OleDuplicateData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static MemorySegment OleDuplicateData(MemorySegment hSrc, short cfFormat, int uiFlags) {
        var mh$ = OleDuplicateData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDuplicateData", hSrc, cfFormat, uiFlags);
            }
            return (MemorySegment)mh$.invokeExact(hSrc, cfFormat, uiFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleDraw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static FunctionDescriptor OleDraw$descriptor() {
        return OleDraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static MethodHandle OleDraw$handle() {
        return OleDraw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static int OleDraw(MemorySegment pUnknown, int dwAspect, MemorySegment hdcDraw, MemorySegment lprcBounds) {
        var mh$ = OleDraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDraw", pUnknown, dwAspect, hdcDraw, lprcBounds);
            }
            return (int)mh$.invokeExact(pUnknown, dwAspect, hdcDraw, lprcBounds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRun {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleRun"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static FunctionDescriptor OleRun$descriptor() {
        return OleRun.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static MethodHandle OleRun$handle() {
        return OleRun.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static int OleRun(MemorySegment pUnknown) {
        var mh$ = OleRun.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRun", pUnknown);
            }
            return (int)mh$.invokeExact(pUnknown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleIsRunning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleIsRunning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static FunctionDescriptor OleIsRunning$descriptor() {
        return OleIsRunning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static MethodHandle OleIsRunning$handle() {
        return OleIsRunning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static int OleIsRunning(MemorySegment pObject) {
        var mh$ = OleIsRunning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleIsRunning", pObject);
            }
            return (int)mh$.invokeExact(pObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLockRunning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleLockRunning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static FunctionDescriptor OleLockRunning$descriptor() {
        return OleLockRunning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static MethodHandle OleLockRunning$handle() {
        return OleLockRunning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static int OleLockRunning(MemorySegment pUnknown, int fLock, int fLastUnlockCloses) {
        var mh$ = OleLockRunning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLockRunning", pUnknown, fLock, fLastUnlockCloses);
            }
            return (int)mh$.invokeExact(pUnknown, fLock, fLastUnlockCloses);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReleaseStgMedium {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReleaseStgMedium"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static FunctionDescriptor ReleaseStgMedium$descriptor() {
        return ReleaseStgMedium.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static MethodHandle ReleaseStgMedium$handle() {
        return ReleaseStgMedium.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static void ReleaseStgMedium(MemorySegment x0) {
        var mh$ = ReleaseStgMedium.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReleaseStgMedium", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateOleAdviseHolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateOleAdviseHolder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static FunctionDescriptor CreateOleAdviseHolder$descriptor() {
        return CreateOleAdviseHolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static MethodHandle CreateOleAdviseHolder$handle() {
        return CreateOleAdviseHolder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static int CreateOleAdviseHolder(MemorySegment ppOAHolder) {
        var mh$ = CreateOleAdviseHolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateOleAdviseHolder", ppOAHolder);
            }
            return (int)mh$.invokeExact(ppOAHolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateDefaultHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateDefaultHandler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static FunctionDescriptor OleCreateDefaultHandler$descriptor() {
        return OleCreateDefaultHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MethodHandle OleCreateDefaultHandler$handle() {
        return OleCreateDefaultHandler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static int OleCreateDefaultHandler(MemorySegment clsid, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateDefaultHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateDefaultHandler", clsid, pUnkOuter, riid, lplpObj);
            }
            return (int)mh$.invokeExact(clsid, pUnkOuter, riid, lplpObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateEmbeddingHelper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleCreateEmbeddingHelper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static FunctionDescriptor OleCreateEmbeddingHelper$descriptor() {
        return OleCreateEmbeddingHelper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MethodHandle OleCreateEmbeddingHelper$handle() {
        return OleCreateEmbeddingHelper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static int OleCreateEmbeddingHelper(MemorySegment clsid, MemorySegment pUnkOuter, int flags, MemorySegment pCF, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateEmbeddingHelper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateEmbeddingHelper", clsid, pUnkOuter, flags, pCF, riid, lplpObj);
            }
            return (int)mh$.invokeExact(clsid, pUnkOuter, flags, pCF, riid, lplpObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsAccelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("IsAccelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static FunctionDescriptor IsAccelerator$descriptor() {
        return IsAccelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static MethodHandle IsAccelerator$handle() {
        return IsAccelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static int IsAccelerator(MemorySegment hAccel, int cAccelEntries, MemorySegment lpMsg, MemorySegment lpwCmd) {
        var mh$ = IsAccelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsAccelerator", hAccel, cAccelEntries, lpMsg, lpwCmd);
            }
            return (int)mh$.invokeExact(hAccel, cAccelEntries, lpMsg, lpwCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetIconOfFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleGetIconOfFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static FunctionDescriptor OleGetIconOfFile$descriptor() {
        return OleGetIconOfFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static MethodHandle OleGetIconOfFile$handle() {
        return OleGetIconOfFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfFile(MemorySegment lpszPath, int fUseFileAsLabel) {
        var mh$ = OleGetIconOfFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetIconOfFile", lpszPath, fUseFileAsLabel);
            }
            return (MemorySegment)mh$.invokeExact(lpszPath, fUseFileAsLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetIconOfClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleGetIconOfClass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static FunctionDescriptor OleGetIconOfClass$descriptor() {
        return OleGetIconOfClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static MethodHandle OleGetIconOfClass$handle() {
        return OleGetIconOfClass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfClass(MemorySegment rclsid, MemorySegment lpszLabel, int fUseTypeAsLabel) {
        var mh$ = OleGetIconOfClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetIconOfClass", rclsid, lpszLabel, fUseTypeAsLabel);
            }
            return (MemorySegment)mh$.invokeExact(rclsid, lpszLabel, fUseTypeAsLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleMetafilePictFromIconAndLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleMetafilePictFromIconAndLabel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static FunctionDescriptor OleMetafilePictFromIconAndLabel$descriptor() {
        return OleMetafilePictFromIconAndLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static MethodHandle OleMetafilePictFromIconAndLabel$handle() {
        return OleMetafilePictFromIconAndLabel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static MemorySegment OleMetafilePictFromIconAndLabel(MemorySegment hIcon, MemorySegment lpszLabel, MemorySegment lpszSourceFile, int iIconIndex) {
        var mh$ = OleMetafilePictFromIconAndLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleMetafilePictFromIconAndLabel", hIcon, lpszLabel, lpszSourceFile, iIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hIcon, lpszLabel, lpszSourceFile, iIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegGetUserType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleRegGetUserType"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static FunctionDescriptor OleRegGetUserType$descriptor() {
        return OleRegGetUserType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static MethodHandle OleRegGetUserType$handle() {
        return OleRegGetUserType.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static int OleRegGetUserType(MemorySegment clsid, int dwFormOfType, MemorySegment pszUserType) {
        var mh$ = OleRegGetUserType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegGetUserType", clsid, dwFormOfType, pszUserType);
            }
            return (int)mh$.invokeExact(clsid, dwFormOfType, pszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegGetMiscStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleRegGetMiscStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static FunctionDescriptor OleRegGetMiscStatus$descriptor() {
        return OleRegGetMiscStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static MethodHandle OleRegGetMiscStatus$handle() {
        return OleRegGetMiscStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static int OleRegGetMiscStatus(MemorySegment clsid, int dwAspect, MemorySegment pdwStatus) {
        var mh$ = OleRegGetMiscStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegGetMiscStatus", clsid, dwAspect, pdwStatus);
            }
            return (int)mh$.invokeExact(clsid, dwAspect, pdwStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegEnumFormatEtc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleRegEnumFormatEtc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static FunctionDescriptor OleRegEnumFormatEtc$descriptor() {
        return OleRegEnumFormatEtc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static MethodHandle OleRegEnumFormatEtc$handle() {
        return OleRegEnumFormatEtc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static int OleRegEnumFormatEtc(MemorySegment clsid, int dwDirection, MemorySegment ppenum) {
        var mh$ = OleRegEnumFormatEtc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegEnumFormatEtc", clsid, dwDirection, ppenum);
            }
            return (int)mh$.invokeExact(clsid, dwDirection, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegEnumVerbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleRegEnumVerbs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static FunctionDescriptor OleRegEnumVerbs$descriptor() {
        return OleRegEnumVerbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static MethodHandle OleRegEnumVerbs$handle() {
        return OleRegEnumVerbs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static int OleRegEnumVerbs(MemorySegment clsid, MemorySegment ppenum) {
        var mh$ = OleRegEnumVerbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegEnumVerbs", clsid, ppenum);
            }
            return (int)mh$.invokeExact(clsid, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _OLESTREAM *LPOLESTREAM
     * }
     */
    public static final AddressLayout LPOLESTREAM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef OLESTREAMVTBL *LPOLESTREAMVTBL
     * }
     */
    public static final AddressLayout LPOLESTREAMVTBL = C_POINTER;

    private static class OleConvertOLESTREAMToIStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleConvertOLESTREAMToIStorage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorage$descriptor() {
        return OleConvertOLESTREAMToIStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorage$handle() {
        return OleConvertOLESTREAMToIStorage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static int OleConvertOLESTREAMToIStorage(MemorySegment lpolestream, MemorySegment pstg, MemorySegment ptd) {
        var mh$ = OleConvertOLESTREAMToIStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorage", lpolestream, pstg, ptd);
            }
            return (int)mh$.invokeExact(lpolestream, pstg, ptd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertIStorageToOLESTREAM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleConvertIStorageToOLESTREAM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static FunctionDescriptor OleConvertIStorageToOLESTREAM$descriptor() {
        return OleConvertIStorageToOLESTREAM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static MethodHandle OleConvertIStorageToOLESTREAM$handle() {
        return OleConvertIStorageToOLESTREAM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static int OleConvertIStorageToOLESTREAM(MemorySegment pstg, MemorySegment lpolestream) {
        var mh$ = OleConvertIStorageToOLESTREAM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertIStorageToOLESTREAM", pstg, lpolestream);
            }
            return (int)mh$.invokeExact(pstg, lpolestream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDoAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleDoAutoConvert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor OleDoAutoConvert$descriptor() {
        return OleDoAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle OleDoAutoConvert$handle() {
        return OleDoAutoConvert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static int OleDoAutoConvert(MemorySegment pStg, MemorySegment pClsidNew) {
        var mh$ = OleDoAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDoAutoConvert", pStg, pClsidNew);
            }
            return (int)mh$.invokeExact(pStg, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleGetAutoConvert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor OleGetAutoConvert$descriptor() {
        return OleGetAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle OleGetAutoConvert$handle() {
        return OleGetAutoConvert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static int OleGetAutoConvert(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = OleGetAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetAutoConvert", clsidOld, pClsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleSetAutoConvert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static FunctionDescriptor OleSetAutoConvert$descriptor() {
        return OleSetAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MethodHandle OleSetAutoConvert$handle() {
        return OleSetAutoConvert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static int OleSetAutoConvert(MemorySegment clsidOld, MemorySegment clsidNew) {
        var mh$ = OleSetAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetAutoConvert", clsidOld, clsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetConvertStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SetConvertStg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static FunctionDescriptor SetConvertStg$descriptor() {
        return SetConvertStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static MethodHandle SetConvertStg$handle() {
        return SetConvertStg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static int SetConvertStg(MemorySegment pStg, int fConvert) {
        var mh$ = SetConvertStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetConvertStg", pStg, fConvert);
            }
            return (int)mh$.invokeExact(pStg, fConvert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertIStorageToOLESTREAMEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_SHORT,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleConvertIStorageToOLESTREAMEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static FunctionDescriptor OleConvertIStorageToOLESTREAMEx$descriptor() {
        return OleConvertIStorageToOLESTREAMEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static MethodHandle OleConvertIStorageToOLESTREAMEx$handle() {
        return OleConvertIStorageToOLESTREAMEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static int OleConvertIStorageToOLESTREAMEx(MemorySegment pstg, short cfFormat, int lWidth, int lHeight, int dwSize, MemorySegment pmedium, MemorySegment polestm) {
        var mh$ = OleConvertIStorageToOLESTREAMEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertIStorageToOLESTREAMEx", pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
            }
            return (int)mh$.invokeExact(pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertOLESTREAMToIStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OleConvertOLESTREAMToIStorageEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorageEx$descriptor() {
        return OleConvertOLESTREAMToIStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorageEx$handle() {
        return OleConvertOLESTREAMToIStorageEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static int OleConvertOLESTREAMToIStorageEx(MemorySegment polestm, MemorySegment pstg, MemorySegment pcfFormat, MemorySegment plwWidth, MemorySegment plHeight, MemorySegment pdwSize, MemorySegment pmedium) {
        var mh$ = OleConvertOLESTREAMToIStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorageEx", polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
            }
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_IPrintDialogCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPrintDialogCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static GroupLayout IID_IPrintDialogCallback$layout() {
        return IID_IPrintDialogCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static MemorySegment IID_IPrintDialogCallback() {
        return IID_IPrintDialogCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static void IID_IPrintDialogCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPrintDialogCallback$constants.SEGMENT, 0L, IID_IPrintDialogCallback$constants.LAYOUT.byteSize());
    }

    private static class IID_IPrintDialogServices$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("IID_IPrintDialogServices").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static GroupLayout IID_IPrintDialogServices$layout() {
        return IID_IPrintDialogServices$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static MemorySegment IID_IPrintDialogServices() {
        return IID_IPrintDialogServices$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static void IID_IPrintDialogServices(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPrintDialogServices$constants.SEGMENT, 0L, IID_IPrintDialogServices$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagOFN_NT4A {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCSTR lpstrFilter;
     *     LPSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCSTR lpstrInitialDir;
     *     LPCSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPOPENFILENAME_NT4A
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFN_NT4W {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpstrFilter;
     *     LPWSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPWSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPWSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCWSTR lpstrInitialDir;
     *     LPCWSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCWSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPOPENFILENAME_NT4W
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFNA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCSTR lpstrFilter;
     *     LPSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCSTR lpstrInitialDir;
     *     LPCSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     *     void *pvReserved;
     *     DWORD dwReserved;
     *     DWORD FlagsEx;
     * } *LPOPENFILENAMEA
     * }
     */
    public static final AddressLayout LPOPENFILENAMEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFNW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpstrFilter;
     *     LPWSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPWSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPWSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCWSTR lpstrInitialDir;
     *     LPCWSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCWSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     *     void *pvReserved;
     *     DWORD dwReserved;
     *     DWORD FlagsEx;
     * } *LPOPENFILENAMEW
     * }
     */
    public static final AddressLayout LPOPENFILENAMEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENFILENAMEA LPOPENFILENAME
     * }
     */
    public static final AddressLayout LPOPENFILENAME = C_POINTER;

    private static class GetOpenFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetOpenFileNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static FunctionDescriptor GetOpenFileNameA$descriptor() {
        return GetOpenFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MethodHandle GetOpenFileNameA$handle() {
        return GetOpenFileNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static int GetOpenFileNameA(MemorySegment x0) {
        var mh$ = GetOpenFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenFileNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetOpenFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetOpenFileNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static FunctionDescriptor GetOpenFileNameW$descriptor() {
        return GetOpenFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MethodHandle GetOpenFileNameW$handle() {
        return GetOpenFileNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static int GetOpenFileNameW(MemorySegment x0) {
        var mh$ = GetOpenFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenFileNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSaveFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetSaveFileNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static FunctionDescriptor GetSaveFileNameA$descriptor() {
        return GetSaveFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MethodHandle GetSaveFileNameA$handle() {
        return GetSaveFileNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static int GetSaveFileNameA(MemorySegment x0) {
        var mh$ = GetSaveFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSaveFileNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSaveFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetSaveFileNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static FunctionDescriptor GetSaveFileNameW$descriptor() {
        return GetSaveFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MethodHandle GetSaveFileNameW$handle() {
        return GetSaveFileNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static int GetSaveFileNameW(MemorySegment x0) {
        var mh$ = GetSaveFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSaveFileNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFileTitleA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetFileTitleA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static FunctionDescriptor GetFileTitleA$descriptor() {
        return GetFileTitleA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static MethodHandle GetFileTitleA$handle() {
        return GetFileTitleA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static short GetFileTitleA(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFileTitleA", x0, Buf, cchSize);
            }
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFileTitleW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_SHORT,
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetFileTitleW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static FunctionDescriptor GetFileTitleW$descriptor() {
        return GetFileTitleW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static MethodHandle GetFileTitleW$handle() {
        return GetFileTitleW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static short GetFileTitleW(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFileTitleW", x0, Buf, cchSize);
            }
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYA {
     *     NMHDR hdr;
     *     LPOPENFILENAMEA lpOFN;
     *     LPSTR pszFile;
     * } *LPOFNOTIFYA
     * }
     */
    public static final AddressLayout LPOFNOTIFYA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYW {
     *     NMHDR hdr;
     *     LPOPENFILENAMEW lpOFN;
     *     LPWSTR pszFile;
     * } *LPOFNOTIFYW
     * }
     */
    public static final AddressLayout LPOFNOTIFYW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOFNOTIFYA LPOFNOTIFY
     * }
     */
    public static final AddressLayout LPOFNOTIFY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYEXA {
     *     NMHDR hdr;
     *     LPOPENFILENAMEA lpOFN;
     *     LPVOID psf;
     *     LPVOID pidl;
     * } *LPOFNOTIFYEXA
     * }
     */
    public static final AddressLayout LPOFNOTIFYEXA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYEXW {
     *     NMHDR hdr;
     *     LPOPENFILENAMEW lpOFN;
     *     LPVOID psf;
     *     LPVOID pidl;
     * } *LPOFNOTIFYEXW
     * }
     */
    public static final AddressLayout LPOFNOTIFYEXW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOFNOTIFYEXA LPOFNOTIFYEX
     * }
     */
    public static final AddressLayout LPOFNOTIFYEX = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCHOOSECOLORA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HWND hInstance;
     *     COLORREF rgbResult;
     *     COLORREF *lpCustColors;
     *     DWORD Flags;
     *     LPARAM lCustData;
     *     LPCCHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPCHOOSECOLORA
     * }
     */
    public static final AddressLayout LPCHOOSECOLORA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCHOOSECOLORW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HWND hInstance;
     *     COLORREF rgbResult;
     *     COLORREF *lpCustColors;
     *     DWORD Flags;
     *     LPARAM lCustData;
     *     LPCCHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPCHOOSECOLORW
     * }
     */
    public static final AddressLayout LPCHOOSECOLORW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCHOOSECOLORA LPCHOOSECOLOR
     * }
     */
    public static final AddressLayout LPCHOOSECOLOR = C_POINTER;

    private static class ChooseColorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChooseColorA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static FunctionDescriptor ChooseColorA$descriptor() {
        return ChooseColorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static MethodHandle ChooseColorA$handle() {
        return ChooseColorA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static int ChooseColorA(MemorySegment x0) {
        var mh$ = ChooseColorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseColorA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChooseColorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChooseColorW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static FunctionDescriptor ChooseColorW$descriptor() {
        return ChooseColorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static MethodHandle ChooseColorW$handle() {
        return ChooseColorW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static int ChooseColorW(MemorySegment x0) {
        var mh$ = ChooseColorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseColorW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagFINDREPLACEA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     DWORD Flags;
     *     LPSTR lpstrFindWhat;
     *     LPSTR lpstrReplaceWith;
     *     WORD wFindWhatLen;
     *     WORD wReplaceWithLen;
     *     LPARAM lCustData;
     *     LPFRHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPFINDREPLACEA
     * }
     */
    public static final AddressLayout LPFINDREPLACEA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagFINDREPLACEW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     DWORD Flags;
     *     LPWSTR lpstrFindWhat;
     *     LPWSTR lpstrReplaceWith;
     *     WORD wFindWhatLen;
     *     WORD wReplaceWithLen;
     *     LPARAM lCustData;
     *     LPFRHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPFINDREPLACEW
     * }
     */
    public static final AddressLayout LPFINDREPLACEW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFINDREPLACEA LPFINDREPLACE
     * }
     */
    public static final AddressLayout LPFINDREPLACE = C_POINTER;

    private static class FindTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FindTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static FunctionDescriptor FindTextA$descriptor() {
        return FindTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static MethodHandle FindTextA$handle() {
        return FindTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment FindTextA(MemorySegment x0) {
        var mh$ = FindTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindTextA", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("FindTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static FunctionDescriptor FindTextW$descriptor() {
        return FindTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static MethodHandle FindTextW$handle() {
        return FindTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment FindTextW(MemorySegment x0) {
        var mh$ = FindTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindTextW", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReplaceTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReplaceTextA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static FunctionDescriptor ReplaceTextA$descriptor() {
        return ReplaceTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static MethodHandle ReplaceTextA$handle() {
        return ReplaceTextA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment ReplaceTextA(MemorySegment x0) {
        var mh$ = ReplaceTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReplaceTextA", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReplaceTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ReplaceTextW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static FunctionDescriptor ReplaceTextW$descriptor() {
        return ReplaceTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static MethodHandle ReplaceTextW$handle() {
        return ReplaceTextW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment ReplaceTextW(MemorySegment x0) {
        var mh$ = ReplaceTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReplaceTextW", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef CHOOSEFONTA *LPCHOOSEFONTA
     * }
     */
    public static final AddressLayout LPCHOOSEFONTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef CHOOSEFONTW *LPCHOOSEFONTW
     * }
     */
    public static final AddressLayout LPCHOOSEFONTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCHOOSEFONTA LPCHOOSEFONT
     * }
     */
    public static final AddressLayout LPCHOOSEFONT = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CHOOSEFONTA *PCCHOOSEFONTA
     * }
     */
    public static final AddressLayout PCCHOOSEFONTA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CHOOSEFONTW *PCCHOOSEFONTW
     * }
     */
    public static final AddressLayout PCCHOOSEFONTW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PCCHOOSEFONTA PCCHOOSEFONT
     * }
     */
    public static final AddressLayout PCCHOOSEFONT = C_POINTER;

    private static class ChooseFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChooseFontA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static FunctionDescriptor ChooseFontA$descriptor() {
        return ChooseFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static MethodHandle ChooseFontA$handle() {
        return ChooseFontA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static int ChooseFontA(MemorySegment x0) {
        var mh$ = ChooseFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseFontA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChooseFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChooseFontW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static FunctionDescriptor ChooseFontW$descriptor() {
        return ChooseFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static MethodHandle ChooseFontW$handle() {
        return ChooseFontW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static int ChooseFontW(MemorySegment x0) {
        var mh$ = ChooseFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseFontW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPDA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     WORD nFromPage;
     *     WORD nToPage;
     *     WORD nMinPage;
     *     WORD nMaxPage;
     *     WORD nCopies;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPRINTHOOKPROC lpfnPrintHook;
     *     LPSETUPHOOKPROC lpfnSetupHook;
     *     LPCSTR lpPrintTemplateName;
     *     LPCSTR lpSetupTemplateName;
     *     HGLOBAL hPrintTemplate;
     *     HGLOBAL hSetupTemplate;
     * } *LPPRINTDLGA
     * }
     */
    public static final AddressLayout LPPRINTDLGA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     WORD nFromPage;
     *     WORD nToPage;
     *     WORD nMinPage;
     *     WORD nMaxPage;
     *     WORD nCopies;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPRINTHOOKPROC lpfnPrintHook;
     *     LPSETUPHOOKPROC lpfnSetupHook;
     *     LPCWSTR lpPrintTemplateName;
     *     LPCWSTR lpSetupTemplateName;
     *     HGLOBAL hPrintTemplate;
     *     HGLOBAL hSetupTemplate;
     * } *LPPRINTDLGW
     * }
     */
    public static final AddressLayout LPPRINTDLGW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTDLGA LPPRINTDLG
     * }
     */
    public static final AddressLayout LPPRINTDLG = C_POINTER;

    private static class PrintDlgA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PrintDlgA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgA$descriptor() {
        return PrintDlgA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static MethodHandle PrintDlgA$handle() {
        return PrintDlgA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static int PrintDlgA(MemorySegment pPD) {
        var mh$ = PrintDlgA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgA", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrintDlgW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PrintDlgW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgW$descriptor() {
        return PrintDlgW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static MethodHandle PrintDlgW$handle() {
        return PrintDlgW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static int PrintDlgW(MemorySegment pPD) {
        var mh$ = PrintDlgW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgW", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PRINTPAGERANGE *LPPRINTPAGERANGE
     * }
     */
    public static final AddressLayout LPPRINTPAGERANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PRINTPAGERANGE *PCPRINTPAGERANGE
     * }
     */
    public static final AddressLayout PCPRINTPAGERANGE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDEXA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     DWORD Flags2;
     *     DWORD ExclusionFlags;
     *     DWORD nPageRanges;
     *     DWORD nMaxPageRanges;
     *     LPPRINTPAGERANGE lpPageRanges;
     *     DWORD nMinPage;
     *     DWORD nMaxPage;
     *     DWORD nCopies;
     *     HINSTANCE hInstance;
     *     LPCSTR lpPrintTemplateName;
     *     LPUNKNOWN lpCallback;
     *     DWORD nPropertyPages;
     *     HPROPSHEETPAGE *lphPropertyPages;
     *     DWORD nStartPage;
     *     DWORD dwResultAction;
     * } *LPPRINTDLGEXA
     * }
     */
    public static final AddressLayout LPPRINTDLGEXA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDEXW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     DWORD Flags2;
     *     DWORD ExclusionFlags;
     *     DWORD nPageRanges;
     *     DWORD nMaxPageRanges;
     *     LPPRINTPAGERANGE lpPageRanges;
     *     DWORD nMinPage;
     *     DWORD nMaxPage;
     *     DWORD nCopies;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpPrintTemplateName;
     *     LPUNKNOWN lpCallback;
     *     DWORD nPropertyPages;
     *     HPROPSHEETPAGE *lphPropertyPages;
     *     DWORD nStartPage;
     *     DWORD dwResultAction;
     * } *LPPRINTDLGEXW
     * }
     */
    public static final AddressLayout LPPRINTDLGEXW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTDLGEXA LPPRINTDLGEX
     * }
     */
    public static final AddressLayout LPPRINTDLGEX = C_POINTER;

    private static class PrintDlgExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PrintDlgExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgExA$descriptor() {
        return PrintDlgExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static MethodHandle PrintDlgExA$handle() {
        return PrintDlgExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static int PrintDlgExA(MemorySegment pPD) {
        var mh$ = PrintDlgExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgExA", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrintDlgExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PrintDlgExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgExW$descriptor() {
        return PrintDlgExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static MethodHandle PrintDlgExW$handle() {
        return PrintDlgExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static int PrintDlgExW(MemorySegment pPD) {
        var mh$ = PrintDlgExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgExW", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DEVNAMES *LPDEVNAMES
     * }
     */
    public static final AddressLayout LPDEVNAMES = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const DEVNAMES *PCDEVNAMES
     * }
     */
    public static final AddressLayout PCDEVNAMES = C_POINTER;

    private static class CommDlgExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CommDlgExtendedError"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static FunctionDescriptor CommDlgExtendedError$descriptor() {
        return CommDlgExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static MethodHandle CommDlgExtendedError$handle() {
        return CommDlgExtendedError.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static int CommDlgExtendedError() {
        var mh$ = CommDlgExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommDlgExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPSDA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     DWORD Flags;
     *     POINT ptPaperSize;
     *     RECT rtMinMargin;
     *     RECT rtMargin;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPAGESETUPHOOK lpfnPageSetupHook;
     *     LPPAGEPAINTHOOK lpfnPagePaintHook;
     *     LPCSTR lpPageSetupTemplateName;
     *     HGLOBAL hPageSetupTemplate;
     * } *LPPAGESETUPDLGA
     * }
     */
    public static final AddressLayout LPPAGESETUPDLGA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPSDW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     DWORD Flags;
     *     POINT ptPaperSize;
     *     RECT rtMinMargin;
     *     RECT rtMargin;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPAGESETUPHOOK lpfnPageSetupHook;
     *     LPPAGEPAINTHOOK lpfnPagePaintHook;
     *     LPCWSTR lpPageSetupTemplateName;
     *     HGLOBAL hPageSetupTemplate;
     * } *LPPAGESETUPDLGW
     * }
     */
    public static final AddressLayout LPPAGESETUPDLGW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPAGESETUPDLGA LPPAGESETUPDLG
     * }
     */
    public static final AddressLayout LPPAGESETUPDLG = C_POINTER;

    private static class PageSetupDlgA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PageSetupDlgA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static FunctionDescriptor PageSetupDlgA$descriptor() {
        return PageSetupDlgA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static MethodHandle PageSetupDlgA$handle() {
        return PageSetupDlgA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static int PageSetupDlgA(MemorySegment x0) {
        var mh$ = PageSetupDlgA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PageSetupDlgA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PageSetupDlgW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("PageSetupDlgW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static FunctionDescriptor PageSetupDlgW$descriptor() {
        return PageSetupDlgW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static MethodHandle PageSetupDlgW$handle() {
        return PageSetupDlgW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static int PageSetupDlgW(MemorySegment x0) {
        var mh$ = PageSetupDlgW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PageSetupDlgW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_CharUpperW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_CharUpperW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_CharUpperW$descriptor() {
        return uaw_CharUpperW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static MethodHandle uaw_CharUpperW$handle() {
        return uaw_CharUpperW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static MemorySegment uaw_CharUpperW(MemorySegment String_) {
        var mh$ = uaw_CharUpperW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_CharUpperW", String_);
            }
            return (MemorySegment)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrcmpW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_lstrcmpW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_lstrcmpW$descriptor() {
        return uaw_lstrcmpW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_lstrcmpW$handle() {
        return uaw_lstrcmpW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_lstrcmpW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrcmpW", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrcmpiW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_lstrcmpiW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_lstrcmpiW$descriptor() {
        return uaw_lstrcmpiW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_lstrcmpiW$handle() {
        return uaw_lstrcmpiW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_lstrcmpiW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpiW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrcmpiW", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrlenW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_lstrlenW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_lstrlenW$descriptor() {
        return uaw_lstrlenW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static MethodHandle uaw_lstrlenW$handle() {
        return uaw_lstrlenW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static int uaw_lstrlenW(MemorySegment String_) {
        var mh$ = uaw_lstrlenW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrlenW", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcschr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_wcschr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static FunctionDescriptor uaw_wcschr$descriptor() {
        return uaw_wcschr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MethodHandle uaw_wcschr$handle() {
        return uaw_wcschr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcschr(MemorySegment String_, short Character) {
        var mh$ = uaw_wcschr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcschr", String_, Character);
            }
            return (MemorySegment)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcscpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_wcscpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static FunctionDescriptor uaw_wcscpy$descriptor() {
        return uaw_wcscpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static MethodHandle uaw_wcscpy$handle() {
        return uaw_wcscpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static MemorySegment uaw_wcscpy(MemorySegment Destination, MemorySegment Source) {
        var mh$ = uaw_wcscpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcscpy", Destination, Source);
            }
            return (MemorySegment)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcsicmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_wcsicmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_wcsicmp$descriptor() {
        return uaw_wcsicmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_wcsicmp$handle() {
        return uaw_wcsicmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_wcsicmp(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_wcsicmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcsicmp", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcslen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_wcslen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_wcslen$descriptor() {
        return uaw_wcslen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static MethodHandle uaw_wcslen$handle() {
        return uaw_wcslen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static long uaw_wcslen(MemorySegment String_) {
        var mh$ = uaw_wcslen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcslen", String_);
            }
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcsrchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("uaw_wcsrchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static FunctionDescriptor uaw_wcsrchr$descriptor() {
        return uaw_wcsrchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MethodHandle uaw_wcsrchr$handle() {
        return uaw_wcsrchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcsrchr(MemorySegment String_, short Character) {
        var mh$ = uaw_wcsrchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcsrchr", String_, Character);
            }
            return (MemorySegment)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __unaligned WCHAR *PUWSTR_C
     * }
     */
    public static final AddressLayout PUWSTR_C = C_POINTER;

    private static class NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static GroupLayout NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$layout() {
        return NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID() {
        return NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static void NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.SEGMENT, 0L, NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.LAYOUT.byteSize());
    }

    private static class NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static GroupLayout NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$layout() {
        return NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID() {
        return NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static void NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.SEGMENT, 0L, NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.LAYOUT.byteSize());
    }

    private static class DOMAIN_JOIN_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("DOMAIN_JOIN_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static GroupLayout DOMAIN_JOIN_GUID$layout() {
        return DOMAIN_JOIN_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static MemorySegment DOMAIN_JOIN_GUID() {
        return DOMAIN_JOIN_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static void DOMAIN_JOIN_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DOMAIN_JOIN_GUID$constants.SEGMENT, 0L, DOMAIN_JOIN_GUID$constants.LAYOUT.byteSize());
    }

    private static class DOMAIN_LEAVE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("DOMAIN_LEAVE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static GroupLayout DOMAIN_LEAVE_GUID$layout() {
        return DOMAIN_LEAVE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static MemorySegment DOMAIN_LEAVE_GUID() {
        return DOMAIN_LEAVE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static void DOMAIN_LEAVE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DOMAIN_LEAVE_GUID$constants.SEGMENT, 0L, DOMAIN_LEAVE_GUID$constants.LAYOUT.byteSize());
    }

    private static class FIREWALL_PORT_OPEN_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FIREWALL_PORT_OPEN_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static GroupLayout FIREWALL_PORT_OPEN_GUID$layout() {
        return FIREWALL_PORT_OPEN_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static MemorySegment FIREWALL_PORT_OPEN_GUID() {
        return FIREWALL_PORT_OPEN_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static void FIREWALL_PORT_OPEN_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FIREWALL_PORT_OPEN_GUID$constants.SEGMENT, 0L, FIREWALL_PORT_OPEN_GUID$constants.LAYOUT.byteSize());
    }

    private static class FIREWALL_PORT_CLOSE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("FIREWALL_PORT_CLOSE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static GroupLayout FIREWALL_PORT_CLOSE_GUID$layout() {
        return FIREWALL_PORT_CLOSE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID() {
        return FIREWALL_PORT_CLOSE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static void FIREWALL_PORT_CLOSE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FIREWALL_PORT_CLOSE_GUID$constants.SEGMENT, 0L, FIREWALL_PORT_CLOSE_GUID$constants.LAYOUT.byteSize());
    }

    private static class MACHINE_POLICY_PRESENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("MACHINE_POLICY_PRESENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static GroupLayout MACHINE_POLICY_PRESENT_GUID$layout() {
        return MACHINE_POLICY_PRESENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID() {
        return MACHINE_POLICY_PRESENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static void MACHINE_POLICY_PRESENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, MACHINE_POLICY_PRESENT_GUID$constants.SEGMENT, 0L, MACHINE_POLICY_PRESENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class USER_POLICY_PRESENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("USER_POLICY_PRESENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static GroupLayout USER_POLICY_PRESENT_GUID$layout() {
        return USER_POLICY_PRESENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static MemorySegment USER_POLICY_PRESENT_GUID() {
        return USER_POLICY_PRESENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static void USER_POLICY_PRESENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, USER_POLICY_PRESENT_GUID$constants.SEGMENT, 0L, USER_POLICY_PRESENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class RPC_INTERFACE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("RPC_INTERFACE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static GroupLayout RPC_INTERFACE_EVENT_GUID$layout() {
        return RPC_INTERFACE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static MemorySegment RPC_INTERFACE_EVENT_GUID() {
        return RPC_INTERFACE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static void RPC_INTERFACE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, RPC_INTERFACE_EVENT_GUID$constants.SEGMENT, 0L, RPC_INTERFACE_EVENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class NAMED_PIPE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("NAMED_PIPE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static GroupLayout NAMED_PIPE_EVENT_GUID$layout() {
        return NAMED_PIPE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static MemorySegment NAMED_PIPE_EVENT_GUID() {
        return NAMED_PIPE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static void NAMED_PIPE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NAMED_PIPE_EVENT_GUID$constants.SEGMENT, 0L, NAMED_PIPE_EVENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = findOrThrow("CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static GroupLayout CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$layout() {
        return CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID() {
        return CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static void CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.SEGMENT, 0L, CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
     *     union {
     *         SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
     *         struct {
     *             DWORD DataOffset;
     *             BYTE Data[1];
     *         } s;
     *     } u;
     * } *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
     * }
     */
    public static final AddressLayout LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DESCRIPTIONA {
     *     LPSTR lpDescription;
     * } *LPSERVICE_DESCRIPTIONA
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTIONA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DESCRIPTIONW {
     *     LPWSTR lpDescription;
     * } *LPSERVICE_DESCRIPTIONW
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTIONW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTION = C_POINTER;
    private static final int SC_ACTION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_NONE = 0
     * }
     */
    public static int SC_ACTION_NONE() {
        return SC_ACTION_NONE;
    }
    private static final int SC_ACTION_RESTART = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_RESTART = 1
     * }
     */
    public static int SC_ACTION_RESTART() {
        return SC_ACTION_RESTART;
    }
    private static final int SC_ACTION_REBOOT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_REBOOT = 2
     * }
     */
    public static int SC_ACTION_REBOOT() {
        return SC_ACTION_REBOOT;
    }
    private static final int SC_ACTION_RUN_COMMAND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND = 3
     * }
     */
    public static int SC_ACTION_RUN_COMMAND() {
        return SC_ACTION_RUN_COMMAND;
    }
    private static final int SC_ACTION_OWN_RESTART = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_OWN_RESTART = 4
     * }
     */
    public static int SC_ACTION_OWN_RESTART() {
        return SC_ACTION_OWN_RESTART;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SC_ACTION {
     *     SC_ACTION_TYPE Type;
     *     DWORD Delay;
     * } *LPSC_ACTION
     * }
     */
    public static final AddressLayout LPSC_ACTION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONSA {
     *     DWORD dwResetPeriod;
     *     LPSTR lpRebootMsg;
     *     LPSTR lpCommand;
     *     DWORD cActions;
     *     SC_ACTION *lpsaActions;
     * } *LPSERVICE_FAILURE_ACTIONSA
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONSW {
     *     DWORD dwResetPeriod;
     *     LPWSTR lpRebootMsg;
     *     LPWSTR lpCommand;
     *     DWORD cActions;
     *     SC_ACTION *lpsaActions;
     * } *LPSERVICE_FAILURE_ACTIONSW
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
     *     BOOL fDelayedAutostart;
     * } *LPSERVICE_DELAYED_AUTO_START_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_DELAYED_AUTO_START_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
     *     BOOL fFailureActionsOnNonCrashFailures;
     * } *LPSERVICE_FAILURE_ACTIONS_FLAG
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONS_FLAG = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_SID_INFO {
     *     DWORD dwServiceSidType;
     * } *LPSERVICE_SID_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_SID_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
     *     LPSTR pmszRequiredPrivileges;
     * } *LPSERVICE_REQUIRED_PRIVILEGES_INFOA
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
     *     LPWSTR pmszRequiredPrivileges;
     * } *LPSERVICE_REQUIRED_PRIVILEGES_INFOW
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_PRESHUTDOWN_INFO {
     *     DWORD dwPreshutdownTimeout;
     * } *LPSERVICE_PRESHUTDOWN_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_PRESHUTDOWN_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
     *     DWORD dwDataType;
     *     DWORD cbData;
     *     PBYTE pData;
     * } *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER {
     *     DWORD dwTriggerType;
     *     DWORD dwAction;
     *     GUID *pTriggerSubtype;
     *     DWORD cDataItems;
     *     PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
     * } *PSERVICE_TRIGGER
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER_INFO {
     *     DWORD cTriggers;
     *     PSERVICE_TRIGGER pTriggers;
     *     PBYTE pReserved;
     * } *PSERVICE_TRIGGER_INFO
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_PREFERRED_NODE_INFO {
     *     USHORT usPreferredNode;
     *     BOOLEAN fDelete;
     * } *LPSERVICE_PREFERRED_NODE_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_PREFERRED_NODE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TIMECHANGE_INFO {
     *     LARGE_INTEGER liNewTime;
     *     LARGE_INTEGER liOldTime;
     * } *PSERVICE_TIMECHANGE_INFO
     * }
     */
    public static final AddressLayout PSERVICE_TIMECHANGE_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
     *     DWORD dwLaunchProtected;
     * } *PSERVICE_LAUNCH_PROTECTED_INFO
     * }
     */
    public static final AddressLayout PSERVICE_LAUNCH_PROTECTED_INFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SC_HANDLE__ {
     *     int unused;
     * } *SC_HANDLE
     * }
     */
    public static final AddressLayout SC_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SC_HANDLE *LPSC_HANDLE
     * }
     */
    public static final AddressLayout LPSC_HANDLE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SERVICE_STATUS_HANDLE__ {
     *     int unused;
     * } *SERVICE_STATUS_HANDLE
     * }
     */
    public static final AddressLayout SERVICE_STATUS_HANDLE = C_POINTER;
    private static final int SC_STATUS_PROCESS_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO = 0
     * }
     */
    public static int SC_STATUS_PROCESS_INFO() {
        return SC_STATUS_PROCESS_INFO;
    }
    private static final int SC_ENUM_PROCESS_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_ENUM_TYPE.SC_ENUM_PROCESS_INFO = 0
     * }
     */
    public static int SC_ENUM_PROCESS_INFO() {
        return SC_ENUM_PROCESS_INFO;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_STATUS {
     *     DWORD dwServiceType;
     *     DWORD dwCurrentState;
     *     DWORD dwControlsAccepted;
     *     DWORD dwWin32ExitCode;
     *     DWORD dwServiceSpecificExitCode;
     *     DWORD dwCheckPoint;
     *     DWORD dwWaitHint;
     * } *LPSERVICE_STATUS
     * }
     */
    public static final AddressLayout LPSERVICE_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_STATUS_PROCESS {
     *     DWORD dwServiceType;
     *     DWORD dwCurrentState;
     *     DWORD dwControlsAccepted;
     *     DWORD dwWin32ExitCode;
     *     DWORD dwServiceSpecificExitCode;
     *     DWORD dwCheckPoint;
     *     DWORD dwWaitHint;
     *     DWORD dwProcessId;
     *     DWORD dwServiceFlags;
     * } *LPSERVICE_STATUS_PROCESS
     * }
     */
    public static final AddressLayout LPSERVICE_STATUS_PROCESS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUSA {
     *     LPSTR lpServiceName;
     *     LPSTR lpDisplayName;
     *     SERVICE_STATUS ServiceStatus;
     * } *LPENUM_SERVICE_STATUSA
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUSW {
     *     LPWSTR lpServiceName;
     *     LPWSTR lpDisplayName;
     *     SERVICE_STATUS ServiceStatus;
     * } *LPENUM_SERVICE_STATUSW
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
     *     LPSTR lpServiceName;
     *     LPSTR lpDisplayName;
     *     SERVICE_STATUS_PROCESS ServiceStatusProcess;
     * } *LPENUM_SERVICE_STATUS_PROCESSA
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
     *     LPWSTR lpServiceName;
     *     LPWSTR lpDisplayName;
     *     SERVICE_STATUS_PROCESS ServiceStatusProcess;
     * } *LPENUM_SERVICE_STATUS_PROCESSW
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPVOID SC_LOCK
     * }
     */
    public static final AddressLayout SC_LOCK = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSA {
     *     DWORD fIsLocked;
     *     LPSTR lpLockOwner;
     *     DWORD dwLockDuration;
     * } *LPQUERY_SERVICE_LOCK_STATUSA
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSW {
     *     DWORD fIsLocked;
     *     LPWSTR lpLockOwner;
     *     DWORD dwLockDuration;
     * } *LPQUERY_SERVICE_LOCK_STATUSW
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_CONFIGA {
     *     DWORD dwServiceType;
     *     DWORD dwStartType;
     *     DWORD dwErrorControl;
     *     LPSTR lpBinaryPathName;
     *     LPSTR lpLoadOrderGroup;
     *     DWORD dwTagId;
     *     LPSTR lpDependencies;
     *     LPSTR lpServiceStartName;
     *     LPSTR lpDisplayName;
     * } *LPQUERY_SERVICE_CONFIGA
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIGA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_CONFIGW {
     *     DWORD dwServiceType;
     *     DWORD dwStartType;
     *     DWORD dwErrorControl;
     *     LPWSTR lpBinaryPathName;
     *     LPWSTR lpLoadOrderGroup;
     *     DWORD dwTagId;
     *     LPWSTR lpDependencies;
     *     LPWSTR lpServiceStartName;
     *     LPWSTR lpDisplayName;
     * } *LPQUERY_SERVICE_CONFIGW
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIGW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIG = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TABLE_ENTRYA {
     *     LPSTR lpServiceName;
     *     LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
     * } *LPSERVICE_TABLE_ENTRYA
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRYA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TABLE_ENTRYW {
     *     LPWSTR lpServiceName;
     *     LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
     * } *LPSERVICE_TABLE_ENTRYW
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRYW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_1 {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_NOTIFY_1
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_1 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_2A {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     *     DWORD dwNotificationTriggered;
     *     LPSTR pszServiceNames;
     * } *PSERVICE_NOTIFY_2A
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2A = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_2W {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     *     DWORD dwNotificationTriggered;
     *     LPWSTR pszServiceNames;
     * } *PSERVICE_NOTIFY_2W
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2W = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2 = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFYA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFYW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
     *     DWORD dwReason;
     *     LPSTR pszComment;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_CONTROL_STATUS_REASON_PARAMSA
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMSA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
     *     DWORD dwReason;
     *     LPWSTR pszComment;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_CONTROL_STATUS_REASON_PARAMSW
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMSW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_START_REASON {
     *     DWORD dwReason;
     * } *PSERVICE_START_REASON
     * }
     */
    public static final AddressLayout PSERVICE_START_REASON = C_POINTER;

    private static class ChangeServiceConfigA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChangeServiceConfigA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfigA$descriptor() {
        return ChangeServiceConfigA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static MethodHandle ChangeServiceConfigA$handle() {
        return ChangeServiceConfigA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static int ChangeServiceConfigA(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfigA", hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
            }
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfigW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChangeServiceConfigW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfigW$descriptor() {
        return ChangeServiceConfigW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static MethodHandle ChangeServiceConfigW$handle() {
        return ChangeServiceConfigW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static int ChangeServiceConfigW(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfigW", hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
            }
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfig2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChangeServiceConfig2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfig2A$descriptor() {
        return ChangeServiceConfig2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MethodHandle ChangeServiceConfig2A$handle() {
        return ChangeServiceConfig2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static int ChangeServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfig2A", hService, dwInfoLevel, lpInfo);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfig2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ChangeServiceConfig2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfig2W$descriptor() {
        return ChangeServiceConfig2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MethodHandle ChangeServiceConfig2W$handle() {
        return ChangeServiceConfig2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static int ChangeServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfig2W", hService, dwInfoLevel, lpInfo);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloseServiceHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CloseServiceHandle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static FunctionDescriptor CloseServiceHandle$descriptor() {
        return CloseServiceHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static MethodHandle CloseServiceHandle$handle() {
        return CloseServiceHandle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static int CloseServiceHandle(MemorySegment hSCObject) {
        var mh$ = CloseServiceHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseServiceHandle", hSCObject);
            }
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ControlService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor ControlService$descriptor() {
        return ControlService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle ControlService$handle() {
        return ControlService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int ControlService(MemorySegment hService, int dwControl, MemorySegment lpServiceStatus) {
        var mh$ = ControlService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlService", hService, dwControl, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateServiceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static FunctionDescriptor CreateServiceA$descriptor() {
        return CreateServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static MethodHandle CreateServiceA$handle() {
        return CreateServiceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateServiceA", hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("CreateServiceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static FunctionDescriptor CreateServiceW$descriptor() {
        return CreateServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static MethodHandle CreateServiceW$handle() {
        return CreateServiceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateServiceW", hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("DeleteService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static FunctionDescriptor DeleteService$descriptor() {
        return DeleteService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static MethodHandle DeleteService$handle() {
        return DeleteService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static int DeleteService(MemorySegment hService) {
        var mh$ = DeleteService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteService", hService);
            }
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumDependentServicesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumDependentServicesA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static FunctionDescriptor EnumDependentServicesA$descriptor() {
        return EnumDependentServicesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MethodHandle EnumDependentServicesA$handle() {
        return EnumDependentServicesA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static int EnumDependentServicesA(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumDependentServicesA", hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
            }
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumDependentServicesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumDependentServicesW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static FunctionDescriptor EnumDependentServicesW$descriptor() {
        return EnumDependentServicesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MethodHandle EnumDependentServicesW$handle() {
        return EnumDependentServicesW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static int EnumDependentServicesW(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumDependentServicesW", hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
            }
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumServicesStatusA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusA$descriptor() {
        return EnumServicesStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MethodHandle EnumServicesStatusA$handle() {
        return EnumServicesStatusA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static int EnumServicesStatusA(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusA", hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
            }
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumServicesStatusW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusW$descriptor() {
        return EnumServicesStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MethodHandle EnumServicesStatusW$handle() {
        return EnumServicesStatusW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static int EnumServicesStatusW(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusW", hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
            }
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumServicesStatusExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusExA$descriptor() {
        return EnumServicesStatusExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static MethodHandle EnumServicesStatusExA$handle() {
        return EnumServicesStatusExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static int EnumServicesStatusExA(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusExA", hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
            }
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("EnumServicesStatusExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusExW$descriptor() {
        return EnumServicesStatusExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static MethodHandle EnumServicesStatusExW$handle() {
        return EnumServicesStatusExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static int EnumServicesStatusExW(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusExW", hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
            }
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceKeyNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceKeyNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceKeyNameA$descriptor() {
        return GetServiceKeyNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceKeyNameA$handle() {
        return GetServiceKeyNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceKeyNameA(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceKeyNameA", hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceKeyNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceKeyNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceKeyNameW$descriptor() {
        return GetServiceKeyNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceKeyNameW$handle() {
        return GetServiceKeyNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceKeyNameW(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceKeyNameW", hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceDisplayNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceDisplayNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceDisplayNameA$descriptor() {
        return GetServiceDisplayNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceDisplayNameA$handle() {
        return GetServiceDisplayNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceDisplayNameA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDisplayNameA", hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceDisplayNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceDisplayNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceDisplayNameW$descriptor() {
        return GetServiceDisplayNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceDisplayNameW$handle() {
        return GetServiceDisplayNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceDisplayNameW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDisplayNameW", hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LockServiceDatabase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("LockServiceDatabase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static FunctionDescriptor LockServiceDatabase$descriptor() {
        return LockServiceDatabase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static MethodHandle LockServiceDatabase$handle() {
        return LockServiceDatabase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static MemorySegment LockServiceDatabase(MemorySegment hSCManager) {
        var mh$ = LockServiceDatabase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LockServiceDatabase", hSCManager);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyBootConfigStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("NotifyBootConfigStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static FunctionDescriptor NotifyBootConfigStatus$descriptor() {
        return NotifyBootConfigStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static MethodHandle NotifyBootConfigStatus$handle() {
        return NotifyBootConfigStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static int NotifyBootConfigStatus(int BootAcceptable) {
        var mh$ = NotifyBootConfigStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyBootConfigStatus", BootAcceptable);
            }
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenSCManagerA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OpenSCManagerA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenSCManagerA$descriptor() {
        return OpenSCManagerA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenSCManagerA$handle() {
        return OpenSCManagerA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerA(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenSCManagerA", lpMachineName, lpDatabaseName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenSCManagerW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OpenSCManagerW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenSCManagerW$descriptor() {
        return OpenSCManagerW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenSCManagerW$handle() {
        return OpenSCManagerW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerW(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenSCManagerW", lpMachineName, lpDatabaseName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OpenServiceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenServiceA$descriptor() {
        return OpenServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenServiceA$handle() {
        return OpenServiceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenServiceA", hSCManager, lpServiceName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("OpenServiceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenServiceW$descriptor() {
        return OpenServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenServiceW$handle() {
        return OpenServiceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenServiceW", hSCManager, lpServiceName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfigA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceConfigA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfigA$descriptor() {
        return QueryServiceConfigA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfigA$handle() {
        return QueryServiceConfigA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfigA(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfigA", hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfigW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceConfigW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfigW$descriptor() {
        return QueryServiceConfigW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfigW$handle() {
        return QueryServiceConfigW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfigW(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfigW", hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfig2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceConfig2A"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfig2A$descriptor() {
        return QueryServiceConfig2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfig2A$handle() {
        return QueryServiceConfig2A.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfig2A", hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfig2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceConfig2W"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfig2W$descriptor() {
        return QueryServiceConfig2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfig2W$handle() {
        return QueryServiceConfig2W.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfig2W", hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceLockStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceLockStatusA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceLockStatusA$descriptor() {
        return QueryServiceLockStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceLockStatusA$handle() {
        return QueryServiceLockStatusA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceLockStatusA(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceLockStatusA", hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceLockStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceLockStatusW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceLockStatusW$descriptor() {
        return QueryServiceLockStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceLockStatusW$handle() {
        return QueryServiceLockStatusW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceLockStatusW(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceLockStatusW", hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceObjectSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceObjectSecurity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceObjectSecurity$descriptor() {
        return QueryServiceObjectSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceObjectSecurity$handle() {
        return QueryServiceObjectSecurity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceObjectSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceObjectSecurity", hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor QueryServiceStatus$descriptor() {
        return QueryServiceStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle QueryServiceStatus$handle() {
        return QueryServiceStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int QueryServiceStatus(MemorySegment hService, MemorySegment lpServiceStatus) {
        var mh$ = QueryServiceStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceStatus", hService, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceStatusEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceStatusEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceStatusEx$descriptor() {
        return QueryServiceStatusEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceStatusEx$handle() {
        return QueryServiceStatusEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceStatusEx(MemorySegment hService, int InfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceStatusEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceStatusEx", hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterServiceCtrlHandlerA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerA$descriptor() {
        return RegisterServiceCtrlHandlerA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerA$handle() {
        return RegisterServiceCtrlHandlerA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerA(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerA", lpServiceName, lpHandlerProc);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterServiceCtrlHandlerW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerW$descriptor() {
        return RegisterServiceCtrlHandlerW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerW$handle() {
        return RegisterServiceCtrlHandlerW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerW(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerW", lpServiceName, lpHandlerProc);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterServiceCtrlHandlerExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerExA$descriptor() {
        return RegisterServiceCtrlHandlerExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerExA$handle() {
        return RegisterServiceCtrlHandlerExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExA(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerExA", lpServiceName, lpHandlerProc, lpContext);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("RegisterServiceCtrlHandlerExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerExW$descriptor() {
        return RegisterServiceCtrlHandlerExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerExW$handle() {
        return RegisterServiceCtrlHandlerExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExW(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerExW", lpServiceName, lpHandlerProc, lpContext);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetServiceObjectSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SetServiceObjectSecurity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static FunctionDescriptor SetServiceObjectSecurity$descriptor() {
        return SetServiceObjectSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static MethodHandle SetServiceObjectSecurity$handle() {
        return SetServiceObjectSecurity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static int SetServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor) {
        var mh$ = SetServiceObjectSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetServiceObjectSecurity", hService, dwSecurityInformation, lpSecurityDescriptor);
            }
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetServiceStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SetServiceStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor SetServiceStatus$descriptor() {
        return SetServiceStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle SetServiceStatus$handle() {
        return SetServiceStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int SetServiceStatus(MemorySegment hServiceStatus, MemorySegment lpServiceStatus) {
        var mh$ = SetServiceStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetServiceStatus", hServiceStatus, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceCtrlDispatcherA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StartServiceCtrlDispatcherA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static FunctionDescriptor StartServiceCtrlDispatcherA$descriptor() {
        return StartServiceCtrlDispatcherA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static MethodHandle StartServiceCtrlDispatcherA$handle() {
        return StartServiceCtrlDispatcherA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static int StartServiceCtrlDispatcherA(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceCtrlDispatcherA", lpServiceStartTable);
            }
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceCtrlDispatcherW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StartServiceCtrlDispatcherW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static FunctionDescriptor StartServiceCtrlDispatcherW$descriptor() {
        return StartServiceCtrlDispatcherW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static MethodHandle StartServiceCtrlDispatcherW$handle() {
        return StartServiceCtrlDispatcherW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static int StartServiceCtrlDispatcherW(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceCtrlDispatcherW", lpServiceStartTable);
            }
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StartServiceA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static FunctionDescriptor StartServiceA$descriptor() {
        return StartServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static MethodHandle StartServiceA$handle() {
        return StartServiceA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static int StartServiceA(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceA", hService, dwNumServiceArgs, lpServiceArgVectors);
            }
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("StartServiceW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static FunctionDescriptor StartServiceW$descriptor() {
        return StartServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static MethodHandle StartServiceW$handle() {
        return StartServiceW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static int StartServiceW(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceW", hService, dwNumServiceArgs, lpServiceArgVectors);
            }
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnlockServiceDatabase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UnlockServiceDatabase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static FunctionDescriptor UnlockServiceDatabase$descriptor() {
        return UnlockServiceDatabase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static MethodHandle UnlockServiceDatabase$handle() {
        return UnlockServiceDatabase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static int UnlockServiceDatabase(MemorySegment ScLock) {
        var mh$ = UnlockServiceDatabase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnlockServiceDatabase", ScLock);
            }
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyServiceStatusChangeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("NotifyServiceStatusChangeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static FunctionDescriptor NotifyServiceStatusChangeA$descriptor() {
        return NotifyServiceStatusChangeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static MethodHandle NotifyServiceStatusChangeA$handle() {
        return NotifyServiceStatusChangeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static int NotifyServiceStatusChangeA(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyServiceStatusChangeA", hService, dwNotifyMask, pNotifyBuffer);
            }
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyServiceStatusChangeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("NotifyServiceStatusChangeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static FunctionDescriptor NotifyServiceStatusChangeW$descriptor() {
        return NotifyServiceStatusChangeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static MethodHandle NotifyServiceStatusChangeW$handle() {
        return NotifyServiceStatusChangeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static int NotifyServiceStatusChangeW(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyServiceStatusChangeW", hService, dwNotifyMask, pNotifyBuffer);
            }
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlServiceExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ControlServiceExA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static FunctionDescriptor ControlServiceExA$descriptor() {
        return ControlServiceExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MethodHandle ControlServiceExA$handle() {
        return ControlServiceExA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static int ControlServiceExA(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlServiceExA", hService, dwControl, dwInfoLevel, pControlParams);
            }
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlServiceExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ControlServiceExW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static FunctionDescriptor ControlServiceExW$descriptor() {
        return ControlServiceExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MethodHandle ControlServiceExW$handle() {
        return ControlServiceExW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static int ControlServiceExW(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlServiceExW", hService, dwControl, dwInfoLevel, pControlParams);
            }
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceDynamicInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("QueryServiceDynamicInformation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static FunctionDescriptor QueryServiceDynamicInformation$descriptor() {
        return QueryServiceDynamicInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static MethodHandle QueryServiceDynamicInformation$handle() {
        return QueryServiceDynamicInformation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static int QueryServiceDynamicInformation(MemorySegment hServiceStatus, int dwInfoLevel, MemorySegment ppDynamicInfo) {
        var mh$ = QueryServiceDynamicInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceDynamicInformation", hServiceStatus, dwInfoLevel, ppDynamicInfo);
            }
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SC_EVENT_DATABASE_CHANGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_DATABASE_CHANGE = 0
     * }
     */
    public static int SC_EVENT_DATABASE_CHANGE() {
        return SC_EVENT_DATABASE_CHANGE;
    }
    private static final int SC_EVENT_PROPERTY_CHANGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_PROPERTY_CHANGE = 1
     * }
     */
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return SC_EVENT_PROPERTY_CHANGE;
    }
    private static final int SC_EVENT_STATUS_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_STATUS_CHANGE = 2
     * }
     */
    public static int SC_EVENT_STATUS_CHANGE() {
        return SC_EVENT_STATUS_CHANGE;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SC_EVENT_TYPE {
     *     SC_EVENT_DATABASE_CHANGE,
     *     SC_EVENT_PROPERTY_CHANGE,
     *     SC_EVENT_STATUS_CHANGE
     * } *PSC_EVENT_TYPE
     * }
     */
    public static final AddressLayout PSC_EVENT_TYPE = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SC_NOTIFICATION_REGISTRATION *PSC_NOTIFICATION_REGISTRATION
     * }
     */
    public static final AddressLayout PSC_NOTIFICATION_REGISTRATION = C_POINTER;

    private static class SubscribeServiceChangeNotifications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("SubscribeServiceChangeNotifications"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static FunctionDescriptor SubscribeServiceChangeNotifications$descriptor() {
        return SubscribeServiceChangeNotifications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static MethodHandle SubscribeServiceChangeNotifications$handle() {
        return SubscribeServiceChangeNotifications.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static int SubscribeServiceChangeNotifications(MemorySegment hService, int eEventType, MemorySegment pCallback, MemorySegment pCallbackContext, MemorySegment pSubscription) {
        var mh$ = SubscribeServiceChangeNotifications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SubscribeServiceChangeNotifications", hService, eEventType, pCallback, pCallbackContext, pSubscription);
            }
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnsubscribeServiceChangeNotifications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("UnsubscribeServiceChangeNotifications"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static FunctionDescriptor UnsubscribeServiceChangeNotifications$descriptor() {
        return UnsubscribeServiceChangeNotifications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static MethodHandle UnsubscribeServiceChangeNotifications$handle() {
        return UnsubscribeServiceChangeNotifications.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static void UnsubscribeServiceChangeNotifications(MemorySegment pSubscription) {
        var mh$ = UnsubscribeServiceChangeNotifications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnsubscribeServiceChangeNotifications", pSubscription);
            }
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WaitServiceState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("WaitServiceState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static FunctionDescriptor WaitServiceState$descriptor() {
        return WaitServiceState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static MethodHandle WaitServiceState$handle() {
        return WaitServiceState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static int WaitServiceState(MemorySegment hService, int dwNotify, int dwTimeout, MemorySegment hCancelEvent) {
        var mh$ = WaitServiceState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WaitServiceState", hService, dwNotify, dwTimeout, hCancelEvent);
            }
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceRegistryStateParameters = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStateParameters = 0
     * }
     */
    public static int ServiceRegistryStateParameters() {
        return ServiceRegistryStateParameters;
    }
    private static final int ServiceRegistryStatePersistent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStatePersistent = 1
     * }
     */
    public static int ServiceRegistryStatePersistent() {
        return ServiceRegistryStatePersistent;
    }
    private static final int MaxServiceRegistryStateType = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.MaxServiceRegistryStateType = 2
     * }
     */
    public static int MaxServiceRegistryStateType() {
        return MaxServiceRegistryStateType;
    }

    private static class GetServiceRegistryStateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceRegistryStateKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static FunctionDescriptor GetServiceRegistryStateKey$descriptor() {
        return GetServiceRegistryStateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MethodHandle GetServiceRegistryStateKey$handle() {
        return GetServiceRegistryStateKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static int GetServiceRegistryStateKey(MemorySegment ServiceStatusHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetServiceRegistryStateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceRegistryStateKey", ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
            }
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceDirectoryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryPersistentState = 0
     * }
     */
    public static int ServiceDirectoryPersistentState() {
        return ServiceDirectoryPersistentState;
    }
    private static final int ServiceDirectoryTypeMax = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryTypeMax = 1
     * }
     */
    public static int ServiceDirectoryTypeMax() {
        return ServiceDirectoryTypeMax;
    }

    private static class GetServiceDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetServiceDirectory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static FunctionDescriptor GetServiceDirectory$descriptor() {
        return GetServiceDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static MethodHandle GetServiceDirectory$handle() {
        return GetServiceDirectory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static int GetServiceDirectory(MemorySegment hServiceStatus, int eDirectoryType, MemorySegment lpPathBuffer, int cchPathBufferLength, MemorySegment lpcchRequiredBufferLength) {
        var mh$ = GetServiceDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDirectory", hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
            }
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceSharedRegistryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_SHARED_REGISTRY_STATE_TYPE.ServiceSharedRegistryPersistentState = 0
     * }
     */
    public static int ServiceSharedRegistryPersistentState() {
        return ServiceSharedRegistryPersistentState;
    }

    private static class GetSharedServiceRegistryStateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetSharedServiceRegistryStateKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static FunctionDescriptor GetSharedServiceRegistryStateKey$descriptor() {
        return GetSharedServiceRegistryStateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MethodHandle GetSharedServiceRegistryStateKey$handle() {
        return GetSharedServiceRegistryStateKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static int GetSharedServiceRegistryStateKey(MemorySegment ServiceHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetSharedServiceRegistryStateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSharedServiceRegistryStateKey", ServiceHandle, StateType, AccessMask, ServiceStateKey);
            }
            return (int)mh$.invokeExact(ServiceHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceSharedDirectoryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_SHARED_DIRECTORY_TYPE.ServiceSharedDirectoryPersistentState = 0
     * }
     */
    public static int ServiceSharedDirectoryPersistentState() {
        return ServiceSharedDirectoryPersistentState;
    }

    private static class GetSharedServiceDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("GetSharedServiceDirectory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static FunctionDescriptor GetSharedServiceDirectory$descriptor() {
        return GetSharedServiceDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static MethodHandle GetSharedServiceDirectory$handle() {
        return GetSharedServiceDirectory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static int GetSharedServiceDirectory(MemorySegment ServiceHandle, int DirectoryType, MemorySegment PathBuffer, int PathBufferLength, MemorySegment RequiredBufferLength) {
        var mh$ = GetSharedServiceDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSharedServiceDirectory", ServiceHandle, DirectoryType, PathBuffer, PathBufferLength, RequiredBufferLength);
            }
            return (int)mh$.invokeExact(ServiceHandle, DirectoryType, PathBuffer, PathBufferLength, RequiredBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMDEVCAPS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwModemProviderVersion;
     *     DWORD dwModemManufacturerOffset;
     *     DWORD dwModemManufacturerSize;
     *     DWORD dwModemModelOffset;
     *     DWORD dwModemModelSize;
     *     DWORD dwModemVersionOffset;
     *     DWORD dwModemVersionSize;
     *     DWORD dwDialOptions;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwModemOptions;
     *     DWORD dwMaxDTERate;
     *     DWORD dwMaxDCERate;
     *     BYTE abVariablePortion[1];
     * } *PMODEMDEVCAPS
     * }
     */
    public static final AddressLayout PMODEMDEVCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMDEVCAPS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwModemProviderVersion;
     *     DWORD dwModemManufacturerOffset;
     *     DWORD dwModemManufacturerSize;
     *     DWORD dwModemModelOffset;
     *     DWORD dwModemModelSize;
     *     DWORD dwModemVersionOffset;
     *     DWORD dwModemVersionSize;
     *     DWORD dwDialOptions;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwModemOptions;
     *     DWORD dwMaxDTERate;
     *     DWORD dwMaxDCERate;
     *     BYTE abVariablePortion[1];
     * } *LPMODEMDEVCAPS
     * }
     */
    public static final AddressLayout LPMODEMDEVCAPS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMSETTINGS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwPreferredModemOptions;
     *     DWORD dwNegotiatedModemOptions;
     *     DWORD dwNegotiatedDCERate;
     *     BYTE abVariablePortion[1];
     * } *PMODEMSETTINGS
     * }
     */
    public static final AddressLayout PMODEMSETTINGS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMSETTINGS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwPreferredModemOptions;
     *     DWORD dwNegotiatedModemOptions;
     *     DWORD dwNegotiatedDCERate;
     *     BYTE abVariablePortion[1];
     * } *LPMODEMSETTINGS
     * }
     */
    public static final AddressLayout LPMODEMSETTINGS = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HIMC__ {
     *     int unused;
     * } *HIMC
     * }
     */
    public static final AddressLayout HIMC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HIMCC__ {
     *     int unused;
     * } *HIMCC
     * }
     */
    public static final AddressLayout HIMCC = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HKL *LPHKL
     * }
     */
    public static final AddressLayout LPHKL = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *PCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout PCOMPOSITIONFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *NPCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout NPCOMPOSITIONFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *LPCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout LPCOMPOSITIONFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *PCANDIDATEFORM
     * }
     */
    public static final AddressLayout PCANDIDATEFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *NPCANDIDATEFORM
     * }
     */
    public static final AddressLayout NPCANDIDATEFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *LPCANDIDATEFORM
     * }
     */
    public static final AddressLayout LPCANDIDATEFORM = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *PCANDIDATELIST
     * }
     */
    public static final AddressLayout PCANDIDATELIST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *NPCANDIDATELIST
     * }
     */
    public static final AddressLayout NPCANDIDATELIST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *LPCANDIDATELIST
     * }
     */
    public static final AddressLayout LPCANDIDATELIST = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *PREGISTERWORDA
     * }
     */
    public static final AddressLayout PREGISTERWORDA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *NPREGISTERWORDA
     * }
     */
    public static final AddressLayout NPREGISTERWORDA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *LPREGISTERWORDA
     * }
     */
    public static final AddressLayout LPREGISTERWORDA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *PREGISTERWORDW
     * }
     */
    public static final AddressLayout PREGISTERWORDW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *NPREGISTERWORDW
     * }
     */
    public static final AddressLayout NPREGISTERWORDW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *LPREGISTERWORDW
     * }
     */
    public static final AddressLayout LPREGISTERWORDW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PREGISTERWORDA PREGISTERWORD
     * }
     */
    public static final AddressLayout PREGISTERWORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPREGISTERWORDA NPREGISTERWORD
     * }
     */
    public static final AddressLayout NPREGISTERWORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPREGISTERWORDA LPREGISTERWORD
     * }
     */
    public static final AddressLayout LPREGISTERWORD = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *PRECONVERTSTRING
     * }
     */
    public static final AddressLayout PRECONVERTSTRING = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *NPRECONVERTSTRING
     * }
     */
    public static final AddressLayout NPRECONVERTSTRING = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *LPRECONVERTSTRING
     * }
     */
    public static final AddressLayout LPRECONVERTSTRING = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *PSTYLEBUFA
     * }
     */
    public static final AddressLayout PSTYLEBUFA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *NPSTYLEBUFA
     * }
     */
    public static final AddressLayout NPSTYLEBUFA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *LPSTYLEBUFA
     * }
     */
    public static final AddressLayout LPSTYLEBUFA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *PSTYLEBUFW
     * }
     */
    public static final AddressLayout PSTYLEBUFW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *NPSTYLEBUFW
     * }
     */
    public static final AddressLayout NPSTYLEBUFW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *LPSTYLEBUFW
     * }
     */
    public static final AddressLayout LPSTYLEBUFW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSTYLEBUFA PSTYLEBUF
     * }
     */
    public static final AddressLayout PSTYLEBUF = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPSTYLEBUFA NPSTYLEBUF
     * }
     */
    public static final AddressLayout NPSTYLEBUF = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSTYLEBUFA LPSTYLEBUF
     * }
     */
    public static final AddressLayout LPSTYLEBUF = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *PIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *NPIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *LPIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFOA = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *PIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *NPIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *LPIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFOW = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFO = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *PIMECHARPOSITION
     * }
     */
    public static final AddressLayout PIMECHARPOSITION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *NPIMECHARPOSITION
     * }
     */
    public static final AddressLayout NPIMECHARPOSITION = C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *LPIMECHARPOSITION
     * }
     */
    public static final AddressLayout LPIMECHARPOSITION = C_POINTER;

    private static class ImmInstallIMEA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmInstallIMEA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static FunctionDescriptor ImmInstallIMEA$descriptor() {
        return ImmInstallIMEA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static MethodHandle ImmInstallIMEA$handle() {
        return ImmInstallIMEA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEA(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmInstallIMEA", lpszIMEFileName, lpszLayoutText);
            }
            return (MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmInstallIMEW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmInstallIMEW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static FunctionDescriptor ImmInstallIMEW$descriptor() {
        return ImmInstallIMEW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static MethodHandle ImmInstallIMEW$handle() {
        return ImmInstallIMEW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEW(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmInstallIMEW", lpszIMEFileName, lpszLayoutText);
            }
            return (MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDefaultIMEWnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetDefaultIMEWnd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetDefaultIMEWnd$descriptor() {
        return ImmGetDefaultIMEWnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static MethodHandle ImmGetDefaultIMEWnd$handle() {
        return ImmGetDefaultIMEWnd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static MemorySegment ImmGetDefaultIMEWnd(MemorySegment x0) {
        var mh$ = ImmGetDefaultIMEWnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDefaultIMEWnd", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDescriptionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetDescriptionA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetDescriptionA$descriptor() {
        return ImmGetDescriptionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetDescriptionA$handle() {
        return ImmGetDescriptionA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static int ImmGetDescriptionA(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDescriptionA", x0, lpszDescription, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDescriptionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetDescriptionW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetDescriptionW$descriptor() {
        return ImmGetDescriptionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetDescriptionW$handle() {
        return ImmGetDescriptionW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static int ImmGetDescriptionW(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDescriptionW", x0, lpszDescription, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetIMEFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetIMEFileNameA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetIMEFileNameA$descriptor() {
        return ImmGetIMEFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetIMEFileNameA$handle() {
        return ImmGetIMEFileNameA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static int ImmGetIMEFileNameA(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetIMEFileNameA", x0, lpszFileName, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetIMEFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetIMEFileNameW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetIMEFileNameW$descriptor() {
        return ImmGetIMEFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetIMEFileNameW$handle() {
        return ImmGetIMEFileNameW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static int ImmGetIMEFileNameW(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetIMEFileNameW", x0, lpszFileName, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static FunctionDescriptor ImmGetProperty$descriptor() {
        return ImmGetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static MethodHandle ImmGetProperty$handle() {
        return ImmGetProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static int ImmGetProperty(MemorySegment x0, int x1) {
        var mh$ = ImmGetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetProperty", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmIsIME"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static FunctionDescriptor ImmIsIME$descriptor() {
        return ImmIsIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static MethodHandle ImmIsIME$handle() {
        return ImmIsIME.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static int ImmIsIME(MemorySegment x0) {
        var mh$ = ImmIsIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsIME", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSimulateHotKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSimulateHotKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static FunctionDescriptor ImmSimulateHotKey$descriptor() {
        return ImmSimulateHotKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static MethodHandle ImmSimulateHotKey$handle() {
        return ImmSimulateHotKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static int ImmSimulateHotKey(MemorySegment x0, int x1) {
        var mh$ = ImmSimulateHotKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSimulateHotKey", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmCreateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmCreateContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static FunctionDescriptor ImmCreateContext$descriptor() {
        return ImmCreateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static MethodHandle ImmCreateContext$handle() {
        return ImmCreateContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static MemorySegment ImmCreateContext() {
        var mh$ = ImmCreateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmCreateContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDestroyContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmDestroyContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static FunctionDescriptor ImmDestroyContext$descriptor() {
        return ImmDestroyContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static MethodHandle ImmDestroyContext$handle() {
        return ImmDestroyContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static int ImmDestroyContext(MemorySegment x0) {
        var mh$ = ImmDestroyContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDestroyContext", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetContext$descriptor() {
        return ImmGetContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static MethodHandle ImmGetContext$handle() {
        return ImmGetContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static MemorySegment ImmGetContext(MemorySegment x0) {
        var mh$ = ImmGetContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetContext", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmReleaseContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static FunctionDescriptor ImmReleaseContext$descriptor() {
        return ImmReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static MethodHandle ImmReleaseContext$handle() {
        return ImmReleaseContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static int ImmReleaseContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmReleaseContext", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmAssociateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmAssociateContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static FunctionDescriptor ImmAssociateContext$descriptor() {
        return ImmAssociateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static MethodHandle ImmAssociateContext$handle() {
        return ImmAssociateContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static MemorySegment ImmAssociateContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmAssociateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmAssociateContext", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmAssociateContextEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmAssociateContextEx"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static FunctionDescriptor ImmAssociateContextEx$descriptor() {
        return ImmAssociateContextEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static MethodHandle ImmAssociateContextEx$handle() {
        return ImmAssociateContextEx.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static int ImmAssociateContextEx(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ImmAssociateContextEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmAssociateContextEx", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCompositionStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionStringA$descriptor() {
        return ImmGetCompositionStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCompositionStringA$handle() {
        return ImmGetCompositionStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCompositionStringA(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionStringA", x0, x1, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCompositionStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionStringW$descriptor() {
        return ImmGetCompositionStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCompositionStringW$handle() {
        return ImmGetCompositionStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCompositionStringW(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionStringW", x0, x1, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCompositionStringA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionStringA$descriptor() {
        return ImmSetCompositionStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MethodHandle ImmSetCompositionStringA$handle() {
        return ImmSetCompositionStringA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static int ImmSetCompositionStringA(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionStringA", x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCompositionStringW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionStringW$descriptor() {
        return ImmSetCompositionStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MethodHandle ImmSetCompositionStringW$handle() {
        return ImmSetCompositionStringW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static int ImmSetCompositionStringW(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionStringW", x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListCountA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCandidateListCountA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListCountA$descriptor() {
        return ImmGetCandidateListCountA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MethodHandle ImmGetCandidateListCountA$handle() {
        return ImmGetCandidateListCountA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static int ImmGetCandidateListCountA(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListCountA", x0, lpdwListCount);
            }
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListCountW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCandidateListCountW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListCountW$descriptor() {
        return ImmGetCandidateListCountW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MethodHandle ImmGetCandidateListCountW$handle() {
        return ImmGetCandidateListCountW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static int ImmGetCandidateListCountW(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListCountW", x0, lpdwListCount);
            }
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCandidateListA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListA$descriptor() {
        return ImmGetCandidateListA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCandidateListA$handle() {
        return ImmGetCandidateListA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCandidateListA(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListA", x0, deIndex, lpCandList, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCandidateListW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListW$descriptor() {
        return ImmGetCandidateListW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCandidateListW$handle() {
        return ImmGetCandidateListW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCandidateListW(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListW", x0, deIndex, lpCandList, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetGuideLineA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetGuideLineA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetGuideLineA$descriptor() {
        return ImmGetGuideLineA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetGuideLineA$handle() {
        return ImmGetGuideLineA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetGuideLineA(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetGuideLineA", x0, dwIndex, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetGuideLineW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetGuideLineW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetGuideLineW$descriptor() {
        return ImmGetGuideLineW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetGuideLineW$handle() {
        return ImmGetGuideLineW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetGuideLineW(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetGuideLineW", x0, dwIndex, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetConversionStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static FunctionDescriptor ImmGetConversionStatus$descriptor() {
        return ImmGetConversionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static MethodHandle ImmGetConversionStatus$handle() {
        return ImmGetConversionStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static int ImmGetConversionStatus(MemorySegment x0, MemorySegment lpfdwConversion, MemorySegment lpfdwSentence) {
        var mh$ = ImmGetConversionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionStatus", x0, lpfdwConversion, lpfdwSentence);
            }
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetConversionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetConversionStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static FunctionDescriptor ImmSetConversionStatus$descriptor() {
        return ImmSetConversionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static MethodHandle ImmSetConversionStatus$handle() {
        return ImmSetConversionStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static int ImmSetConversionStatus(MemorySegment x0, int x1, int x2) {
        var mh$ = ImmSetConversionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetConversionStatus", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetOpenStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetOpenStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static FunctionDescriptor ImmGetOpenStatus$descriptor() {
        return ImmGetOpenStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static MethodHandle ImmGetOpenStatus$handle() {
        return ImmGetOpenStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static int ImmGetOpenStatus(MemorySegment x0) {
        var mh$ = ImmGetOpenStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetOpenStatus", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetOpenStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetOpenStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static FunctionDescriptor ImmSetOpenStatus$descriptor() {
        return ImmSetOpenStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static MethodHandle ImmSetOpenStatus$handle() {
        return ImmSetOpenStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static int ImmSetOpenStatus(MemorySegment x0, int x1) {
        var mh$ = ImmSetOpenStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetOpenStatus", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCompositionFontA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionFontA$descriptor() {
        return ImmGetCompositionFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MethodHandle ImmGetCompositionFontA$handle() {
        return ImmGetCompositionFontA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static int ImmGetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionFontA", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCompositionFontW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionFontW$descriptor() {
        return ImmGetCompositionFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MethodHandle ImmGetCompositionFontW$handle() {
        return ImmGetCompositionFontW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static int ImmGetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionFontW", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCompositionFontA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionFontA$descriptor() {
        return ImmSetCompositionFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MethodHandle ImmSetCompositionFontA$handle() {
        return ImmSetCompositionFontA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static int ImmSetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionFontA", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCompositionFontW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionFontW$descriptor() {
        return ImmSetCompositionFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MethodHandle ImmSetCompositionFontW$handle() {
        return ImmSetCompositionFontW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static int ImmSetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionFontW", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmConfigureIMEA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmConfigureIMEA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmConfigureIMEA$descriptor() {
        return ImmConfigureIMEA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MethodHandle ImmConfigureIMEA$handle() {
        return ImmConfigureIMEA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static int ImmConfigureIMEA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmConfigureIMEA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmConfigureIMEW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmConfigureIMEW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmConfigureIMEW$descriptor() {
        return ImmConfigureIMEW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MethodHandle ImmConfigureIMEW$handle() {
        return ImmConfigureIMEW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static int ImmConfigureIMEW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmConfigureIMEW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEscapeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmEscapeA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEscapeA$descriptor() {
        return ImmEscapeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MethodHandle ImmEscapeA$handle() {
        return ImmEscapeA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static long ImmEscapeA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEscapeA", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEscapeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG_LONG,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmEscapeW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEscapeW$descriptor() {
        return ImmEscapeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MethodHandle ImmEscapeW$handle() {
        return ImmEscapeW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static long ImmEscapeW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEscapeW", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionListA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetConversionListA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static FunctionDescriptor ImmGetConversionListA$descriptor() {
        return ImmGetConversionListA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MethodHandle ImmGetConversionListA$handle() {
        return ImmGetConversionListA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static int ImmGetConversionListA(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionListA", x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
            }
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionListW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetConversionListW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static FunctionDescriptor ImmGetConversionListW$descriptor() {
        return ImmGetConversionListW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MethodHandle ImmGetConversionListW$handle() {
        return ImmGetConversionListW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static int ImmGetConversionListW(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionListW", x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
            }
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmNotifyIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmNotifyIME"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static FunctionDescriptor ImmNotifyIME$descriptor() {
        return ImmNotifyIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static MethodHandle ImmNotifyIME$handle() {
        return ImmNotifyIME.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static int ImmNotifyIME(MemorySegment x0, int dwAction, int dwIndex, int dwValue) {
        var mh$ = ImmNotifyIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmNotifyIME", x0, dwAction, dwIndex, dwValue);
            }
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetStatusWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetStatusWindowPos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static FunctionDescriptor ImmGetStatusWindowPos$descriptor() {
        return ImmGetStatusWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MethodHandle ImmGetStatusWindowPos$handle() {
        return ImmGetStatusWindowPos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static int ImmGetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmGetStatusWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetStatusWindowPos", x0, lpptPos);
            }
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetStatusWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetStatusWindowPos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static FunctionDescriptor ImmSetStatusWindowPos$descriptor() {
        return ImmSetStatusWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MethodHandle ImmSetStatusWindowPos$handle() {
        return ImmSetStatusWindowPos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static int ImmSetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmSetStatusWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetStatusWindowPos", x0, lpptPos);
            }
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCompositionWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionWindow$descriptor() {
        return ImmGetCompositionWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MethodHandle ImmGetCompositionWindow$handle() {
        return ImmGetCompositionWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static int ImmGetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmGetCompositionWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionWindow", x0, lpCompForm);
            }
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCompositionWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionWindow$descriptor() {
        return ImmSetCompositionWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MethodHandle ImmSetCompositionWindow$handle() {
        return ImmSetCompositionWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static int ImmSetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmSetCompositionWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionWindow", x0, lpCompForm);
            }
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetCandidateWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateWindow$descriptor() {
        return ImmGetCandidateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MethodHandle ImmGetCandidateWindow$handle() {
        return ImmGetCandidateWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static int ImmGetCandidateWindow(MemorySegment x0, int x1, MemorySegment lpCandidate) {
        var mh$ = ImmGetCandidateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateWindow", x0, x1, lpCandidate);
            }
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCandidateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmSetCandidateWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static FunctionDescriptor ImmSetCandidateWindow$descriptor() {
        return ImmSetCandidateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MethodHandle ImmSetCandidateWindow$handle() {
        return ImmSetCandidateWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static int ImmSetCandidateWindow(MemorySegment x0, MemorySegment lpCandidate) {
        var mh$ = ImmSetCandidateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCandidateWindow", x0, lpCandidate);
            }
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsUIMessageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmIsUIMessageA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static FunctionDescriptor ImmIsUIMessageA$descriptor() {
        return ImmIsUIMessageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MethodHandle ImmIsUIMessageA$handle() {
        return ImmIsUIMessageA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static int ImmIsUIMessageA(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsUIMessageA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsUIMessageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_LONG_LONG,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmIsUIMessageW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static FunctionDescriptor ImmIsUIMessageW$descriptor() {
        return ImmIsUIMessageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MethodHandle ImmIsUIMessageW$handle() {
        return ImmIsUIMessageW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static int ImmIsUIMessageW(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsUIMessageW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetVirtualKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetVirtualKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetVirtualKey$descriptor() {
        return ImmGetVirtualKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static MethodHandle ImmGetVirtualKey$handle() {
        return ImmGetVirtualKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static int ImmGetVirtualKey(MemorySegment x0) {
        var mh$ = ImmGetVirtualKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetVirtualKey", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmRegisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmRegisterWordA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static FunctionDescriptor ImmRegisterWordA$descriptor() {
        return ImmRegisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static MethodHandle ImmRegisterWordA$handle() {
        return ImmRegisterWordA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static int ImmRegisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmRegisterWordA", x0, lpszReading, x2, lpszRegister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmRegisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmRegisterWordW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static FunctionDescriptor ImmRegisterWordW$descriptor() {
        return ImmRegisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static MethodHandle ImmRegisterWordW$handle() {
        return ImmRegisterWordW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static int ImmRegisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmRegisterWordW", x0, lpszReading, x2, lpszRegister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmUnregisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmUnregisterWordA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static FunctionDescriptor ImmUnregisterWordA$descriptor() {
        return ImmUnregisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static MethodHandle ImmUnregisterWordA$handle() {
        return ImmUnregisterWordA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static int ImmUnregisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmUnregisterWordA", x0, lpszReading, x2, lpszUnregister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmUnregisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmUnregisterWordW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static FunctionDescriptor ImmUnregisterWordW$descriptor() {
        return ImmUnregisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static MethodHandle ImmUnregisterWordW$handle() {
        return ImmUnregisterWordW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static int ImmUnregisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmUnregisterWordW", x0, lpszReading, x2, lpszUnregister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetRegisterWordStyleA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetRegisterWordStyleA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static FunctionDescriptor ImmGetRegisterWordStyleA$descriptor() {
        return ImmGetRegisterWordStyleA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static MethodHandle ImmGetRegisterWordStyleA$handle() {
        return ImmGetRegisterWordStyleA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static int ImmGetRegisterWordStyleA(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetRegisterWordStyleA", x0, nItem, lpStyleBuf);
            }
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetRegisterWordStyleW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_INT,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetRegisterWordStyleW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static FunctionDescriptor ImmGetRegisterWordStyleW$descriptor() {
        return ImmGetRegisterWordStyleW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static MethodHandle ImmGetRegisterWordStyleW$handle() {
        return ImmGetRegisterWordStyleW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static int ImmGetRegisterWordStyleW(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetRegisterWordStyleW", x0, nItem, lpStyleBuf);
            }
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumRegisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmEnumRegisterWordA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEnumRegisterWordA$descriptor() {
        return ImmEnumRegisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static MethodHandle ImmEnumRegisterWordA$handle() {
        return ImmEnumRegisterWordA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static int ImmEnumRegisterWordA(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumRegisterWordA", x0, x1, lpszReading, x3, lpszRegister, x5);
            }
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumRegisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER,
            C_LONG,
            C_POINTER,
            C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmEnumRegisterWordW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEnumRegisterWordW$descriptor() {
        return ImmEnumRegisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static MethodHandle ImmEnumRegisterWordW$handle() {
        return ImmEnumRegisterWordW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static int ImmEnumRegisterWordW(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumRegisterWordW", x0, x1, lpszReading, x3, lpszRegister, x5);
            }
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmDisableIME"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static FunctionDescriptor ImmDisableIME$descriptor() {
        return ImmDisableIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static MethodHandle ImmDisableIME$handle() {
        return ImmDisableIME.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static int ImmDisableIME(int x0) {
        var mh$ = ImmDisableIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableIME", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumInputContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG,
            C_POINTER,
            C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmEnumInputContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static FunctionDescriptor ImmEnumInputContext$descriptor() {
        return ImmEnumInputContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static MethodHandle ImmEnumInputContext$handle() {
        return ImmEnumInputContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static int ImmEnumInputContext(int idThread, MemorySegment lpfn, long lParam) {
        var mh$ = ImmEnumInputContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumInputContext", idThread, lpfn, lParam);
            }
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetImeMenuItemsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetImeMenuItemsA"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static FunctionDescriptor ImmGetImeMenuItemsA$descriptor() {
        return ImmGetImeMenuItemsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static MethodHandle ImmGetImeMenuItemsA$handle() {
        return ImmGetImeMenuItemsA.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static int ImmGetImeMenuItemsA(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetImeMenuItemsA", x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
            }
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetImeMenuItemsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_LONG,
            C_POINTER,
            C_LONG,
            C_LONG,
            C_POINTER,
            C_POINTER,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmGetImeMenuItemsW"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static FunctionDescriptor ImmGetImeMenuItemsW$descriptor() {
        return ImmGetImeMenuItemsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static MethodHandle ImmGetImeMenuItemsW$handle() {
        return ImmGetImeMenuItemsW.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static int ImmGetImeMenuItemsW(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetImeMenuItemsW", x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
            }
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableTextFrameService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT,
            C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmDisableTextFrameService"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static FunctionDescriptor ImmDisableTextFrameService$descriptor() {
        return ImmDisableTextFrameService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static MethodHandle ImmDisableTextFrameService$handle() {
        return ImmDisableTextFrameService.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static int ImmDisableTextFrameService(int idThread) {
        var mh$ = ImmDisableTextFrameService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableTextFrameService", idThread);
            }
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableLegacyIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    findOrThrow("ImmDisableLegacyIME"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static FunctionDescriptor ImmDisableLegacyIME$descriptor() {
        return ImmDisableLegacyIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static MethodHandle ImmDisableLegacyIME$handle() {
        return ImmDisableLegacyIME.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static int ImmDisableLegacyIME() {
        var mh$ = ImmDisableLegacyIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableLegacyIME");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int WINAPI_PARTITION_SERVER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_SERVER 0
     * }
     */
    public static int WINAPI_PARTITION_SERVER() {
        return WINAPI_PARTITION_SERVER;
    }
    private static final int WINAPI_PARTITION_PKG_WINTRUST = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WINTRUST 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return WINAPI_PARTITION_PKG_WINTRUST;
    }
    private static final int WINAPI_PARTITION_PKG_WEBSERVICES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WEBSERVICES 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return WINAPI_PARTITION_PKG_WEBSERVICES;
    }
    private static final int WINAPI_PARTITION_PKG_EVENTLOGSERVICE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_EVENTLOGSERVICE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return WINAPI_PARTITION_PKG_EVENTLOGSERVICE;
    }
    private static final int WINAPI_PARTITION_PKG_VHD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_VHD 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VHD() {
        return WINAPI_PARTITION_PKG_VHD;
    }
    private static final int WINAPI_PARTITION_PKG_PERFCOUNTER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_PERFCOUNTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return WINAPI_PARTITION_PKG_PERFCOUNTER;
    }
    private static final int WINAPI_PARTITION_PKG_SECURESTARTUP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_SECURESTARTUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return WINAPI_PARTITION_PKG_SECURESTARTUP;
    }
    private static final int WINAPI_PARTITION_PKG_REMOTEFS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_REMOTEFS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return WINAPI_PARTITION_PKG_REMOTEFS;
    }
    private static final int WINAPI_PARTITION_PKG_BOOTABLESKU = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_BOOTABLESKU 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return WINAPI_PARTITION_PKG_BOOTABLESKU;
    }
    private static final int WINAPI_PARTITION_PKG_CMDTOOLS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CMDTOOLS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return WINAPI_PARTITION_PKG_CMDTOOLS;
    }
    private static final int WINAPI_PARTITION_PKG_DISM = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_DISM 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_DISM() {
        return WINAPI_PARTITION_PKG_DISM;
    }
    private static final int WINAPI_PARTITION_PKG_CORESETUP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CORESETUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return WINAPI_PARTITION_PKG_CORESETUP;
    }
    private static final int WINAPI_PARTITION_PKG_APPRUNTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_APPRUNTIME 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return WINAPI_PARTITION_PKG_APPRUNTIME;
    }
    private static final int WINAPI_PARTITION_PKG_ESENT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_ESENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return WINAPI_PARTITION_PKG_ESENT;
    }
    private static final int WINAPI_PARTITION_PKG_WINMGMT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WINMGMT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return WINAPI_PARTITION_PKG_WINMGMT;
    }
    private static final int WINAPI_PARTITION_PKG_WNV = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WNV 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WNV() {
        return WINAPI_PARTITION_PKG_WNV;
    }
    private static final int WINAPI_PARTITION_PKG_CLUSTER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CLUSTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return WINAPI_PARTITION_PKG_CLUSTER;
    }
    private static final int WINAPI_PARTITION_PKG_VSS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_VSS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VSS() {
        return WINAPI_PARTITION_PKG_VSS;
    }
    private static final int WINAPI_PARTITION_PKG_TRAFFIC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_TRAFFIC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return WINAPI_PARTITION_PKG_TRAFFIC;
    }
    private static final int WINAPI_PARTITION_PKG_ISCSI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_ISCSI 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return WINAPI_PARTITION_PKG_ISCSI;
    }
    private static final int WINAPI_PARTITION_PKG_STORAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_STORAGE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return WINAPI_PARTITION_PKG_STORAGE;
    }
    private static final int WINAPI_PARTITION_PKG_MPSSVC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_MPSSVC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return WINAPI_PARTITION_PKG_MPSSVC;
    }
    private static final int WINAPI_PARTITION_PKG_APPXDEPLOYMENT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_APPXDEPLOYMENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return WINAPI_PARTITION_PKG_APPXDEPLOYMENT;
    }
    private static final int WINAPI_PARTITION_PKG_WER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WER() {
        return WINAPI_PARTITION_PKG_WER;
    }
    private static final int WINAPI_FAMILY_APP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_FAMILY_APP 2
     * }
     */
    public static int WINAPI_FAMILY_APP() {
        return WINAPI_FAMILY_APP;
    }
    private static final int WINAPI_FAMILY = (int)100L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_FAMILY 100
     * }
     */
    public static int WINAPI_FAMILY() {
        return WINAPI_FAMILY;
    }
    private static final int WINAPI_PARTITION_DESKTOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_DESKTOP 1
     * }
     */
    public static int WINAPI_PARTITION_DESKTOP() {
        return WINAPI_PARTITION_DESKTOP;
    }
    private static final int WINAPI_PARTITION_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_APP 1
     * }
     */
    public static int WINAPI_PARTITION_APP() {
        return WINAPI_PARTITION_APP;
    }
    private static final int WINAPI_PARTITION_PC_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PC_APP 1
     * }
     */
    public static int WINAPI_PARTITION_PC_APP() {
        return WINAPI_PARTITION_PC_APP;
    }
    private static final int WINAPI_PARTITION_PHONE_APP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PHONE_APP 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE_APP() {
        return WINAPI_PARTITION_PHONE_APP;
    }
    private static final int WINAPI_PARTITION_GAMES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_GAMES 1
     * }
     */
    public static int WINAPI_PARTITION_GAMES() {
        return WINAPI_PARTITION_GAMES;
    }
    private static final int WINAPI_PARTITION_SYSTEM = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_SYSTEM 0
     * }
     */
    public static int WINAPI_PARTITION_SYSTEM() {
        return WINAPI_PARTITION_SYSTEM;
    }
    private static final int WINAPI_PARTITION_PHONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PHONE 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE() {
        return WINAPI_PARTITION_PHONE;
    }
    private static final int _WIN32_IE_NT4 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4 512
     * }
     */
    public static int _WIN32_IE_NT4() {
        return _WIN32_IE_NT4;
    }
    private static final int _WIN32_IE_NT4SP1 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP1 512
     * }
     */
    public static int _WIN32_IE_NT4SP1() {
        return _WIN32_IE_NT4SP1;
    }
    private static final int _WIN32_IE_NT4SP2 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP2 512
     * }
     */
    public static int _WIN32_IE_NT4SP2() {
        return _WIN32_IE_NT4SP2;
    }
    private static final int _WIN32_IE_NT4SP3 = (int)770L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP3 770
     * }
     */
    public static int _WIN32_IE_NT4SP3() {
        return _WIN32_IE_NT4SP3;
    }
    private static final int _WIN32_IE_NT4SP4 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP4 1025
     * }
     */
    public static int _WIN32_IE_NT4SP4() {
        return _WIN32_IE_NT4SP4;
    }
    private static final int _WIN32_IE_NT4SP5 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP5 1025
     * }
     */
    public static int _WIN32_IE_NT4SP5() {
        return _WIN32_IE_NT4SP5;
    }
    private static final int _WIN32_IE_NT4SP6 = (int)1280L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP6 1280
     * }
     */
    public static int _WIN32_IE_NT4SP6() {
        return _WIN32_IE_NT4SP6;
    }
    private static final int _WIN32_IE_WIN98 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN98 1025
     * }
     */
    public static int _WIN32_IE_WIN98() {
        return _WIN32_IE_WIN98;
    }
    private static final int _WIN32_IE_WIN98SE = (int)1280L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN98SE 1280
     * }
     */
    public static int _WIN32_IE_WIN98SE() {
        return _WIN32_IE_WIN98SE;
    }
    private static final int _WIN32_IE_WINME = (int)1360L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINME 1360
     * }
     */
    public static int _WIN32_IE_WINME() {
        return _WIN32_IE_WINME;
    }
    private static final int _WIN32_IE_WIN2K = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2K 1281
     * }
     */
    public static int _WIN32_IE_WIN2K() {
        return _WIN32_IE_WIN2K;
    }
    private static final int _WIN32_IE_WIN2KSP1 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP1 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP1() {
        return _WIN32_IE_WIN2KSP1;
    }
    private static final int _WIN32_IE_WIN2KSP2 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP2 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP2() {
        return _WIN32_IE_WIN2KSP2;
    }
    private static final int _WIN32_IE_WIN2KSP3 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP3 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP3() {
        return _WIN32_IE_WIN2KSP3;
    }
    private static final int _WIN32_IE_WIN2KSP4 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP4 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP4() {
        return _WIN32_IE_WIN2KSP4;
    }
    private static final int _WIN32_IE_XP = (int)1536L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XP 1536
     * }
     */
    public static int _WIN32_IE_XP() {
        return _WIN32_IE_XP;
    }
    private static final int _WIN32_IE_XPSP1 = (int)1537L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XPSP1 1537
     * }
     */
    public static int _WIN32_IE_XPSP1() {
        return _WIN32_IE_XPSP1;
    }
    private static final int _WIN32_IE_XPSP2 = (int)1539L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XPSP2 1539
     * }
     */
    public static int _WIN32_IE_XPSP2() {
        return _WIN32_IE_XPSP2;
    }
    private static final int _WIN32_IE_WS03SP1 = (int)1539L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WS03SP1 1539
     * }
     */
    public static int _WIN32_IE_WS03SP1() {
        return _WIN32_IE_WS03SP1;
    }
    private static final int _WIN32_IE_WIN6 = (int)1792L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN6 1792
     * }
     */
    public static int _WIN32_IE_WIN6() {
        return _WIN32_IE_WIN6;
    }
    private static final int _WIN32_IE_LONGHORN = (int)1792L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_LONGHORN 1792
     * }
     */
    public static int _WIN32_IE_LONGHORN() {
        return _WIN32_IE_LONGHORN;
    }
    private static final int _WIN32_IE_WIN7 = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN7 2048
     * }
     */
    public static int _WIN32_IE_WIN7() {
        return _WIN32_IE_WIN7;
    }
    private static final int _WIN32_IE_WIN8 = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN8 2560
     * }
     */
    public static int _WIN32_IE_WIN8() {
        return _WIN32_IE_WIN8;
    }
    private static final int _WIN32_IE_WINBLUE = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINBLUE 2560
     * }
     */
    public static int _WIN32_IE_WINBLUE() {
        return _WIN32_IE_WINBLUE;
    }
    private static final int _WIN32_IE_WINTHRESHOLD = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINTHRESHOLD 2560
     * }
     */
    public static int _WIN32_IE_WINTHRESHOLD() {
        return _WIN32_IE_WINTHRESHOLD;
    }
    private static final int _WIN32_IE_WIN10 = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN10 2560
     * }
     */
    public static int _WIN32_IE_WIN10() {
        return _WIN32_IE_WIN10;
    }
    private static final int NTDDI_VISTA = (int)100663296L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTA 100663296
     * }
     */
    public static int NTDDI_VISTA() {
        return NTDDI_VISTA;
    }
    private static final int NTDDI_VISTASP1 = (int)100663552L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP1 100663552
     * }
     */
    public static int NTDDI_VISTASP1() {
        return NTDDI_VISTASP1;
    }
    private static final int NTDDI_VISTASP2 = (int)100663808L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP2 100663808
     * }
     */
    public static int NTDDI_VISTASP2() {
        return NTDDI_VISTASP2;
    }
    private static final int NTDDI_VISTASP3 = (int)100664064L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP3 100664064
     * }
     */
    public static int NTDDI_VISTASP3() {
        return NTDDI_VISTASP3;
    }
    private static final int NTDDI_VISTASP4 = (int)100664320L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP4 100664320
     * }
     */
    public static int NTDDI_VISTASP4() {
        return NTDDI_VISTASP4;
    }
    private static final int NTDDI_LONGHORN = (int)100663296L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_LONGHORN 100663296
     * }
     */
    public static int NTDDI_LONGHORN() {
        return NTDDI_LONGHORN;
    }
    private static final int NTDDI_WS08 = (int)100663552L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08 100663552
     * }
     */
    public static int NTDDI_WS08() {
        return NTDDI_WS08;
    }
    private static final int NTDDI_WS08SP2 = (int)100663808L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP2 100663808
     * }
     */
    public static int NTDDI_WS08SP2() {
        return NTDDI_WS08SP2;
    }
    private static final int NTDDI_WS08SP3 = (int)100664064L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP3 100664064
     * }
     */
    public static int NTDDI_WS08SP3() {
        return NTDDI_WS08SP3;
    }
    private static final int NTDDI_WS08SP4 = (int)100664320L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP4 100664320
     * }
     */
    public static int NTDDI_WS08SP4() {
        return NTDDI_WS08SP4;
    }
    private static final int WDK_NTDDI_VERSION = (int)167772171L;
    /**
     * {@snippet lang=c :
     * #define WDK_NTDDI_VERSION 167772171
     * }
     */
    public static int WDK_NTDDI_VERSION() {
        return WDK_NTDDI_VERSION;
    }
    private static final int OSVERSION_MASK = (int)4294901760L;
    /**
     * {@snippet lang=c :
     * #define OSVERSION_MASK 4294901760
     * }
     */
    public static int OSVERSION_MASK() {
        return OSVERSION_MASK;
    }
    private static final int NTDDI_VERSION = (int)167772171L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VERSION 167772171
     * }
     */
    public static int NTDDI_VERSION() {
        return NTDDI_VERSION;
    }
    private static final int WINVER = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define WINVER 2560
     * }
     */
    public static int WINVER() {
        return WINVER;
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EXCEPTION_CONTINUE_EXECUTION = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EXCEPTION_CONTINUE_EXECUTION -1
     * }
     */
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    private static final int _UCRT_DISABLED_WARNINGS = (int)4324L;
    /**
     * {@snippet lang=c :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return _UCRT_DISABLED_WARNINGS;
    }
    private static final long _TRUNCATE = -1L;
    /**
     * {@snippet lang=c :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return _TRUNCATE;
    }
    private static final long _CRT_SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return _CRT_SIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __FILEW__ "C"
     * }
     */
    public static MemorySegment __FILEW__() {
        class Holder {
            static final MemorySegment __FILEW__
                = LIBRARY_ARENA.allocateFrom("C");
        }
        return Holder.__FILEW__;
    }
    private static final int __STDC_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return __STDC_SECURE_LIB__;
    }
    private static final int __GOT_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return __GOT_SECURE_LIB__;
    }
    private static final short WEOF = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define WEOF 65535
     * }
     */
    public static short WEOF() {
        return WEOF;
    }
    private static final int _ALPHA = (int)259L;
    /**
     * {@snippet lang=c :
     * #define _ALPHA 259
     * }
     */
    public static int _ALPHA() {
        return _ALPHA;
    }
    private static final long MAX_NATURAL_ALIGNMENT = 8L;
    /**
     * {@snippet lang=c :
     * #define MAX_NATURAL_ALIGNMENT 8
     * }
     */
    public static long MAX_NATURAL_ALIGNMENT() {
        return MAX_NATURAL_ALIGNMENT;
    }
    private static final long ADDRESS_TAG_BIT = 4398046511104L;
    /**
     * {@snippet lang=c :
     * #define ADDRESS_TAG_BIT 4398046511104
     * }
     */
    public static long ADDRESS_TAG_BIT() {
        return ADDRESS_TAG_BIT;
    }
    private static final long MAXUINT_PTR = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT_PTR -1
     * }
     */
    public static long MAXUINT_PTR() {
        return MAXUINT_PTR;
    }
    private static final long MAXINT_PTR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXINT_PTR 9223372036854775807
     * }
     */
    public static long MAXINT_PTR() {
        return MAXINT_PTR;
    }
    private static final long MININT_PTR = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MININT_PTR -9223372036854775808
     * }
     */
    public static long MININT_PTR() {
        return MININT_PTR;
    }
    private static final long MAXULONG_PTR = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG_PTR -1
     * }
     */
    public static long MAXULONG_PTR() {
        return MAXULONG_PTR;
    }
    private static final long MAXLONG_PTR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG_PTR 9223372036854775807
     * }
     */
    public static long MAXLONG_PTR() {
        return MAXLONG_PTR;
    }
    private static final long MINLONG_PTR = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONG_PTR -9223372036854775808
     * }
     */
    public static long MINLONG_PTR() {
        return MINLONG_PTR;
    }
    private static final int MAXUHALF_PTR = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUHALF_PTR 4294967295
     * }
     */
    public static int MAXUHALF_PTR() {
        return MAXUHALF_PTR;
    }
    private static final int MAXHALF_PTR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXHALF_PTR 2147483647
     * }
     */
    public static int MAXHALF_PTR() {
        return MAXHALF_PTR;
    }
    private static final int MINHALF_PTR = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINHALF_PTR -2147483648
     * }
     */
    public static int MINHALF_PTR() {
        return MINHALF_PTR;
    }
    private static final byte MAXUINT8 = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT8 255
     * }
     */
    public static byte MAXUINT8() {
        return MAXUINT8;
    }
    private static final byte MAXINT8 = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define MAXINT8 127
     * }
     */
    public static byte MAXINT8() {
        return MAXINT8;
    }
    private static final byte MININT8 = (byte)-128L;
    /**
     * {@snippet lang=c :
     * #define MININT8 -128
     * }
     */
    public static byte MININT8() {
        return MININT8;
    }
    private static final short MAXUINT16 = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT16 65535
     * }
     */
    public static short MAXUINT16() {
        return MAXUINT16;
    }
    private static final short MAXINT16 = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define MAXINT16 32767
     * }
     */
    public static short MAXINT16() {
        return MAXINT16;
    }
    private static final short MININT16 = (short)-32768L;
    /**
     * {@snippet lang=c :
     * #define MININT16 -32768
     * }
     */
    public static short MININT16() {
        return MININT16;
    }
    private static final int MAXUINT32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT32 4294967295
     * }
     */
    public static int MAXUINT32() {
        return MAXUINT32;
    }
    private static final int MAXINT32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXINT32 2147483647
     * }
     */
    public static int MAXINT32() {
        return MAXINT32;
    }
    private static final int MININT32 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MININT32 -2147483648
     * }
     */
    public static int MININT32() {
        return MININT32;
    }
    private static final long MAXUINT64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT64 -1
     * }
     */
    public static long MAXUINT64() {
        return MAXUINT64;
    }
    private static final long MAXINT64 = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXINT64 9223372036854775807
     * }
     */
    public static long MAXINT64() {
        return MAXINT64;
    }
    private static final long MININT64 = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MININT64 -9223372036854775808
     * }
     */
    public static long MININT64() {
        return MININT64;
    }
    private static final int MAXULONG32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG32 4294967295
     * }
     */
    public static int MAXULONG32() {
        return MAXULONG32;
    }
    private static final int MAXLONG32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG32 2147483647
     * }
     */
    public static int MAXLONG32() {
        return MAXLONG32;
    }
    private static final int MINLONG32 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINLONG32 -2147483648
     * }
     */
    public static int MINLONG32() {
        return MINLONG32;
    }
    private static final long MAXULONG64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG64 -1
     * }
     */
    public static long MAXULONG64() {
        return MAXULONG64;
    }
    private static final long MAXLONG64 = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG64 9223372036854775807
     * }
     */
    public static long MAXLONG64() {
        return MAXLONG64;
    }
    private static final long MINLONG64 = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONG64 -9223372036854775808
     * }
     */
    public static long MINLONG64() {
        return MINLONG64;
    }
    private static final long MAXULONGLONG = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONGLONG -1
     * }
     */
    public static long MAXULONGLONG() {
        return MAXULONGLONG;
    }
    private static final long MINLONGLONG = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONGLONG -9223372036854775808
     * }
     */
    public static long MINLONGLONG() {
        return MINLONGLONG;
    }
    private static final long MAXSIZE_T = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXSIZE_T -1
     * }
     */
    public static long MAXSIZE_T() {
        return MAXSIZE_T;
    }
    private static final long MAXSSIZE_T = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXSSIZE_T 9223372036854775807
     * }
     */
    public static long MAXSSIZE_T() {
        return MAXSSIZE_T;
    }
    private static final long MINSSIZE_T = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINSSIZE_T -9223372036854775808
     * }
     */
    public static long MINSSIZE_T() {
        return MINSSIZE_T;
    }
    private static final int MAXUINT = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT 4294967295
     * }
     */
    public static int MAXUINT() {
        return MAXUINT;
    }
    private static final int MAXINT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXINT 2147483647
     * }
     */
    public static int MAXINT() {
        return MAXINT;
    }
    private static final int MININT = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MININT -2147483648
     * }
     */
    public static int MININT() {
        return MININT;
    }
    private static final int MAXDWORD32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD32 4294967295
     * }
     */
    public static int MAXDWORD32() {
        return MAXDWORD32;
    }
    private static final long MAXDWORD64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD64 -1
     * }
     */
    public static long MAXDWORD64() {
        return MAXDWORD64;
    }
    private static final int SYSTEM_CACHE_ALIGNMENT_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_CACHE_ALIGNMENT_SIZE 64
     * }
     */
    public static int SYSTEM_CACHE_ALIGNMENT_SIZE() {
        return SYSTEM_CACHE_ALIGNMENT_SIZE;
    }
    private static final int UCSCHAR_INVALID_CHARACTER = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UCSCHAR_INVALID_CHARACTER 4294967295
     * }
     */
    public static int UCSCHAR_INVALID_CHARACTER() {
        return UCSCHAR_INVALID_CHARACTER;
    }
    private static final int MIN_UCSCHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MIN_UCSCHAR 0
     * }
     */
    public static int MIN_UCSCHAR() {
        return MIN_UCSCHAR;
    }
    private static final int MAX_UCSCHAR = (int)1114111L;
    /**
     * {@snippet lang=c :
     * #define MAX_UCSCHAR 1114111
     * }
     */
    public static int MAX_UCSCHAR() {
        return MAX_UCSCHAR;
    }
    private static final int MAXIMUM_PROCESSORS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_PROCESSORS 64
     * }
     */
    public static int MAXIMUM_PROCESSORS() {
        return MAXIMUM_PROCESSORS;
    }
    private static final int ERROR_SEVERITY_WARNING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define ERROR_SEVERITY_WARNING 2147483648
     * }
     */
    public static int ERROR_SEVERITY_WARNING() {
        return ERROR_SEVERITY_WARNING;
    }
    private static final int ERROR_SEVERITY_ERROR = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define ERROR_SEVERITY_ERROR 3221225472
     * }
     */
    public static int ERROR_SEVERITY_ERROR() {
        return ERROR_SEVERITY_ERROR;
    }
    private static final long MAXLONGLONG = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONGLONG 9223372036854775807
     * }
     */
    public static long MAXLONGLONG() {
        return MAXLONGLONG;
    }
    private static final byte ANSI_NULL = (byte)0L;
    /**
     * {@snippet lang=c :
     * #define ANSI_NULL 0
     * }
     */
    public static byte ANSI_NULL() {
        return ANSI_NULL;
    }
    private static final short UNICODE_NULL = (short)0L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_NULL 0
     * }
     */
    public static short UNICODE_NULL() {
        return UNICODE_NULL;
    }
    private static final short UNICODE_STRING_MAX_BYTES = (short)65534L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_STRING_MAX_BYTES 65534
     * }
     */
    public static short UNICODE_STRING_MAX_BYTES() {
        return UNICODE_STRING_MAX_BYTES;
    }
    private static final int UNICODE_STRING_MAX_CHARS = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_STRING_MAX_CHARS 32767
     * }
     */
    public static int UNICODE_STRING_MAX_CHARS() {
        return UNICODE_STRING_MAX_CHARS;
    }
    private static final int EDEADLOCK = (int)36L;
    /**
     * {@snippet lang=c :
     * #define EDEADLOCK 36
     * }
     */
    public static int EDEADLOCK() {
        return EDEADLOCK;
    }
    private static final int _NLSCMPERROR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _NLSCMPERROR 2147483647
     * }
     */
    public static int _NLSCMPERROR() {
        return _NLSCMPERROR;
    }
    private static final int MINLONG = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINLONG 2147483648
     * }
     */
    public static int MINLONG() {
        return MINLONG;
    }
    private static final int MAXDWORD = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD 4294967295
     * }
     */
    public static int MAXDWORD() {
        return MAXDWORD;
    }
    private static final int VER_SERVER_NT = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define VER_SERVER_NT 2147483648
     * }
     */
    public static int VER_SERVER_NT() {
        return VER_SERVER_NT;
    }
    private static final int PRODUCT_UNLICENSED = (int)2882382797L;
    /**
     * {@snippet lang=c :
     * #define PRODUCT_UNLICENSED 2882382797
     * }
     */
    public static int PRODUCT_UNLICENSED() {
        return PRODUCT_UNLICENSED;
    }
    private static final int LANG_SYSTEM_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LANG_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LANG_SYSTEM_DEFAULT() {
        return LANG_SYSTEM_DEFAULT;
    }
    private static final int LANG_USER_DEFAULT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LANG_USER_DEFAULT 1024
     * }
     */
    public static int LANG_USER_DEFAULT() {
        return LANG_USER_DEFAULT;
    }
    private static final int LOCALE_SYSTEM_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LOCALE_SYSTEM_DEFAULT() {
        return LOCALE_SYSTEM_DEFAULT;
    }
    private static final int LOCALE_USER_DEFAULT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_USER_DEFAULT 1024
     * }
     */
    public static int LOCALE_USER_DEFAULT() {
        return LOCALE_USER_DEFAULT;
    }
    private static final int LOCALE_CUSTOM_DEFAULT = (int)3072L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_DEFAULT 3072
     * }
     */
    public static int LOCALE_CUSTOM_DEFAULT() {
        return LOCALE_CUSTOM_DEFAULT;
    }
    private static final int LOCALE_CUSTOM_UNSPECIFIED = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_UNSPECIFIED 4096
     * }
     */
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return LOCALE_CUSTOM_UNSPECIFIED;
    }
    private static final int LOCALE_CUSTOM_UI_DEFAULT = (int)5120L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_UI_DEFAULT 5120
     * }
     */
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return LOCALE_CUSTOM_UI_DEFAULT;
    }
    private static final int LOCALE_NEUTRAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_NEUTRAL 0
     * }
     */
    public static int LOCALE_NEUTRAL() {
        return LOCALE_NEUTRAL;
    }
    private static final int LOCALE_INVARIANT = (int)127L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_INVARIANT 127
     * }
     */
    public static int LOCALE_INVARIANT() {
        return LOCALE_INVARIANT;
    }
    private static final int LOCALE_UNASSIGNED_LCID = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_UNASSIGNED_LCID 4096
     * }
     */
    public static int LOCALE_UNASSIGNED_LCID() {
        return LOCALE_UNASSIGNED_LCID;
    }
    private static final int STATUS_WAIT_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define STATUS_WAIT_0 0
     * }
     */
    public static int STATUS_WAIT_0() {
        return STATUS_WAIT_0;
    }
    private static final int STATUS_ABANDONED_WAIT_0 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ABANDONED_WAIT_0 128
     * }
     */
    public static int STATUS_ABANDONED_WAIT_0() {
        return STATUS_ABANDONED_WAIT_0;
    }
    private static final int STATUS_USER_APC = (int)192L;
    /**
     * {@snippet lang=c :
     * #define STATUS_USER_APC 192
     * }
     */
    public static int STATUS_USER_APC() {
        return STATUS_USER_APC;
    }
    private static final int STATUS_TIMEOUT = (int)258L;
    /**
     * {@snippet lang=c :
     * #define STATUS_TIMEOUT 258
     * }
     */
    public static int STATUS_TIMEOUT() {
        return STATUS_TIMEOUT;
    }
    private static final int STATUS_PENDING = (int)259L;
    /**
     * {@snippet lang=c :
     * #define STATUS_PENDING 259
     * }
     */
    public static int STATUS_PENDING() {
        return STATUS_PENDING;
    }
    private static final int DBG_EXCEPTION_HANDLED = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define DBG_EXCEPTION_HANDLED 65537
     * }
     */
    public static int DBG_EXCEPTION_HANDLED() {
        return DBG_EXCEPTION_HANDLED;
    }
    private static final int DBG_CONTINUE = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTINUE 65538
     * }
     */
    public static int DBG_CONTINUE() {
        return DBG_CONTINUE;
    }
    private static final int STATUS_SEGMENT_NOTIFICATION = (int)1073741829L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SEGMENT_NOTIFICATION 1073741829
     * }
     */
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return STATUS_SEGMENT_NOTIFICATION;
    }
    private static final int STATUS_FATAL_APP_EXIT = (int)1073741845L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FATAL_APP_EXIT 1073741845
     * }
     */
    public static int STATUS_FATAL_APP_EXIT() {
        return STATUS_FATAL_APP_EXIT;
    }
    private static final int DBG_REPLY_LATER = (int)1073807361L;
    /**
     * {@snippet lang=c :
     * #define DBG_REPLY_LATER 1073807361
     * }
     */
    public static int DBG_REPLY_LATER() {
        return DBG_REPLY_LATER;
    }
    private static final int DBG_TERMINATE_THREAD = (int)1073807363L;
    /**
     * {@snippet lang=c :
     * #define DBG_TERMINATE_THREAD 1073807363
     * }
     */
    public static int DBG_TERMINATE_THREAD() {
        return DBG_TERMINATE_THREAD;
    }
    private static final int DBG_TERMINATE_PROCESS = (int)1073807364L;
    /**
     * {@snippet lang=c :
     * #define DBG_TERMINATE_PROCESS 1073807364
     * }
     */
    public static int DBG_TERMINATE_PROCESS() {
        return DBG_TERMINATE_PROCESS;
    }
    private static final int DBG_CONTROL_C = (int)1073807365L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTROL_C 1073807365
     * }
     */
    public static int DBG_CONTROL_C() {
        return DBG_CONTROL_C;
    }
    private static final int DBG_PRINTEXCEPTION_C = (int)1073807366L;
    /**
     * {@snippet lang=c :
     * #define DBG_PRINTEXCEPTION_C 1073807366
     * }
     */
    public static int DBG_PRINTEXCEPTION_C() {
        return DBG_PRINTEXCEPTION_C;
    }
    private static final int DBG_RIPEXCEPTION = (int)1073807367L;
    /**
     * {@snippet lang=c :
     * #define DBG_RIPEXCEPTION 1073807367
     * }
     */
    public static int DBG_RIPEXCEPTION() {
        return DBG_RIPEXCEPTION;
    }
    private static final int DBG_CONTROL_BREAK = (int)1073807368L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTROL_BREAK 1073807368
     * }
     */
    public static int DBG_CONTROL_BREAK() {
        return DBG_CONTROL_BREAK;
    }
    private static final int DBG_COMMAND_EXCEPTION = (int)1073807369L;
    /**
     * {@snippet lang=c :
     * #define DBG_COMMAND_EXCEPTION 1073807369
     * }
     */
    public static int DBG_COMMAND_EXCEPTION() {
        return DBG_COMMAND_EXCEPTION;
    }
    private static final int DBG_PRINTEXCEPTION_WIDE_C = (int)1073807370L;
    /**
     * {@snippet lang=c :
     * #define DBG_PRINTEXCEPTION_WIDE_C 1073807370
     * }
     */
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return DBG_PRINTEXCEPTION_WIDE_C;
    }
    private static final int STATUS_GUARD_PAGE_VIOLATION = (int)2147483649L;
    /**
     * {@snippet lang=c :
     * #define STATUS_GUARD_PAGE_VIOLATION 2147483649
     * }
     */
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return STATUS_GUARD_PAGE_VIOLATION;
    }
    private static final int STATUS_DATATYPE_MISALIGNMENT = (int)2147483650L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DATATYPE_MISALIGNMENT 2147483650
     * }
     */
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return STATUS_DATATYPE_MISALIGNMENT;
    }
    private static final int STATUS_BREAKPOINT = (int)2147483651L;
    /**
     * {@snippet lang=c :
     * #define STATUS_BREAKPOINT 2147483651
     * }
     */
    public static int STATUS_BREAKPOINT() {
        return STATUS_BREAKPOINT;
    }
    private static final int STATUS_SINGLE_STEP = (int)2147483652L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SINGLE_STEP 2147483652
     * }
     */
    public static int STATUS_SINGLE_STEP() {
        return STATUS_SINGLE_STEP;
    }
    private static final int STATUS_LONGJUMP = (int)2147483686L;
    /**
     * {@snippet lang=c :
     * #define STATUS_LONGJUMP 2147483686
     * }
     */
    public static int STATUS_LONGJUMP() {
        return STATUS_LONGJUMP;
    }
    private static final int STATUS_UNWIND_CONSOLIDATE = (int)2147483689L;
    /**
     * {@snippet lang=c :
     * #define STATUS_UNWIND_CONSOLIDATE 2147483689
     * }
     */
    public static int STATUS_UNWIND_CONSOLIDATE() {
        return STATUS_UNWIND_CONSOLIDATE;
    }
    private static final int DBG_EXCEPTION_NOT_HANDLED = (int)2147549185L;
    /**
     * {@snippet lang=c :
     * #define DBG_EXCEPTION_NOT_HANDLED 2147549185
     * }
     */
    public static int DBG_EXCEPTION_NOT_HANDLED() {
        return DBG_EXCEPTION_NOT_HANDLED;
    }
    private static final int STATUS_ACCESS_VIOLATION = (int)3221225477L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ACCESS_VIOLATION 3221225477
     * }
     */
    public static int STATUS_ACCESS_VIOLATION() {
        return STATUS_ACCESS_VIOLATION;
    }
    private static final int STATUS_IN_PAGE_ERROR = (int)3221225478L;
    /**
     * {@snippet lang=c :
     * #define STATUS_IN_PAGE_ERROR 3221225478
     * }
     */
    public static int STATUS_IN_PAGE_ERROR() {
        return STATUS_IN_PAGE_ERROR;
    }
    private static final int STATUS_INVALID_HANDLE = (int)3221225480L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_HANDLE 3221225480
     * }
     */
    public static int STATUS_INVALID_HANDLE() {
        return STATUS_INVALID_HANDLE;
    }
    private static final int STATUS_INVALID_PARAMETER = (int)3221225485L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_PARAMETER 3221225485
     * }
     */
    public static int STATUS_INVALID_PARAMETER() {
        return STATUS_INVALID_PARAMETER;
    }
    private static final int STATUS_NO_MEMORY = (int)3221225495L;
    /**
     * {@snippet lang=c :
     * #define STATUS_NO_MEMORY 3221225495
     * }
     */
    public static int STATUS_NO_MEMORY() {
        return STATUS_NO_MEMORY;
    }
    private static final int STATUS_ILLEGAL_INSTRUCTION = (int)3221225501L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ILLEGAL_INSTRUCTION 3221225501
     * }
     */
    public static int STATUS_ILLEGAL_INSTRUCTION() {
        return STATUS_ILLEGAL_INSTRUCTION;
    }
    private static final int STATUS_NONCONTINUABLE_EXCEPTION = (int)3221225509L;
    /**
     * {@snippet lang=c :
     * #define STATUS_NONCONTINUABLE_EXCEPTION 3221225509
     * }
     */
    public static int STATUS_NONCONTINUABLE_EXCEPTION() {
        return STATUS_NONCONTINUABLE_EXCEPTION;
    }
    private static final int STATUS_INVALID_DISPOSITION = (int)3221225510L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_DISPOSITION 3221225510
     * }
     */
    public static int STATUS_INVALID_DISPOSITION() {
        return STATUS_INVALID_DISPOSITION;
    }
    private static final int STATUS_ARRAY_BOUNDS_EXCEEDED = (int)3221225612L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ARRAY_BOUNDS_EXCEEDED 3221225612
     * }
     */
    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() {
        return STATUS_ARRAY_BOUNDS_EXCEEDED;
    }
    private static final int STATUS_FLOAT_DENORMAL_OPERAND = (int)3221225613L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_DENORMAL_OPERAND 3221225613
     * }
     */
    public static int STATUS_FLOAT_DENORMAL_OPERAND() {
        return STATUS_FLOAT_DENORMAL_OPERAND;
    }
    private static final int STATUS_FLOAT_DIVIDE_BY_ZERO = (int)3221225614L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_DIVIDE_BY_ZERO 3221225614
     * }
     */
    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() {
        return STATUS_FLOAT_DIVIDE_BY_ZERO;
    }
    private static final int STATUS_FLOAT_INEXACT_RESULT = (int)3221225615L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_INEXACT_RESULT 3221225615
     * }
     */
    public static int STATUS_FLOAT_INEXACT_RESULT() {
        return STATUS_FLOAT_INEXACT_RESULT;
    }
    private static final int STATUS_FLOAT_INVALID_OPERATION = (int)3221225616L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_INVALID_OPERATION 3221225616
     * }
     */
    public static int STATUS_FLOAT_INVALID_OPERATION() {
        return STATUS_FLOAT_INVALID_OPERATION;
    }
    private static final int STATUS_FLOAT_OVERFLOW = (int)3221225617L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_OVERFLOW 3221225617
     * }
     */
    public static int STATUS_FLOAT_OVERFLOW() {
        return STATUS_FLOAT_OVERFLOW;
    }
    private static final int STATUS_FLOAT_STACK_CHECK = (int)3221225618L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_STACK_CHECK 3221225618
     * }
     */
    public static int STATUS_FLOAT_STACK_CHECK() {
        return STATUS_FLOAT_STACK_CHECK;
    }
    private static final int STATUS_FLOAT_UNDERFLOW = (int)3221225619L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_UNDERFLOW 3221225619
     * }
     */
    public static int STATUS_FLOAT_UNDERFLOW() {
        return STATUS_FLOAT_UNDERFLOW;
    }
    private static final int STATUS_INTEGER_DIVIDE_BY_ZERO = (int)3221225620L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTEGER_DIVIDE_BY_ZERO 3221225620
     * }
     */
    public static int STATUS_INTEGER_DIVIDE_BY_ZERO() {
        return STATUS_INTEGER_DIVIDE_BY_ZERO;
    }
    private static final int STATUS_INTEGER_OVERFLOW = (int)3221225621L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTEGER_OVERFLOW 3221225621
     * }
     */
    public static int STATUS_INTEGER_OVERFLOW() {
        return STATUS_INTEGER_OVERFLOW;
    }
    private static final int STATUS_PRIVILEGED_INSTRUCTION = (int)3221225622L;
    /**
     * {@snippet lang=c :
     * #define STATUS_PRIVILEGED_INSTRUCTION 3221225622
     * }
     */
    public static int STATUS_PRIVILEGED_INSTRUCTION() {
        return STATUS_PRIVILEGED_INSTRUCTION;
    }
    private static final int STATUS_STACK_OVERFLOW = (int)3221225725L;
    /**
     * {@snippet lang=c :
     * #define STATUS_STACK_OVERFLOW 3221225725
     * }
     */
    public static int STATUS_STACK_OVERFLOW() {
        return STATUS_STACK_OVERFLOW;
    }
    private static final int STATUS_DLL_NOT_FOUND = (int)3221225781L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DLL_NOT_FOUND 3221225781
     * }
     */
    public static int STATUS_DLL_NOT_FOUND() {
        return STATUS_DLL_NOT_FOUND;
    }
    private static final int STATUS_ORDINAL_NOT_FOUND = (int)3221225784L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ORDINAL_NOT_FOUND 3221225784
     * }
     */
    public static int STATUS_ORDINAL_NOT_FOUND() {
        return STATUS_ORDINAL_NOT_FOUND;
    }
    private static final int STATUS_ENTRYPOINT_NOT_FOUND = (int)3221225785L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ENTRYPOINT_NOT_FOUND 3221225785
     * }
     */
    public static int STATUS_ENTRYPOINT_NOT_FOUND() {
        return STATUS_ENTRYPOINT_NOT_FOUND;
    }
    private static final int STATUS_CONTROL_C_EXIT = (int)3221225786L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CONTROL_C_EXIT 3221225786
     * }
     */
    public static int STATUS_CONTROL_C_EXIT() {
        return STATUS_CONTROL_C_EXIT;
    }
    private static final int STATUS_DLL_INIT_FAILED = (int)3221225794L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DLL_INIT_FAILED 3221225794
     * }
     */
    public static int STATUS_DLL_INIT_FAILED() {
        return STATUS_DLL_INIT_FAILED;
    }
    private static final int STATUS_CONTROL_STACK_VIOLATION = (int)3221225906L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CONTROL_STACK_VIOLATION 3221225906
     * }
     */
    public static int STATUS_CONTROL_STACK_VIOLATION() {
        return STATUS_CONTROL_STACK_VIOLATION;
    }
    private static final int STATUS_FLOAT_MULTIPLE_FAULTS = (int)3221226164L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_MULTIPLE_FAULTS 3221226164
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_FAULTS() {
        return STATUS_FLOAT_MULTIPLE_FAULTS;
    }
    private static final int STATUS_FLOAT_MULTIPLE_TRAPS = (int)3221226165L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_MULTIPLE_TRAPS 3221226165
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_TRAPS() {
        return STATUS_FLOAT_MULTIPLE_TRAPS;
    }
    private static final int STATUS_REG_NAT_CONSUMPTION = (int)3221226185L;
    /**
     * {@snippet lang=c :
     * #define STATUS_REG_NAT_CONSUMPTION 3221226185
     * }
     */
    public static int STATUS_REG_NAT_CONSUMPTION() {
        return STATUS_REG_NAT_CONSUMPTION;
    }
    private static final int STATUS_HEAP_CORRUPTION = (int)3221226356L;
    /**
     * {@snippet lang=c :
     * #define STATUS_HEAP_CORRUPTION 3221226356
     * }
     */
    public static int STATUS_HEAP_CORRUPTION() {
        return STATUS_HEAP_CORRUPTION;
    }
    private static final int STATUS_STACK_BUFFER_OVERRUN = (int)3221226505L;
    /**
     * {@snippet lang=c :
     * #define STATUS_STACK_BUFFER_OVERRUN 3221226505
     * }
     */
    public static int STATUS_STACK_BUFFER_OVERRUN() {
        return STATUS_STACK_BUFFER_OVERRUN;
    }
    private static final int STATUS_INVALID_CRUNTIME_PARAMETER = (int)3221226519L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_CRUNTIME_PARAMETER 3221226519
     * }
     */
    public static int STATUS_INVALID_CRUNTIME_PARAMETER() {
        return STATUS_INVALID_CRUNTIME_PARAMETER;
    }
    private static final int STATUS_ASSERTION_FAILURE = (int)3221226528L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ASSERTION_FAILURE 3221226528
     * }
     */
    public static int STATUS_ASSERTION_FAILURE() {
        return STATUS_ASSERTION_FAILURE;
    }
    private static final int STATUS_ENCLAVE_VIOLATION = (int)3221226658L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ENCLAVE_VIOLATION 3221226658
     * }
     */
    public static int STATUS_ENCLAVE_VIOLATION() {
        return STATUS_ENCLAVE_VIOLATION;
    }
    private static final int STATUS_INTERRUPTED = (int)3221226773L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTERRUPTED 3221226773
     * }
     */
    public static int STATUS_INTERRUPTED() {
        return STATUS_INTERRUPTED;
    }
    private static final int STATUS_THREAD_NOT_RUNNING = (int)3221226774L;
    /**
     * {@snippet lang=c :
     * #define STATUS_THREAD_NOT_RUNNING 3221226774
     * }
     */
    public static int STATUS_THREAD_NOT_RUNNING() {
        return STATUS_THREAD_NOT_RUNNING;
    }
    private static final int STATUS_ALREADY_REGISTERED = (int)3221227288L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ALREADY_REGISTERED 3221227288
     * }
     */
    public static int STATUS_ALREADY_REGISTERED() {
        return STATUS_ALREADY_REGISTERED;
    }
    private static final int STATUS_SXS_EARLY_DEACTIVATION = (int)3222601743L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SXS_EARLY_DEACTIVATION 3222601743
     * }
     */
    public static int STATUS_SXS_EARLY_DEACTIVATION() {
        return STATUS_SXS_EARLY_DEACTIVATION;
    }
    private static final int STATUS_SXS_INVALID_DEACTIVATION = (int)3222601744L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SXS_INVALID_DEACTIVATION 3222601744
     * }
     */
    public static int STATUS_SXS_INVALID_DEACTIVATION() {
        return STATUS_SXS_INVALID_DEACTIVATION;
    }
    private static final int MAXIMUM_SUSPEND_COUNT = (int)127L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_SUSPEND_COUNT 127
     * }
     */
    public static int MAXIMUM_SUSPEND_COUNT() {
        return MAXIMUM_SUSPEND_COUNT;
    }
    private static final int PF_TEMPORAL_LEVEL_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_1 1
     * }
     */
    public static int PF_TEMPORAL_LEVEL_1() {
        return PF_TEMPORAL_LEVEL_1;
    }
    private static final int PF_TEMPORAL_LEVEL_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_2 2
     * }
     */
    public static int PF_TEMPORAL_LEVEL_2() {
        return PF_TEMPORAL_LEVEL_2;
    }
    private static final int PF_TEMPORAL_LEVEL_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_3 3
     * }
     */
    public static int PF_TEMPORAL_LEVEL_3() {
        return PF_TEMPORAL_LEVEL_3;
    }
    private static final int PF_NON_TEMPORAL_LEVEL_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PF_NON_TEMPORAL_LEVEL_ALL 0
     * }
     */
    public static int PF_NON_TEMPORAL_LEVEL_ALL() {
        return PF_NON_TEMPORAL_LEVEL_ALL;
    }
    private static final int CONTEXT_AMD64 = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_AMD64 1048576
     * }
     */
    public static int CONTEXT_AMD64() {
        return CONTEXT_AMD64;
    }
    private static final int CONTEXT_CONTROL = (int)1048577L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_CONTROL 1048577
     * }
     */
    public static int CONTEXT_CONTROL() {
        return CONTEXT_CONTROL;
    }
    private static final int CONTEXT_INTEGER = (int)1048578L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_INTEGER 1048578
     * }
     */
    public static int CONTEXT_INTEGER() {
        return CONTEXT_INTEGER;
    }
    private static final int CONTEXT_SEGMENTS = (int)1048580L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_SEGMENTS 1048580
     * }
     */
    public static int CONTEXT_SEGMENTS() {
        return CONTEXT_SEGMENTS;
    }
    private static final int CONTEXT_FLOATING_POINT = (int)1048584L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_FLOATING_POINT 1048584
     * }
     */
    public static int CONTEXT_FLOATING_POINT() {
        return CONTEXT_FLOATING_POINT;
    }
    private static final int CONTEXT_DEBUG_REGISTERS = (int)1048592L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_DEBUG_REGISTERS 1048592
     * }
     */
    public static int CONTEXT_DEBUG_REGISTERS() {
        return CONTEXT_DEBUG_REGISTERS;
    }
    private static final int CONTEXT_FULL = (int)1048587L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_FULL 1048587
     * }
     */
    public static int CONTEXT_FULL() {
        return CONTEXT_FULL;
    }
    private static final int CONTEXT_ALL = (int)1048607L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ALL 1048607
     * }
     */
    public static int CONTEXT_ALL() {
        return CONTEXT_ALL;
    }
    private static final int CONTEXT_XSTATE = (int)1048640L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_XSTATE 1048640
     * }
     */
    public static int CONTEXT_XSTATE() {
        return CONTEXT_XSTATE;
    }
    private static final int CONTEXT_KERNEL_CET = (int)1048704L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_KERNEL_CET 1048704
     * }
     */
    public static int CONTEXT_KERNEL_CET() {
        return CONTEXT_KERNEL_CET;
    }
    private static final int CONTEXT_EXCEPTION_ACTIVE = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_ACTIVE 134217728
     * }
     */
    public static int CONTEXT_EXCEPTION_ACTIVE() {
        return CONTEXT_EXCEPTION_ACTIVE;
    }
    private static final int CONTEXT_SERVICE_ACTIVE = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_SERVICE_ACTIVE 268435456
     * }
     */
    public static int CONTEXT_SERVICE_ACTIVE() {
        return CONTEXT_SERVICE_ACTIVE;
    }
    private static final int CONTEXT_EXCEPTION_REQUEST = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_REQUEST 1073741824
     * }
     */
    public static int CONTEXT_EXCEPTION_REQUEST() {
        return CONTEXT_EXCEPTION_REQUEST;
    }
    private static final int CONTEXT_EXCEPTION_REPORTING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_REPORTING 2147483648
     * }
     */
    public static int CONTEXT_EXCEPTION_REPORTING() {
        return CONTEXT_EXCEPTION_REPORTING;
    }
    private static final int UNW_FLAG_NO_EPILOGUE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define UNW_FLAG_NO_EPILOGUE 2147483648
     * }
     */
    public static int UNW_FLAG_NO_EPILOGUE() {
        return UNW_FLAG_NO_EPILOGUE;
    }
    /**
     * {@snippet lang=c :
     * #define OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME "OutOfProcessFunctionTableCallback"
     * }
     */
    public static MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME() {
        class Holder {
            static final MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME
                = LIBRARY_ARENA.allocateFrom("OutOfProcessFunctionTableCallback");
        }
        return Holder.OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME;
    }
    private static final int CONTEXT_ARM64 = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64 4194304
     * }
     */
    public static int CONTEXT_ARM64() {
        return CONTEXT_ARM64;
    }
    private static final int CONTEXT_ARM64_CONTROL = (int)4194305L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_CONTROL 4194305
     * }
     */
    public static int CONTEXT_ARM64_CONTROL() {
        return CONTEXT_ARM64_CONTROL;
    }
    private static final int CONTEXT_ARM64_INTEGER = (int)4194306L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_INTEGER 4194306
     * }
     */
    public static int CONTEXT_ARM64_INTEGER() {
        return CONTEXT_ARM64_INTEGER;
    }
    private static final int CONTEXT_ARM64_FLOATING_POINT = (int)4194308L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_FLOATING_POINT 4194308
     * }
     */
    public static int CONTEXT_ARM64_FLOATING_POINT() {
        return CONTEXT_ARM64_FLOATING_POINT;
    }
    private static final int CONTEXT_ARM64_DEBUG_REGISTERS = (int)4194312L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_DEBUG_REGISTERS 4194312
     * }
     */
    public static int CONTEXT_ARM64_DEBUG_REGISTERS() {
        return CONTEXT_ARM64_DEBUG_REGISTERS;
    }
    private static final int CONTEXT_ARM64_X18 = (int)4194320L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_X18 4194320
     * }
     */
    public static int CONTEXT_ARM64_X18() {
        return CONTEXT_ARM64_X18;
    }
    private static final int CONTEXT_ARM64_FULL = (int)4194311L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_FULL 4194311
     * }
     */
    public static int CONTEXT_ARM64_FULL() {
        return CONTEXT_ARM64_FULL;
    }
    private static final int CONTEXT_ARM64_ALL = (int)4194335L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_ALL 4194335
     * }
     */
    public static int CONTEXT_ARM64_ALL() {
        return CONTEXT_ARM64_ALL;
    }
    private static final int NONVOL_INT_NUMREG_ARM64 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_INT_NUMREG_ARM64 11
     * }
     */
    public static int NONVOL_INT_NUMREG_ARM64() {
        return NONVOL_INT_NUMREG_ARM64;
    }
    private static final int NONVOL_FP_NUMREG_ARM64 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_FP_NUMREG_ARM64 8
     * }
     */
    public static int NONVOL_FP_NUMREG_ARM64() {
        return NONVOL_FP_NUMREG_ARM64;
    }
    private static final long NONVOL_INT_SIZE_ARM64 = 88L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_INT_SIZE_ARM64 88
     * }
     */
    public static long NONVOL_INT_SIZE_ARM64() {
        return NONVOL_INT_SIZE_ARM64;
    }
    private static final long NONVOL_FP_SIZE_ARM64 = 64L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_FP_SIZE_ARM64 64
     * }
     */
    public static long NONVOL_FP_SIZE_ARM64() {
        return NONVOL_FP_SIZE_ARM64;
    }
    private static final int WOW64_CONTEXT_CONTROL = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_CONTROL 65537
     * }
     */
    public static int WOW64_CONTEXT_CONTROL() {
        return WOW64_CONTEXT_CONTROL;
    }
    private static final int WOW64_CONTEXT_INTEGER = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_INTEGER 65538
     * }
     */
    public static int WOW64_CONTEXT_INTEGER() {
        return WOW64_CONTEXT_INTEGER;
    }
    private static final int WOW64_CONTEXT_SEGMENTS = (int)65540L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_SEGMENTS 65540
     * }
     */
    public static int WOW64_CONTEXT_SEGMENTS() {
        return WOW64_CONTEXT_SEGMENTS;
    }
    private static final int WOW64_CONTEXT_FLOATING_POINT = (int)65544L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_FLOATING_POINT 65544
     * }
     */
    public static int WOW64_CONTEXT_FLOATING_POINT() {
        return WOW64_CONTEXT_FLOATING_POINT;
    }
    private static final int WOW64_CONTEXT_DEBUG_REGISTERS = (int)65552L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_DEBUG_REGISTERS 65552
     * }
     */
    public static int WOW64_CONTEXT_DEBUG_REGISTERS() {
        return WOW64_CONTEXT_DEBUG_REGISTERS;
    }
    private static final int WOW64_CONTEXT_EXTENDED_REGISTERS = (int)65568L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_EXTENDED_REGISTERS 65568
     * }
     */
    public static int WOW64_CONTEXT_EXTENDED_REGISTERS() {
        return WOW64_CONTEXT_EXTENDED_REGISTERS;
    }
    private static final int WOW64_CONTEXT_FULL = (int)65543L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_FULL 65543
     * }
     */
    public static int WOW64_CONTEXT_FULL() {
        return WOW64_CONTEXT_FULL;
    }
    private static final int WOW64_CONTEXT_ALL = (int)65599L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_ALL 65599
     * }
     */
    public static int WOW64_CONTEXT_ALL() {
        return WOW64_CONTEXT_ALL;
    }
    private static final int WOW64_CONTEXT_XSTATE = (int)65600L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_XSTATE 65600
     * }
     */
    public static int WOW64_CONTEXT_XSTATE() {
        return WOW64_CONTEXT_XSTATE;
    }
    private static final int WOW64_CONTEXT_EXCEPTION_REPORTING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_EXCEPTION_REPORTING 2147483648
     * }
     */
    public static int WOW64_CONTEXT_EXCEPTION_REPORTING() {
        return WOW64_CONTEXT_EXCEPTION_REPORTING;
    }
    private static final int EXCEPTION_UNWIND = (int)102L;
    /**
     * {@snippet lang=c :
     * #define EXCEPTION_UNWIND 102
     * }
     */
    public static int EXCEPTION_UNWIND() {
        return EXCEPTION_UNWIND;
    }
    private static final int DELETE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define DELETE 65536
     * }
     */
    public static int DELETE() {
        return DELETE;
    }
    private static final int READ_CONTROL = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define READ_CONTROL 131072
     * }
     */
    public static int READ_CONTROL() {
        return READ_CONTROL;
    }
    private static final int WRITE_DAC = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define WRITE_DAC 262144
     * }
     */
    public static int WRITE_DAC() {
        return WRITE_DAC;
    }
    private static final int WRITE_OWNER = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define WRITE_OWNER 524288
     * }
     */
    public static int WRITE_OWNER() {
        return WRITE_OWNER;
    }
    private static final int SYNCHRONIZE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define SYNCHRONIZE 1048576
     * }
     */
    public static int SYNCHRONIZE() {
        return SYNCHRONIZE;
    }
    private static final int STANDARD_RIGHTS_REQUIRED = (int)983040L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_REQUIRED 983040
     * }
     */
    public static int STANDARD_RIGHTS_REQUIRED() {
        return STANDARD_RIGHTS_REQUIRED;
    }
    private static final int STANDARD_RIGHTS_READ = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_READ 131072
     * }
     */
    public static int STANDARD_RIGHTS_READ() {
        return STANDARD_RIGHTS_READ;
    }
    private static final int STANDARD_RIGHTS_WRITE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_WRITE 131072
     * }
     */
    public static int STANDARD_RIGHTS_WRITE() {
        return STANDARD_RIGHTS_WRITE;
    }
    private static final int STANDARD_RIGHTS_EXECUTE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_EXECUTE 131072
     * }
     */
    public static int STANDARD_RIGHTS_EXECUTE() {
        return STANDARD_RIGHTS_EXECUTE;
    }
    private static final int STANDARD_RIGHTS_ALL = (int)2031616L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_ALL 2031616
     * }
     */
    public static int STANDARD_RIGHTS_ALL() {
        return STANDARD_RIGHTS_ALL;
    }
    private static final int SPECIFIC_RIGHTS_ALL = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define SPECIFIC_RIGHTS_ALL 65535
     * }
     */
    public static int SPECIFIC_RIGHTS_ALL() {
        return SPECIFIC_RIGHTS_ALL;
    }
    private static final int ACCESS_SYSTEM_SECURITY = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_SYSTEM_SECURITY 16777216
     * }
     */
    public static int ACCESS_SYSTEM_SECURITY() {
        return ACCESS_SYSTEM_SECURITY;
    }
    private static final int MAXIMUM_ALLOWED = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_ALLOWED 33554432
     * }
     */
    public static int MAXIMUM_ALLOWED() {
        return MAXIMUM_ALLOWED;
    }
    private static final int GENERIC_READ = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_READ 2147483648
     * }
     */
    public static int GENERIC_READ() {
        return GENERIC_READ;
    }
    private static final int GENERIC_WRITE = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_WRITE 1073741824
     * }
     */
    public static int GENERIC_WRITE() {
        return GENERIC_WRITE;
    }
    private static final int GENERIC_EXECUTE = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_EXECUTE 536870912
     * }
     */
    public static int GENERIC_EXECUTE() {
        return GENERIC_EXECUTE;
    }
    private static final int GENERIC_ALL = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_ALL 268435456
     * }
     */
    public static int GENERIC_ALL() {
        return GENERIC_ALL;
    }
    private static final int SID_REVISION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SID_REVISION 1
     * }
     */
    public static int SID_REVISION() {
        return SID_REVISION;
    }
    private static final int SID_MAX_SUB_AUTHORITIES = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SID_MAX_SUB_AUTHORITIES 15
     * }
     */
    public static int SID_MAX_SUB_AUTHORITIES() {
        return SID_MAX_SUB_AUTHORITIES;
    }
    private static final int SID_RECOMMENDED_SUB_AUTHORITIES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SID_RECOMMENDED_SUB_AUTHORITIES 1
     * }
     */
    public static int SID_RECOMMENDED_SUB_AUTHORITIES() {
        return SID_RECOMMENDED_SUB_AUTHORITIES;
    }
    private static final long SECURITY_MAX_SID_SIZE = 68L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_SID_SIZE 68
     * }
     */
    public static long SECURITY_MAX_SID_SIZE() {
        return SECURITY_MAX_SID_SIZE;
    }
    private static final int SECURITY_MAX_SID_STRING_CHARACTERS = (int)187L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_SID_STRING_CHARACTERS 187
     * }
     */
    public static int SECURITY_MAX_SID_STRING_CHARACTERS() {
        return SECURITY_MAX_SID_STRING_CHARACTERS;
    }
    private static final int SECURITY_NULL_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NULL_RID 0
     * }
     */
    public static int SECURITY_NULL_RID() {
        return SECURITY_NULL_RID;
    }
    private static final int SECURITY_WORLD_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WORLD_RID 0
     * }
     */
    public static int SECURITY_WORLD_RID() {
        return SECURITY_WORLD_RID;
    }
    private static final int SECURITY_LOCAL_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_RID 0
     * }
     */
    public static int SECURITY_LOCAL_RID() {
        return SECURITY_LOCAL_RID;
    }
    private static final int SECURITY_LOCAL_LOGON_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_LOGON_RID 1
     * }
     */
    public static int SECURITY_LOCAL_LOGON_RID() {
        return SECURITY_LOCAL_LOGON_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_RID 0
     * }
     */
    public static int SECURITY_CREATOR_OWNER_RID() {
        return SECURITY_CREATOR_OWNER_RID;
    }
    private static final int SECURITY_CREATOR_GROUP_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_GROUP_RID 1
     * }
     */
    public static int SECURITY_CREATOR_GROUP_RID() {
        return SECURITY_CREATOR_GROUP_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_SERVER_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_SERVER_RID 2
     * }
     */
    public static int SECURITY_CREATOR_OWNER_SERVER_RID() {
        return SECURITY_CREATOR_OWNER_SERVER_RID;
    }
    private static final int SECURITY_CREATOR_GROUP_SERVER_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_GROUP_SERVER_RID 3
     * }
     */
    public static int SECURITY_CREATOR_GROUP_SERVER_RID() {
        return SECURITY_CREATOR_GROUP_SERVER_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_RIGHTS_RID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_RIGHTS_RID 4
     * }
     */
    public static int SECURITY_CREATOR_OWNER_RIGHTS_RID() {
        return SECURITY_CREATOR_OWNER_RIGHTS_RID;
    }
    private static final int SECURITY_DIALUP_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DIALUP_RID 1
     * }
     */
    public static int SECURITY_DIALUP_RID() {
        return SECURITY_DIALUP_RID;
    }
    private static final int SECURITY_NETWORK_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NETWORK_RID 2
     * }
     */
    public static int SECURITY_NETWORK_RID() {
        return SECURITY_NETWORK_RID;
    }
    private static final int SECURITY_BATCH_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BATCH_RID 3
     * }
     */
    public static int SECURITY_BATCH_RID() {
        return SECURITY_BATCH_RID;
    }
    private static final int SECURITY_INTERACTIVE_RID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_INTERACTIVE_RID 4
     * }
     */
    public static int SECURITY_INTERACTIVE_RID() {
        return SECURITY_INTERACTIVE_RID;
    }
    private static final int SECURITY_LOGON_IDS_RID = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOGON_IDS_RID 5
     * }
     */
    public static int SECURITY_LOGON_IDS_RID() {
        return SECURITY_LOGON_IDS_RID;
    }
    private static final int SECURITY_LOGON_IDS_RID_COUNT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOGON_IDS_RID_COUNT 3
     * }
     */
    public static int SECURITY_LOGON_IDS_RID_COUNT() {
        return SECURITY_LOGON_IDS_RID_COUNT;
    }
    private static final int SECURITY_SERVICE_RID = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_RID 6
     * }
     */
    public static int SECURITY_SERVICE_RID() {
        return SECURITY_SERVICE_RID;
    }
    private static final int SECURITY_ANONYMOUS_LOGON_RID = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ANONYMOUS_LOGON_RID 7
     * }
     */
    public static int SECURITY_ANONYMOUS_LOGON_RID() {
        return SECURITY_ANONYMOUS_LOGON_RID;
    }
    private static final int SECURITY_PROXY_RID = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROXY_RID 8
     * }
     */
    public static int SECURITY_PROXY_RID() {
        return SECURITY_PROXY_RID;
    }
    private static final int SECURITY_ENTERPRISE_CONTROLLERS_RID = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ENTERPRISE_CONTROLLERS_RID 9
     * }
     */
    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID() {
        return SECURITY_ENTERPRISE_CONTROLLERS_RID;
    }
    private static final int SECURITY_SERVER_LOGON_RID = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVER_LOGON_RID 9
     * }
     */
    public static int SECURITY_SERVER_LOGON_RID() {
        return SECURITY_SERVER_LOGON_RID;
    }
    private static final int SECURITY_PRINCIPAL_SELF_RID = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PRINCIPAL_SELF_RID 10
     * }
     */
    public static int SECURITY_PRINCIPAL_SELF_RID() {
        return SECURITY_PRINCIPAL_SELF_RID;
    }
    private static final int SECURITY_AUTHENTICATED_USER_RID = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATED_USER_RID 11
     * }
     */
    public static int SECURITY_AUTHENTICATED_USER_RID() {
        return SECURITY_AUTHENTICATED_USER_RID;
    }
    private static final int SECURITY_RESTRICTED_CODE_RID = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESTRICTED_CODE_RID 12
     * }
     */
    public static int SECURITY_RESTRICTED_CODE_RID() {
        return SECURITY_RESTRICTED_CODE_RID;
    }
    private static final int SECURITY_TERMINAL_SERVER_RID = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_TERMINAL_SERVER_RID 13
     * }
     */
    public static int SECURITY_TERMINAL_SERVER_RID() {
        return SECURITY_TERMINAL_SERVER_RID;
    }
    private static final int SECURITY_REMOTE_LOGON_RID = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_REMOTE_LOGON_RID 14
     * }
     */
    public static int SECURITY_REMOTE_LOGON_RID() {
        return SECURITY_REMOTE_LOGON_RID;
    }
    private static final int SECURITY_THIS_ORGANIZATION_RID = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_THIS_ORGANIZATION_RID 15
     * }
     */
    public static int SECURITY_THIS_ORGANIZATION_RID() {
        return SECURITY_THIS_ORGANIZATION_RID;
    }
    private static final int SECURITY_IUSER_RID = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_IUSER_RID 17
     * }
     */
    public static int SECURITY_IUSER_RID() {
        return SECURITY_IUSER_RID;
    }
    private static final int SECURITY_LOCAL_SYSTEM_RID = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_SYSTEM_RID 18
     * }
     */
    public static int SECURITY_LOCAL_SYSTEM_RID() {
        return SECURITY_LOCAL_SYSTEM_RID;
    }
    private static final int SECURITY_LOCAL_SERVICE_RID = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_SERVICE_RID 19
     * }
     */
    public static int SECURITY_LOCAL_SERVICE_RID() {
        return SECURITY_LOCAL_SERVICE_RID;
    }
    private static final int SECURITY_NETWORK_SERVICE_RID = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NETWORK_SERVICE_RID 20
     * }
     */
    public static int SECURITY_NETWORK_SERVICE_RID() {
        return SECURITY_NETWORK_SERVICE_RID;
    }
    private static final int SECURITY_NT_NON_UNIQUE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NT_NON_UNIQUE 21
     * }
     */
    public static int SECURITY_NT_NON_UNIQUE() {
        return SECURITY_NT_NON_UNIQUE;
    }
    private static final int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT 3
     * }
     */
    public static int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT() {
        return SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT;
    }
    private static final int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID 22
     * }
     */
    public static int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID() {
        return SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID;
    }
    private static final int SECURITY_BUILTIN_DOMAIN_RID = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_DOMAIN_RID 32
     * }
     */
    public static int SECURITY_BUILTIN_DOMAIN_RID() {
        return SECURITY_BUILTIN_DOMAIN_RID;
    }
    private static final int SECURITY_WRITE_RESTRICTED_CODE_RID = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WRITE_RESTRICTED_CODE_RID 33
     * }
     */
    public static int SECURITY_WRITE_RESTRICTED_CODE_RID() {
        return SECURITY_WRITE_RESTRICTED_CODE_RID;
    }
    private static final int SECURITY_PACKAGE_BASE_RID = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_BASE_RID 64
     * }
     */
    public static int SECURITY_PACKAGE_BASE_RID() {
        return SECURITY_PACKAGE_BASE_RID;
    }
    private static final int SECURITY_PACKAGE_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_RID_COUNT 2
     * }
     */
    public static int SECURITY_PACKAGE_RID_COUNT() {
        return SECURITY_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_PACKAGE_NTLM_RID = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_NTLM_RID 10
     * }
     */
    public static int SECURITY_PACKAGE_NTLM_RID() {
        return SECURITY_PACKAGE_NTLM_RID;
    }
    private static final int SECURITY_PACKAGE_SCHANNEL_RID = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_SCHANNEL_RID 14
     * }
     */
    public static int SECURITY_PACKAGE_SCHANNEL_RID() {
        return SECURITY_PACKAGE_SCHANNEL_RID;
    }
    private static final int SECURITY_PACKAGE_DIGEST_RID = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_DIGEST_RID 21
     * }
     */
    public static int SECURITY_PACKAGE_DIGEST_RID() {
        return SECURITY_PACKAGE_DIGEST_RID;
    }
    private static final int SECURITY_CRED_TYPE_BASE_RID = (int)65L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_BASE_RID 65
     * }
     */
    public static int SECURITY_CRED_TYPE_BASE_RID() {
        return SECURITY_CRED_TYPE_BASE_RID;
    }
    private static final int SECURITY_CRED_TYPE_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_RID_COUNT 2
     * }
     */
    public static int SECURITY_CRED_TYPE_RID_COUNT() {
        return SECURITY_CRED_TYPE_RID_COUNT;
    }
    private static final int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_THIS_ORG_CERT_RID 1
     * }
     */
    public static int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID() {
        return SECURITY_CRED_TYPE_THIS_ORG_CERT_RID;
    }
    private static final int SECURITY_MIN_BASE_RID = (int)80L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MIN_BASE_RID 80
     * }
     */
    public static int SECURITY_MIN_BASE_RID() {
        return SECURITY_MIN_BASE_RID;
    }
    private static final int SECURITY_SERVICE_ID_BASE_RID = (int)80L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_ID_BASE_RID 80
     * }
     */
    public static int SECURITY_SERVICE_ID_BASE_RID() {
        return SECURITY_SERVICE_ID_BASE_RID;
    }
    private static final int SECURITY_SERVICE_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_SERVICE_ID_RID_COUNT() {
        return SECURITY_SERVICE_ID_RID_COUNT;
    }
    private static final int SECURITY_RESERVED_ID_BASE_RID = (int)81L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESERVED_ID_BASE_RID 81
     * }
     */
    public static int SECURITY_RESERVED_ID_BASE_RID() {
        return SECURITY_RESERVED_ID_BASE_RID;
    }
    private static final int SECURITY_APPPOOL_ID_BASE_RID = (int)82L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APPPOOL_ID_BASE_RID 82
     * }
     */
    public static int SECURITY_APPPOOL_ID_BASE_RID() {
        return SECURITY_APPPOOL_ID_BASE_RID;
    }
    private static final int SECURITY_APPPOOL_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APPPOOL_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_APPPOOL_ID_RID_COUNT() {
        return SECURITY_APPPOOL_ID_RID_COUNT;
    }
    private static final int SECURITY_VIRTUALSERVER_ID_BASE_RID = (int)83L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_VIRTUALSERVER_ID_BASE_RID 83
     * }
     */
    public static int SECURITY_VIRTUALSERVER_ID_BASE_RID() {
        return SECURITY_VIRTUALSERVER_ID_BASE_RID;
    }
    private static final int SECURITY_VIRTUALSERVER_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_VIRTUALSERVER_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_VIRTUALSERVER_ID_RID_COUNT() {
        return SECURITY_VIRTUALSERVER_ID_RID_COUNT;
    }
    private static final int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = (int)84L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMODEDRIVERHOST_ID_BASE_RID 84
     * }
     */
    public static int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID() {
        return SECURITY_USERMODEDRIVERHOST_ID_BASE_RID;
    }
    private static final int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT() {
        return SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT;
    }
    private static final int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = (int)85L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID 85
     * }
     */
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID() {
        return SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID;
    }
    private static final int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT() {
        return SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT;
    }
    private static final int SECURITY_WMIHOST_ID_BASE_RID = (int)86L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WMIHOST_ID_BASE_RID 86
     * }
     */
    public static int SECURITY_WMIHOST_ID_BASE_RID() {
        return SECURITY_WMIHOST_ID_BASE_RID;
    }
    private static final int SECURITY_WMIHOST_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WMIHOST_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_WMIHOST_ID_RID_COUNT() {
        return SECURITY_WMIHOST_ID_RID_COUNT;
    }
}


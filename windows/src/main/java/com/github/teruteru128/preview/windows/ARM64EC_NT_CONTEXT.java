// Generated by jextract

package com.github.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef struct _ARM64EC_NT_CONTEXT {
 *     union {
 *         struct {
 *             DWORD64 AMD64_P1Home;
 *             DWORD64 AMD64_P2Home;
 *             DWORD64 AMD64_P3Home;
 *             DWORD64 AMD64_P4Home;
 *             DWORD64 AMD64_P5Home;
 *             DWORD64 AMD64_P6Home;
 *             DWORD ContextFlags;
 *             DWORD AMD64_MxCsr_copy;
 *             WORD AMD64_SegCs;
 *             WORD AMD64_SegDs;
 *             WORD AMD64_SegEs;
 *             WORD AMD64_SegFs;
 *             WORD AMD64_SegGs;
 *             WORD AMD64_SegSs;
 *             DWORD AMD64_EFlags;
 *             DWORD64 AMD64_Dr0;
 *             DWORD64 AMD64_Dr1;
 *             DWORD64 AMD64_Dr2;
 *             DWORD64 AMD64_Dr3;
 *             DWORD64 AMD64_Dr6;
 *             DWORD64 AMD64_Dr7;
 *             DWORD64 X8;
 *             DWORD64 X0;
 *             DWORD64 X1;
 *             DWORD64 X27;
 *             DWORD64 Sp;
 *             DWORD64 Fp;
 *             DWORD64 X25;
 *             DWORD64 X26;
 *             DWORD64 X2;
 *             DWORD64 X3;
 *             DWORD64 X4;
 *             DWORD64 X5;
 *             DWORD64 X19;
 *             DWORD64 X20;
 *             DWORD64 X21;
 *             DWORD64 X22;
 *             DWORD64 Pc;
 *             struct {
 *                 WORD AMD64_ControlWord;
 *                 WORD AMD64_StatusWord;
 *                 BYTE AMD64_TagWord;
 *                 BYTE AMD64_Reserved1;
 *                 WORD AMD64_ErrorOpcode;
 *                 DWORD AMD64_ErrorOffset;
 *                 WORD AMD64_ErrorSelector;
 *                 WORD AMD64_Reserved2;
 *                 DWORD AMD64_DataOffset;
 *                 WORD AMD64_DataSelector;
 *                 WORD AMD64_Reserved3;
 *                 DWORD AMD64_MxCsr;
 *                 DWORD AMD64_MxCsr_Mask;
 *                 DWORD64 Lr;
 *                 WORD X16_0;
 *                 WORD AMD64_St0_Reserved1;
 *                 DWORD AMD64_St0_Reserved2;
 *                 DWORD64 X6;
 *                 WORD X16_1;
 *                 WORD AMD64_St1_Reserved1;
 *                 DWORD AMD64_St1_Reserved2;
 *                 DWORD64 X7;
 *                 WORD X16_2;
 *                 WORD AMD64_St2_Reserved1;
 *                 DWORD AMD64_St2_Reserved2;
 *                 DWORD64 X9;
 *                 WORD X16_3;
 *                 WORD AMD64_St3_Reserved1;
 *                 DWORD AMD64_St3_Reserved2;
 *                 DWORD64 X10;
 *                 WORD X17_0;
 *                 WORD AMD64_St4_Reserved1;
 *                 DWORD AMD64_St4_Reserved2;
 *                 DWORD64 X11;
 *                 WORD X17_1;
 *                 WORD AMD64_St5_Reserved1;
 *                 DWORD AMD64_St5_Reserved2;
 *                 DWORD64 X12;
 *                 WORD X17_2;
 *                 WORD AMD64_St6_Reserved1;
 *                 DWORD AMD64_St6_Reserved2;
 *                 DWORD64 X15;
 *                 WORD X17_3;
 *                 WORD AMD64_St7_Reserved1;
 *                 DWORD AMD64_St7_Reserved2;
 *                 ARM64_NT_NEON128 V[16];
 *                 BYTE AMD64_XSAVE_FORMAT_Reserved4[96];
 *             };
 *             ARM64_NT_NEON128 AMD64_VectorRegister[26];
 *             DWORD64 AMD64_VectorControl;
 *             DWORD64 AMD64_DebugControl;
 *             DWORD64 AMD64_LastBranchToRip;
 *             DWORD64 AMD64_LastBranchFromRip;
 *             DWORD64 AMD64_LastExceptionToRip;
 *             DWORD64 AMD64_LastExceptionFromRip;
 *         };
 *     };
 * } ARM64EC_NT_CONTEXT
 * }
 */
public class ARM64EC_NT_CONTEXT extends _ARM64EC_NT_CONTEXT {

    ARM64EC_NT_CONTEXT() {
        // Should not be called directly
    }
}


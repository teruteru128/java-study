// Generated by jextract

package com.github.teruteru128.preview.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {
 *     BYTE Buffer[152];
 *     struct {
 *         DWORD64 GpNvRegs[11];
 *         double FpNvRegs[8];
 *     };
 * }
 * }
 */
public class _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {

    _DISPATCHER_CONTEXT_NONVOLREG_ARM64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(152, Windows_h.C_CHAR).withName("Buffer"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(11, Windows_h.C_LONG_LONG).withName("GpNvRegs"),
            MemoryLayout.sequenceLayout(8, Windows_h.C_DOUBLE).withName("FpNvRegs")
        ).withName("$anon$6825:5")
    ).withName("_DISPATCHER_CONTEXT_NONVOLREG_ARM64");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Buffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static final SequenceLayout Buffer$layout() {
        return Buffer$LAYOUT;
    }

    private static final long Buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static final long Buffer$offset() {
        return Buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static MemorySegment Buffer(MemorySegment union) {
        return union.asSlice(Buffer$OFFSET, Buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static void Buffer(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, Buffer$OFFSET, Buffer$LAYOUT.byteSize());
    }

    private static long[] Buffer$DIMS = { 152 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static long[] Buffer$dimensions() {
        return Buffer$DIMS;
    }
    private static final VarHandle Buffer$ELEM_HANDLE = Buffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static byte Buffer(MemorySegment union, long index0) {
        return (byte)Buffer$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Buffer[152]
     * }
     */
    public static void Buffer(MemorySegment union, long index0, byte fieldValue) {
        Buffer$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout GpNvRegs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$6825:5"), groupElement("GpNvRegs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static final SequenceLayout GpNvRegs$layout() {
        return GpNvRegs$LAYOUT;
    }

    private static final long GpNvRegs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static final long GpNvRegs$offset() {
        return GpNvRegs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static MemorySegment GpNvRegs(MemorySegment union) {
        return union.asSlice(GpNvRegs$OFFSET, GpNvRegs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static void GpNvRegs(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, GpNvRegs$OFFSET, GpNvRegs$LAYOUT.byteSize());
    }

    private static long[] GpNvRegs$DIMS = { 11 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static long[] GpNvRegs$dimensions() {
        return GpNvRegs$DIMS;
    }
    private static final VarHandle GpNvRegs$ELEM_HANDLE = GpNvRegs$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static long GpNvRegs(MemorySegment union, long index0) {
        return (long)GpNvRegs$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD64 GpNvRegs[11]
     * }
     */
    public static void GpNvRegs(MemorySegment union, long index0, long fieldValue) {
        GpNvRegs$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout FpNvRegs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$6825:5"), groupElement("FpNvRegs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static final SequenceLayout FpNvRegs$layout() {
        return FpNvRegs$LAYOUT;
    }

    private static final long FpNvRegs$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static final long FpNvRegs$offset() {
        return FpNvRegs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static MemorySegment FpNvRegs(MemorySegment union) {
        return union.asSlice(FpNvRegs$OFFSET, FpNvRegs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static void FpNvRegs(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, FpNvRegs$OFFSET, FpNvRegs$LAYOUT.byteSize());
    }

    private static long[] FpNvRegs$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static long[] FpNvRegs$dimensions() {
        return FpNvRegs$DIMS;
    }
    private static final VarHandle FpNvRegs$ELEM_HANDLE = FpNvRegs$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static double FpNvRegs(MemorySegment union, long index0) {
        return (double)FpNvRegs$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double FpNvRegs[8]
     * }
     */
    public static void FpNvRegs(MemorySegment union, long index0, double fieldValue) {
        FpNvRegs$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


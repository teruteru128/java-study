// Generated by jextract

package com.github.teruteru.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _KERNEL_CET_CONTEXT {
 *     DWORD64 Ssp;
 *     DWORD64 Rip;
 *     WORD SegCs;
 *     union {
 *         WORD AllFlags;
 *         struct {
 *             WORD UseWrss : 1;
 *             WORD PopShadowStackOne : 1;
 *             WORD Unused : 14;
 *         };
 *     };
 *     WORD Fill[2];
 * }
 * }
 */
public class _KERNEL_CET_CONTEXT {

    _KERNEL_CET_CONTEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Windows_h.C_LONG_LONG.withName("Ssp"),
        Windows_h.C_LONG_LONG.withName("Rip"),
        Windows_h.C_SHORT.withName("SegCs"),
        MemoryLayout.unionLayout(
            Windows_h.C_SHORT.withName("AllFlags"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(2)
            ).withName("$anon$2717:9")
        ).withName("$anon$2715:5"),
        MemoryLayout.sequenceLayout(2, Windows_h.C_SHORT).withName("Fill")
    ).withName("_KERNEL_CET_CONTEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Ssp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Ssp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 Ssp
     * }
     */
    public static final OfLong Ssp$layout() {
        return Ssp$LAYOUT;
    }

    private static final long Ssp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 Ssp
     * }
     */
    public static final long Ssp$offset() {
        return Ssp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 Ssp
     * }
     */
    public static long Ssp(MemorySegment struct) {
        return struct.get(Ssp$LAYOUT, Ssp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 Ssp
     * }
     */
    public static void Ssp(MemorySegment struct, long fieldValue) {
        struct.set(Ssp$LAYOUT, Ssp$OFFSET, fieldValue);
    }

    private static final OfLong Rip$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Rip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 Rip
     * }
     */
    public static final OfLong Rip$layout() {
        return Rip$LAYOUT;
    }

    private static final long Rip$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 Rip
     * }
     */
    public static final long Rip$offset() {
        return Rip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 Rip
     * }
     */
    public static long Rip(MemorySegment struct) {
        return struct.get(Rip$LAYOUT, Rip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 Rip
     * }
     */
    public static void Rip(MemorySegment struct, long fieldValue) {
        struct.set(Rip$LAYOUT, Rip$OFFSET, fieldValue);
    }

    private static final OfShort SegCs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SegCs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD SegCs
     * }
     */
    public static final OfShort SegCs$layout() {
        return SegCs$LAYOUT;
    }

    private static final long SegCs$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD SegCs
     * }
     */
    public static final long SegCs$offset() {
        return SegCs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD SegCs
     * }
     */
    public static short SegCs(MemorySegment struct) {
        return struct.get(SegCs$LAYOUT, SegCs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD SegCs
     * }
     */
    public static void SegCs(MemorySegment struct, short fieldValue) {
        struct.set(SegCs$LAYOUT, SegCs$OFFSET, fieldValue);
    }

    private static final OfShort AllFlags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2715:5"), groupElement("AllFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD AllFlags
     * }
     */
    public static final OfShort AllFlags$layout() {
        return AllFlags$LAYOUT;
    }

    private static final long AllFlags$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD AllFlags
     * }
     */
    public static final long AllFlags$offset() {
        return AllFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD AllFlags
     * }
     */
    public static short AllFlags(MemorySegment struct) {
        return struct.get(AllFlags$LAYOUT, AllFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD AllFlags
     * }
     */
    public static void AllFlags(MemorySegment struct, short fieldValue) {
        struct.set(AllFlags$LAYOUT, AllFlags$OFFSET, fieldValue);
    }

    private static final SequenceLayout Fill$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Fill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static final SequenceLayout Fill$layout() {
        return Fill$LAYOUT;
    }

    private static final long Fill$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static final long Fill$offset() {
        return Fill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static MemorySegment Fill(MemorySegment struct) {
        return struct.asSlice(Fill$OFFSET, Fill$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static void Fill(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Fill$OFFSET, Fill$LAYOUT.byteSize());
    }

    private static long[] Fill$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static long[] Fill$dimensions() {
        return Fill$DIMS;
    }
    private static final VarHandle Fill$ELEM_HANDLE = Fill$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static short Fill(MemorySegment struct, long index0) {
        return (short)Fill$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WORD Fill[2]
     * }
     */
    public static void Fill(MemorySegment struct, long index0, short fieldValue) {
        Fill$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package com.github.teruteru.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef DWORD (QUERYHANDLER)(LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD *, DWORD) __attribute__((cdecl))
 * }
 */
public class QUERYHANDLER {

    QUERYHANDLER() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(MemorySegment keycontext, MemorySegment val_list, int num_vals, MemorySegment outputbuffer, MemorySegment total_outlen, int input_blen);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        Windows_h.C_LONG,
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_LONG,
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_LONG
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = Windows_h.upcallHandle(QUERYHANDLER.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(QUERYHANDLER.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr,MemorySegment keycontext, MemorySegment val_list, int num_vals, MemorySegment outputbuffer, MemorySegment total_outlen, int input_blen) {
        try {
            return (int) DOWN$MH.invokeExact(funcPtr, keycontext, val_list, num_vals, outputbuffer, total_outlen, input_blen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


// Generated by jextract

package com.github.teruteru.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef void (RPCNOTIFICATION_ROUTINE)(struct _RPC_ASYNC_STATE {
 *     unsigned int Size;
 *     unsigned long Signature;
 *     long Lock;
 *     unsigned long Flags;
 *     void *StubInfo;
 *     void *UserInfo;
 *     void *RuntimeInfo;
 *     RPC_ASYNC_EVENT Event;
 *     RPC_NOTIFICATION_TYPES NotificationType;
 *     RPC_ASYNC_NOTIFICATION_INFO u;
 *     LONG_PTR Reserved[4];
 * } *, void *, RPC_ASYNC_EVENT) __attribute__((stdcall))
 * }
 */
public class RPCNOTIFICATION_ROUTINE {

    RPCNOTIFICATION_ROUTINE() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(MemorySegment pAsync, MemorySegment Context, int Event);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_INT
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = Windows_h.upcallHandle(RPCNOTIFICATION_ROUTINE.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(RPCNOTIFICATION_ROUTINE.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr,MemorySegment pAsync, MemorySegment Context, int Event) {
        try {
             DOWN$MH.invokeExact(funcPtr, pAsync, Context, Event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


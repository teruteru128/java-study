// Generated by jextract

package com.github.teruteru.windows;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef void (*PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK)(PCCERT_CHAIN_CONTEXT, PCCERT_SERVER_OCSP_RESPONSE_CONTEXT, PCCRL_CONTEXT, PCCRL_CONTEXT, PVOID, DWORD) __attribute__((stdcall))
 * }
 */
public class PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK {

    PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(MemorySegment pChainContext, MemorySegment pServerOcspResponseContext, MemorySegment pNewCrlContext, MemorySegment pPrevCrlContext, MemorySegment pvArg, int dwWriteOcspFileError);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_POINTER,
        Windows_h.C_LONG
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = Windows_h.upcallHandle(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr,MemorySegment pChainContext, MemorySegment pServerOcspResponseContext, MemorySegment pNewCrlContext, MemorySegment pPrevCrlContext, MemorySegment pvArg, int dwWriteOcspFileError) {
        try {
             DOWN$MH.invokeExact(funcPtr, pChainContext, pServerOcspResponseContext, pNewCrlContext, pPrevCrlContext, pvArg, dwWriteOcspFileError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

